{
    "contents" : "---\ntitle: \"PLEASE analysis\"\nauthor: \"Eric Z. Chen\"\ndate: \"`r format(Sys.time(), '%Y %B %d ,  %I:%M %p')`\"\noutput:\n  html_document:\n    fig_width: 8\n    number_sections: yes\n    toc: yes\n    css: style.css\n---\n\n\n```{r note, evel=FALSE,include=FALSE,cache=FALSE,echo=FALSE}\n#### rewrite the plot_MDS function\n######################################\n\n#### The total reads table is not correct\n#### 6004-02 -> 6004-03\n#### 6004-03 -> 6004-04\n\n\n```\n\n\n\n\n```{r load_packages, echo=FALSE,include=FALSE,cache=TRUE}\n####### install necessary packages\npackages <- c(#'phyloseq',\n              ## The arm package will try to unload MASS and cause an error\n              ## clean working space and re-start R to re-run the code\n              'arm', ## coefplot\n              'geiger', ## tips\n              'quantreg',\n              'picante', ## prune.sample\n              'ape', ## read.tree\n              'knitr', ## kable\n              'fpc', ## pamk\n              'pheatmap','reshape2',\n              'randomForest','devtools','ggplot2','lazyeval',\n              'vegan','tidyr','dplyr')\n### unload ggplot2, because it conflits with arm\ntry(unloadNamespace(\"ggplot2\"), silent = TRUE)\n### load arm first then ggplot2\nfor (pk in packages) {library(pk,character.only = TRUE,quietly = TRUE)}\n\n### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n### How to reproduce my analysis with the same package\n### Copy my packrat.lock file into your packrat folder\n### Run packrat::status and packrat::restore\n### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n### use packrat to manage the packages\n### do not install them manually\nif (FALSE) {\n  for (pk in packages) {\n    if (!require(pk,character.only = TRUE)) {\n      if (pk == 'pheatmap') {\n          devtools::install_github(\"raivokolde/pheatmap\")\n      }\n      else {\n        install.packages(pk)\n      }\n    }\n    require(pk,character.only = TRUE,quietly = TRUE)\n  }\n}\n\n#####!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!##########\n### dplyr::select() conflicts with MASS::select()\n### do not load dply!\n#####!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!##########\n\n#########################\n### change the working directory\ntry(setwd('5_Analysis/'))\n\n\n#####################################################\n#### load the package instead of sourcing the code in the future  \nsource('../../14_Metagenomic_toolkit/metagenomic_toolkit/R/merge_two_tables.R')\nsource('../../14_Metagenomic_toolkit/metagenomic_toolkit/R/subset_data_by_sample_info.R')\nsource('../../14_Metagenomic_toolkit/metagenomic_toolkit/R/calculate_distance.R')\nsource('../../14_Metagenomic_toolkit/metagenomic_toolkit/R/find_best_clustering.R')\nsource('../../14_Metagenomic_toolkit/metagenomic_toolkit/R/wilcox_test.R')\nsource('../../14_Metagenomic_toolkit/metagenomic_toolkit/R/random_forest.R')\nsource('../../14_Metagenomic_toolkit/metagenomic_toolkit/R/PERMANOVA_analysis.R')\nsource('../../14_Metagenomic_toolkit/metagenomic_toolkit/R/linear_regression_with_permutation.R')\n\n\n####################################################\nopts_chunk$set(#fig.path = '~/3_Results/',\n#  root.dir = '../3_Results/',\n  progress = TRUE, verbose = TRUE,\n  warning=FALSE, message=FALSE,echo=TRUE)\n\n\n```\n\n\n----\n  \n----\n  \n```{r global_variables}\nreload.data <- TRUE\n#try(setwd('5_Analysis/'))\ndata.folder <- '../1_Data/'\n#######\nTLevel<- 'G'\n##'Binary_Jaccard', 'Numerical_Jaccard', 'UniFrac'\nbacteral.distance.method <- \"Binary_Jaccard\"\n#Distance.Method <- \"Bray\"\n```\n\n\n```{r define_colors,include=FALSE,echo=TRUE}\ncgreen <- rgb(77,175,74,maxColorValue =255)\ncpurple <- rgb(152,78,163,maxColorValue =255)\ncblue <- rgb(55,126,184,maxColorValue =255)\ncred <- rgb(228,26,28,maxColorValue =255)\n```\n\n```{r functions}\n\nadd_back_rownames = function(df,row.var){\n  df <- as.data.frame(df)\n  rownames(df) <- df[,row.var]\n  df <- df[,colnames(df) != row.var,drop=F]\n  return(df)\n}\n\ncount_samples_by_rownames = function(data.mat){\n  P.T1 <- length(grep('-01',rownames(data.mat)))\n  P.T2 <- length(grep('-02',rownames(data.mat)))\n  P.T3 <- length(grep('-03',rownames(data.mat)))\n  P.T4 <- length(grep('-04',rownames(data.mat)))\n  Comb <- length(grep('-',rownames(data.mat),invert=TRUE))\n  cat('COMBO samples ',Comb ,'\\n')\n  cat('PLEASE-T1 samples ',P.T1 ,'\\n')\n  cat('PLEASE-T2 samples ',P.T2 ,'\\n')\n  cat('PLEASE-T3 samples ',P.T3 ,'\\n')\n  cat('PLEASE-T4 samples ',P.T4 ,'\\n')\n}\n```\n\n\n---------------------------------------------------------------\n***************************************************************\n# Load raw data\n***************\n  \n## Load bacterial data\nLoad COMBO (normal) and PLEASE (disease) bacterial data. Load total read counts for each sample.\n```{r load_bacterial_data, cache=TRUE}\nPLEASE.file <- paste('../1_Data/Raw_Data/MetaPhlAn/PLEASE/',TLevel,\n                     '_Remove_unclassfied_Renormalized_Merge_Rel_MetaPhlAn_Result.xls',sep='')\nPLEASE.raw <- read.table(PLEASE.file,sep='\\t',header=TRUE,row.names = 1,check.names=FALSE,stringsAsFactors=FALSE)\nPLEASE.raw <- t(PLEASE.raw)\ncat('samples','taxa',dim(PLEASE.raw),'\\n')\nPLEASE.raw[1:3,1:3]\n\n\nCOMBO.file <- paste('../1_Data/Raw_Data/MetaPhlAn/COMBO/',TLevel,\n                    '_Remove_unclassfied_Renormalized_Merge_Rel_MetaPhlAn_Result.xls',sep='')\nCOMBO.raw <- read.table(COMBO.file,sep='\\t',header=TRUE,row.names = 1,check.names=FALSE,stringsAsFactors=FALSE)\nCOMBO.raw <- t(COMBO.raw)\ncat('samples','taxa',dim(COMBO.raw),'\\n')\nCOMBO.raw[1:3,1:3]\n```\n\n\n```{r load_human_read_information,cache=TRUE}\n###################################\n### load total non-human read counts\nhuman.read.file <- '../1_Data/Raw_Data/MetaPhlAn/Human_Reads/please_combo_human_reads.xls'\nhuman.read <- read.table(human.read.file,sep='\\t',header=TRUE,row.names=1,stringsAsFactors=FALSE)\n```\n\n### Merge PLEASE data and COMBO data. \n```{r merge_please_combo_data, cache=TRUE}\ntaxa.raw <- merge_two_tables(COMBO.raw,PLEASE.raw,\n                             fill.zero = TRUE,rnames = 'union',cnames = 'union')\ncat('samples','taxa',dim(taxa.raw),'\\n')\ntaxa.raw[1:3,1:3]\n```\n\n### Distribution of total non-human reads\n```{r distribution_of_total_non_human_reads,cache=TRUE}\nhist(log10(human.read$NonHumanReads),xlab='log10 non-human reads',\n     main='',breaks=40)\n\nbarplot(log10(human.read$NonHumanReads[order(human.read$NonHumanReads)]),\n        ylab='log10 non-human reads', main='')\n```\n\n### Filter low depth samples\nFilter out low sequencing depth samples.Filter out samples with non-humand reads < 30000.\n```{r filter_low_depth_samples,cache=TRUE}\nlow.depth.samples <- subset(human.read,NonHumanReads<30000)\nlow.depth.samples[,1:5]\n### Delete these samples from PLEASE data.\n### Due to the low sequencing depth, some of the samples have no MetaPhlAn output\n### These are the samples with MetaPhlAn output but also low sequencing\nrownames(taxa.raw)[which(rownames(taxa.raw) %in% rownames(low.depth.samples))]\n### Before deletion\ndim(taxa.raw)\n### After deletion\ntaxa.raw <- taxa.raw[-which(rownames(taxa.raw) %in% rownames(low.depth.samples)),]\ndim(taxa.raw)\n## 5018-03,7001-02,7003-03,6005-04,7011-02,7003-02,7009-03, 7010-03\n```\n\n### Filter low abundant bacterial data\nFilter low abundant bacteria. I'm going to filter out the low abundant species.The species must present in at least 10% of the samples and the max abundance across samples must large than 1%. Renormalize the species abundance so that the sum of the species abundance is 100 (%)\n```{r filter_low_abundant_bacteria, cache=TRUE, fig.width=4,fig.height=4}\nfilter.index1 <- apply(taxa.raw,2,function(X){sum(X>0)>0.1*length(X)})\nfilter.index2 <- apply(taxa.raw,2,function(X){max(X)>1})\ntaxa.filter <- taxa.raw[,filter.index1 & filter.index2]\ntaxa.filter <- 100*sweep(taxa.filter, 1, rowSums(taxa.filter), FUN=\"/\")\ncat('after filter:','samples','taxa',dim(taxa.filter),'\\n')\nhead(rowSums(taxa.filter))\n\n## Did the filtering process change the abundance ?\nplot(taxa.raw[,colnames(taxa.filter)],taxa.filter,\nxlab='before filtering',ylab='after filtering')\n```\n\n\n```{r save_processed_taxa_abundance_data,cache=TRUE}\n### save the processed taxa abundance\nwrite.csv(taxa.filter,file=paste('../1_Data/Processed_Data/MetaPhlAn/',TLevel,'_Processed_MetaPhlAn_Abundance.csv',sep=''))\n\n### Remove s__ before the taxa name\ncolnames(taxa.filter) <- colsplit(colnames(taxa.filter), '__', c('V1','V2'))[,'V2']\n\n####### change the variable name\ntaxa.data <- as.data.frame(taxa.filter)\n```\n\n### Distribution of identified taxa \nCheck the distribution of taxa called in each sample.\n```{r distribution_of_identified_taxa,cache=TRUE, fig.width=4,fig.height=4}\nspecies.count <- apply(taxa.filter,1,function(X)sum(X>0))\nhist(apply(taxa.filter,1,function(X)sum(X>0)),breaks=20,\nmain=paste('Distribution of taxa called'),\nxlab=paste('Number of taxa called in each sample'))\n### What is the smallest number?\nhead(sort(apply(taxa.filter,1,function(X)sum(X>0))))\n\n### Correlation between number of taxa called and sequencing depth\n### total non-human reads\nplot(log10(human.read[names(species.count),'NonHumanReads']),log10(species.count),ylab='log10 Number of taxa',xlab='log10 Non-human reads')\n### total human reads\nplot(log10(human.read[names(species.count),'HumanReads']),log10(species.count),ylab='log10 Number of taxa',xlab='log 10 Human reads')\n```\n\n\n## Load rarefraction data\n```{r load_rarefraction_data,cache=TRUE}\nPLEASE.rare.file <- paste('../1_Data/Raw_Data/Rarefraction_Data/PLEASE_MetaPhlAn/',TLevel,'_Remove_unclassfied_Renormalized_Merge_Rel_MetaPhlAn_Result.xls',sep='')\nPLEASE.rare.raw <- read.table(PLEASE.rare.file,sep='\\t',header=TRUE,row.names = 1,check.names=FALSE,stringsAsFactors=FALSE)\n\nCOMBO.rare.file <- paste('../1_Data/Raw_Data/Rarefraction_Data/COMBO_MetaPhlAn/',TLevel,'_Remove_unclassfied_Renormalized_Merge_Rel_MetaPhlAn_Result.xls',sep='')\nCOMBO.rare.raw <- read.table(COMBO.rare.file,sep='\\t',header=TRUE,row.names = 1,check.names=FALSE,stringsAsFactors=FALSE)\n\n## merge the data\ntaxa.rare.raw <- merge_two_tables(t(COMBO.rare.raw),t(PLEASE.rare.raw),\n                             fill.zero = TRUE,rnames = 'union',cnames = 'union')\n```\n\n## Load phylogenetic tree\nPhylogenetic tree information was downloaded from PhyloPhlAn website.\n```{r load_phylogenetic_tree,cache=TRUE}\n\nget_unique_leaves = function(phylo.tree){\n#phylo.tree\n#str(phylo.tree)\ntaxa.uniq <-unique(phylo.tree$tip.label)\ntree.tmp <- phylo.tree \nfor (taxa in taxa.uniq){\n  if(sum(tree.tmp$tip.label==taxa) > 1){\n    taxa.tip <- tree.tmp$tip.label[tree.tmp$tip.label==taxa]\n    taxa.tip[2:length(taxa.tip)] <- paste(taxa.tip[2:length(taxa.tip)],'drop',sep='.')\n    tree.tmp$tip.label[tree.tmp$tip.label==taxa] <- taxa.tip\n    tree.tmp <-drop.tip(tree.tmp, paste(taxa,'drop',sep='.'))\n    #break\n  }\n}\n#plot(tree.tmp)\n\ntips.to.be.drop <- unique(tree.tmp$tip.label)[\n                    grep('__',unique(tree.tmp$tip.label),invert=TRUE)]\ntree.tmp <-drop.tip(tree.tmp,tips.to.be.drop)\n\n#plot(tree.tmp)\nreturn(tree.tmp)\n}\n\n\n## This is from PhyloPhlAn, the tree has repeated leaves\nphylo.tree <- read.tree(paste(\"../1_Data/Raw_Data/Phlogenetic_tree/\",\n                        TLevel,\"_change_name_bs_tree.reroot.nwk\",sep=''))\n\nphylo.tree.uniq = get_unique_leaves(phylo.tree)\n\n## This is from greengene database\n#phylo.tree <- read_tree_greengenes(\"../1_Data/Raw_Data/Phlogenetic_tree/greengene_12_10_threshold97_otus.tree\")\n\n```\n\n## Load fungi data\n```{r load_fungi_data,cache=TRUE}\n##  The plural of fungus is fungi\n##  Fungal cells\n\n### Kyle gave me only the following fungi data\n#Candida albicans\n#Clavispora lusitaniae (a.k.a. Candida lusitaniae)\n#Cyberlindnera jadinii (a.k.a. Pichia jadinii)\n#Epichloe festucae (grass fungus)\n#Epichloe glyceriae (grass fungus)\n#Grosmannia clavigera (tree fungus)\n#Kluyveromyces marxianus\n#Saccharomyces cerevisiae\n\n### only used the following ones\nfungi <- c(\"Candida albicans\",\"Clavispora lusitaniae\",\"Cyberlindnera jadinii\",\n\"Kluyveromyces marxianus\",\"Saccharomyces cerevisiae\")\n#######################################################################\n######## Fungi RPKM = (read counts /1000000) / (genome length / 1000)\n### RPKM = reads per kilobase per million\n### = [# of mapped reads]/[length of transcript in kilo base]/[million mapped reads]\n### = [# of mapped reads]/([length of transcript]/1000)/([total reads]/10^6)\n\n### Count\nPLEASE.fungi.counts <- read.csv('../1_Data/Raw_Data/Fungi/please_final_fungi_genome_readcounts.csv',stringsAsFactors=FALSE)\nCOMBO.fungi.counts <- read.csv('../1_Data/Raw_Data/Fungi//combo_final_fungi_genome_readcounts.csv',stringsAsFactors=FALSE)\nfungi.counts <- rbind(PLEASE.fungi.counts,COMBO.fungi.counts) %>% \ndplyr::rename(Sample=SampleID) %>%\nfilter(Species %in% fungi)\n\n###### !!!!!!!!!!!!!!!!!!!!\n#### we may need to remove the low depth samples\n#### I did not do it for fungi data\n##### !!!!!!!!!!!!!!!!!!!!!!\n\n### RPKM\nfungi.RPKM <- fungi.counts %>%\nmutate(count.len = NumReads/(GenomeLength/1000)) %>% \ndplyr::select(-GenomeLength,-NumReads) %>% \nleft_join(dplyr::select(add_rownames(human.read,var='Sample'),Sample,NonHumanReads),by=c('Sample')) %>% \nmutate(Abundance=count.len/(NonHumanReads/1000000)) %>%\ndplyr::select(Sample,Species,Abundance) %>% \nspread(Species,Abundance) %>%\nna.omit  %>%\nadd_back_rownames(row.var='Sample')\n\n### Total fungi percentage\nfungi.per <- fungi.counts %>% \ngroup_by(Sample) %>%\nsummarise(total.counts=sum(NumReads,na.rm=T)) %>% \nleft_join(dplyr::select(add_rownames(human.read,var='Sample'),Sample,NonHumanReads),by=c('Sample')) %>% \nmutate(Fungi.Per=100*total.counts/NonHumanReads) %>%\ndplyr::select(Sample,Fungi.Per) %>%\nna.omit() %>%\nadd_back_rownames(row.var='Sample')\n\n```\n\n\n```{r save_processed_fungi_data}\nwrite.csv(fungi.RPKM,file=paste('../1_Data/Processed_Data/Fungi/Processed_Fungi_RPKM.csv',sep=''),row.names=TRUE)\n```\n\n\n## Load gene/pathway/module data\nOnly 22 COMBO samples in the raw data. Four samples (4002,4006,4007,4019) have empty output files.\n```{r load_gene_pathway_module_data,cache=TRUE}\nGenefile <- '../1_Data/Raw_Data/Gene_Pathway/Gene_Abundance_from_02b_mpt.txt'\nGene.raw <- t(read.table(Genefile,sep='\\t',header=T,row.names = 1,check.names=F,stringsAsFactors = FALSE))\n## Remove all 'hypothetical_protein'\n## They all have the same names\nGene.raw <- Gene.raw[,grep('hypothetical_protein',colnames(Gene.raw),invert = TRUE)]\n## Remove NA colnames\nGene.raw <- Gene.raw[,grep('__NA$',colnames(Gene.raw),invert = TRUE)]\n## Remove low depth samples\nGene.raw <- Gene.raw[-which(rownames(Gene.raw) %in% rownames(low.depth.samples)),]\n###\nGene.raw[1:3,1:3]\ndim(Gene.raw)\n\n\nPathwayfile <- '../1_Data/Raw_Data/Gene_Pathway/Pathway_Abundance_from_04b_mpt.txt'\nPathway.raw <- t(as.matrix(read.table(Pathwayfile,sep='\\t',header=T,row.names = 1,check.names=F,stringsAsFactors = FALSE)))\n## Remove NA colnames\nPathway.raw <- Pathway.raw[,grep('__NA$',colnames(Pathway.raw),invert = TRUE)]\n## Remove low depth samples\nPathway.raw <- Pathway.raw[-which(rownames(Pathway.raw) %in% rownames(low.depth.samples)),]\n###\nPathway.raw[1:3,1:3]\ndim(Pathway.raw)\n\n\nModulefile <- '../1_Data/Raw_Data/Gene_Pathway/Module_Abundance_from_04b_mpt.txt'\nModule.raw <- t(as.matrix(read.table(Modulefile,sep='\\t',header=T,row.names = 1,check.names=F,stringsAsFactors = FALSE)))\n## Remove NA colnames\nModule.raw <- Module.raw[,grep('__NA$',colnames(Module.raw),invert = TRUE)]\n## Remove duplicated entries\n## Module.raw <- Module.raw[,grep('Putative_ABC_transport_system',colnames(Module.raw),invert = TRUE)]\n## Module.raw <- Module.raw[,grep('Manganeseiron_transport_system',colnames(Module.raw),invert = TRUE)]\n## Remove low depth samples\nModule.raw <- Module.raw[-which(rownames(Module.raw) %in% rownames(low.depth.samples)),]\n###\nModule.raw[1:3,1:3]\ndim(Module.raw)\n\n\nG2Pfile <- '../1_Data/Raw_Data/Gene_Pathway/GID2Pathway.txt'\nG2P <- (read.table(G2Pfile,sep='\\t',header=F,check.names=F,stringsAsFactors = FALSE))\n```\n\n### Filter gene/pathway/module data\n```{r filter_gene_pathway_module_data,cache=TRUE}\n#apply(Gene.raw,2,max)\nfindx1 <- apply(Gene.raw,2,function(X){sum(X>0) > 10})\nfindx2 <- apply(Gene.raw,2,function(X){max(X) > 0.1})\ngene.data <- Gene.raw[,findx1&findx2]\ngene.data <- 100*sweep(gene.data, 1, rowSums(gene.data), FUN=\"/\")\nrowSums(gene.data)[1:3]\ndim(gene.data)\n\n## renomalize to 100%?\nfindx1 <- apply(Pathway.raw,2,function(X){sum(X>0) > 10})\nfindx2 <- apply(Pathway.raw,2,function(X){max(X) > 0.1})\npathway.data <- Pathway.raw[,findx1&findx2]\npathway.data <- 100*sweep(pathway.data, 1, rowSums(pathway.data), FUN=\"/\")\nrowSums(pathway.data)[1:3]\ndim(pathway.data)\n\nmodule.data <- Module.raw\n```\n\n**************************************\n## Load metabolite data and preprocess\n**************************************\n\n### Load metabolite data\n```{r load_metabilte_data,cache=TRUE}\nmodify_header = function(dat){\n  ### PLEASE samples: \"PLEASE_D.5027_01\" \n  ### COMBO samples: \"PLEASE_C.4010_01\" \n  ### remove the letters and change '_' to '-'\n  colnames(dat) <- gsub('PLEASE_D\\\\.','',colnames(dat))\n  norm.ind <- grep('PLEASE_C',colnames(dat))\n  colnames(dat)[norm.ind] <- gsub('PLEASE_C\\\\.','',colnames(dat)[norm.ind])\n  colnames(dat)[norm.ind] <- gsub('_01','',colnames(dat)[norm.ind])\n  colnames(dat) <- gsub('D\\\\.','',colnames(dat))\n  norm.ind <- grep('C\\\\.',colnames(dat))\n  colnames(dat)[norm.ind] <- gsub('C\\\\.','',colnames(dat)[norm.ind])\n  colnames(dat)[norm.ind] <- gsub('_01','',colnames(dat)[norm.ind])\n  colnames(dat) <- gsub('_','-',colnames(dat))\n  return(dat)\n}\n\n####################################\n#### need to change the sample name \n#### so that they can match with those in taxa analysis\nmdata1 <- read.csv('../1_Data/Raw_Data/Metabolite/14_1223_C8-pos_raw_PLEASE.csv',skip = 1,header=T,stringsAsFactors=F,na.strings = \"\")\nmdata1 <- modify_header(mdata1)\nmdata2 <- read.csv('../1_Data/Raw_Data/Metabolite/14_1223_C18-neg_raw_PLEASE.csv',skip = 1,header=T,stringsAsFactors=F,na.strings = \"\")\nmdata2 <- modify_header(mdata2)\nmdata3 <- read.csv('../1_Data/Raw_Data/Metabolite/14_1223_HILIC-pos_raw_PLEASE.csv',skip = 1,header=T,stringsAsFactors=F,na.strings = \"\")\nmdata3 <- modify_header(mdata3)\nmdata4 <- read.csv('../1_Data/Raw_Data/Metabolite/15_0130_PLEASE_stool_HILIC-neg_CMH_PLEASE.csv',skip = 1,header=T,stringsAsFactors=F,na.strings = \"NA\")\nmdata4 <- modify_header(mdata4)\n############################################\n##### check the data\ncat(\"metabolites\",\"samples\",dim(mdata1),'\\n')\ncat(\"metabolites\",\"samples\",dim(mdata2),'\\n')\ncat(\"metabolites\",\"samples\",dim(mdata3),'\\n')\ncat(\"metabolites\",\"samples\",dim(mdata4),'\\n')\nhead(mdata1[1:3,1:10])\nhead(mdata2[1:3,1:10])\nhead(mdata3[1:3,1:10])\nhead(mdata4[1:3,1:10])\n#### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ####\n#### dataset 4 has different headers than the other datasets\n#### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ####\n```\n\n\n```{r save_metabolite_information,cache=TRUE}\n### save the metabolite infomration\n### 1-6 columns are the metabolite information\n### may use such information in the later analysis\nminfo1 <- mdata1[,1:6]\nminfo2 <- mdata2[,1:6]\nminfo3 <- mdata3[,1:6]\nminfo4 <- mdata4[,1:6]\n### minfo4 has different colnames than the other three\ncolnames(minfo4) <- colnames(minfo1)\n### Combine the four dataframes into one \n### metabolite annotation information\nminfo <- rbind(minfo1,minfo2,minfo3,minfo4)\nminfo <- minfo[!duplicated(minfo),]\nrownames(minfo) <- gsub(' ','.', paste(minfo[,'Method'],minfo[,'Compound'],\n                         minfo[,'HMDB.ID'],minfo[,'Metabolite'],sep='_'))\n  \nrm(minfo1)\nrm(minfo2)\nrm(minfo3)\nrm(minfo4)\n```\n\n\n\n```{r normalize_metabolome_data,cache=TRUE}\nnormalize_data = function(mdata){\n  ##### mdata <- mdata3\n  \n  #### duplicated metablites, keep the first one\n  #### duplicated() returns all except first duplicated elements\n  mdata <- mdata[!duplicated(mdata[,'Compound']),]\n  \n  #### remove the metabolite information column 1-6\n  #### use Compund information as the rownames of the data matrix\n  #### Note: the current version of R allows the same row names\n  dat <- as.matrix(mdata[,-c(1:6)])\n  rownames(dat) <- gsub(' ','.', paste(mdata[,'Method'],mdata[,'Compound'],\n                         mdata[,'HMDB.ID'],mdata[,'Metabolite'],sep='_'))\n  \n  #### remove metabolites with all NAs & all zeros\n  dat <- dat[rowSums(dat,na.rm=T)>0,]\n  #### remove metabolites with too many missing values or zeros.\n  #### can not use strigent cutoff, all samples except some \n  #### small treatment group many have zeros.\n  dat <- dat[apply(dat,1,function(X){sum(is.na(X)|(X==0))<0.8*length(X)}),]\n  \n  #### The distribution of NAs and zeros in each metabolites\n  hist(apply(dat,1,function(X){sum(is.na(X) | (X==0))}),\n       breaks=100,xlab='No. of NAs and zeros',ylab='No. of metabolites',\n       main = 'Distribution of NA and zero')\n  \n  #### impute with min value\n  #### consider 0 as NA\n  #### some problems when using apply \n  dat.imp <- dat\n  for (i in 1:nrow(dat.imp)){\n    X <- dat.imp[i,]\n    #if (is.infinite(min(X,na.rm=T))){print(i)}\n    X[X==0] <- NA\n    X[is.na(X)]<-min(X,na.rm=T)\n    dat.imp[i,] <- X\n  }\n  \n  #### remove outliers\n  #### do not remove outliers here, let the downstream analysis handle this\n  #### but be careful in the normalization step\n  \n  #### remove control samples such as \"XPF.29\"\n  dat.imp <- dat.imp[,grep('\\\\.',colnames(dat.imp),invert=TRUE)]\n  \n  #### normalize the data: normalize by sample, use 80% quantile cumlative sum\n  dat.nor <- sweep(dat.imp,2,apply(dat.imp,2,function(X){sum(X[X<quantile(X,0.8)])}),FUN='/')\n  #### take the log and make the data non-negative\n  dat.nor <- log10(dat.nor)+10\n  \n  ########## check the normalization\n  ### boxplot\n  boxplot(log10(dat.imp),outpch='.',\n          ylab='log10 abundance',xlab='samples',main='before normalization')\n  boxplot(dat.nor,outpch='.',\n          ylab='normalized abundance',xlab='samples',main='after normalization')\n  ### Correlation\n  ran.ind <- sample(1:(nrow(dat.imp)*ncol(dat.imp)),10000)\n  plot(log10(dat.imp)[ran.ind],dat.nor[ran.ind],pch=20,xlab='before normalization (log10)',ylab='after normlization (log10)',main='')\n  mtext(paste('cor=',signif(cor(as.vector(log10(dat.imp)),as.vector(dat.nor)),4)))\n  \n  \n  return(dat.nor)\n}  \nmdata1.nor <- normalize_data(mdata1)\nmdata2.nor <- normalize_data(mdata2)\nmdata3.nor <- normalize_data(mdata3)\nmdata4.nor <- normalize_data(mdata4)\n\n### something wierd about the last several samples in mdata4\n### they are the samples with X.xxx\n\ndim(mdata1)\ndim(mdata1.nor)\ndim(mdata2)\ndim(mdata2.nor)\ndim(mdata3)\ndim(mdata3.nor)\ndim(mdata4)\ndim(mdata4.nor)\n```\n\n\n\n```{r merge_all_datasets,cache=TRUE}\nsnames <- intersect(intersect(intersect(colnames(mdata1.nor),colnames(mdata2.nor)),colnames(mdata3.nor)),colnames(mdata4.nor))\nmdata.nor <- rbind(mdata1.nor[,snames],mdata2.nor[,snames],\n                   mdata3.nor[,snames],mdata4.nor[,snames])\ndim(mdata.nor)\nmdata.nor[1:5,1:5]\n\n## all metabolites\n### rows:samples  columns:metabolites\nallmdata.nor <- t(mdata.nor)\n\n## km: known metabolite\n## remove any metabolites with NA in the name\n## this will also remove QI***** metabolites, it has no HMDB ID but metabolite name\nkmdata.nor <- t(mdata.nor[grep('_NA',rownames(mdata.nor),invert=TRUE),])\n## change the metabolite names\ncolnames(kmdata.nor) <- minfo[colnames(kmdata.nor),'Metabolite']\nkmdata.nor[1:5,1:5]\n\n##############################\n### save the normalized metabolite abundance\nwrite.csv(t(allmdata.nor),file='../1_Data/Processed_Data/Metabolite/All_Metabolite_Normalized_Abundance.csv',row.names=TRUE)\nwrite.csv(t(kmdata.nor),file='../1_Data/Processed_Data/Metabolite/Known_Metabolite_Normalized_Abundance.csv',row.names=TRUE)\n\nrm(snames)\n```\n\n\n```{r load_hmdb_kegg_mapping,cache=TRUE}\n### Error with read.table\n### Try RStudi import and get the following code\nhmdb.info <- read.delim(\"../1_Data/Raw_Data/HMDB/hmdb_3.6.txt\", quote=\"\", stringsAsFactors=FALSE,na.strings = \"\")\nhead(hmdb.info)\ndim(hmdb.info)\n\n### merge into minfo by HMDB ID\nminfo <- \n  minfo %>% add_rownames(var = \"MID\") %>%\n  left_join(hmdb.info,by= c(\"HMDB.ID\"=\"HMDB\")) %>% \n  add_back_rownames(row.var = 'MID')\nminfo[1:3,]\n```\n\n```{r load_84_metabolites,cache=TRUE}\nm84id <- read.csv('../1_Data/Raw_Data/Metabolite/20150730_84_metabolites_v2.csv',header=T,stringsAsFactors=F,na.strings = \"\")\nhead(m84id)\n\n### KEGG has duplicated IDs in  minfo\n### one KEGG ID mapps to multiple HMDB IDs\nm84data.nor <- t(mdata.nor[rownames(minfo[minfo$CO %in% m84id$KEGGNumber,]),])\n\n\n## The following metabolites are not present in our metabolome data\n## C00003\tNAD+\tInhibitory  HMDB00902 ## Not found\n## C00008\tADP\tInhibitory\n## C00010\tCoA\tInhibitory\n## C00015\tUDP\tEnhance\n## C00016\tFAD\tInhibitory\n## C00019\tS-Adenosyl-L-methionine\tInhibitory\n## C00020\tAMP\tEnhance\n## C00024\tAcetyl-CoA\tInhibitory\n```\n\n## Load clinical outcome information \n```{r load_clinical_information,cache=TRUE}\n#### Treatment, FCP, Response\noutcome.file <- '../1_Data/Raw_Data/Clinical_Information/Final_Outcome_Table_ReFormat_08_11_2014.xls'\noutcome <- read.table(outcome.file,sep='\\t',header=T,row.names = 1,check.names=F,stringsAsFactors=FALSE)\n\n##############\nBaseline.raw <- read.table('../1_Data/Raw_Data/Clinical_Information/PLEASE-BASELINE.txt',sep='\\t',header=T,na.strings = \"NULL\",stringsAsFactors=FALSE,colClasses = c( \"character\" ))\nBaseline <- Baseline.raw[,c('Pid','Bas12','Bas12a1e','Bas12a2e', 'Bas12a3e','Bas12a4e','Bas18','Bas19','Bas13','Bas14','Bas15','Bas16')]\nrownames(Baseline) <-  Baseline.raw[,'Pid']\n\n#############\nDISACT.raw <- read.table('../1_Data/Raw_Data/Clinical_Information/PLEASE-DISACT-modified.txt', sep='\\t',header=T,na.strings = \"NULL\",stringsAsFactors=FALSE,colClasses = c( \"character\" ))\n## Pid,Vnum,Vdate,pcdai\nDISACT <- DISACT.raw[,c('Pid','Vnum','Vdate','pcdai',\n'AbdominalPain','Bleeding',\n'StoolConsistency','Frequency',\n'NocturnalBMs','Activity',\n'heigthscore')]\nrownames(DISACT) <- paste(DISACT.raw[,'Pid'],'-0',as.numeric(DISACT.raw[,'Vnum'])+1,sep='')\n\n##########\nAnatomy.raw <- read.table('../1_Data/Raw_Data/Clinical_Information/Anatomic_Distribution_Descriptive_data_for_Eric.txt',sep='\\t',header=T,na.strings = \"NULL\",stringsAsFactors=FALSE,colClasses = c( \"character\" ))\nAnatomy <- Anatomy.raw[,c('duration','esophagus','stomach',\n'duod','jejun','ileum',\n'cecum','colon','rectum','colorectal','upper',\n'current_perianal','penetrating','stricturing')]\nrownames(Anatomy) = Anatomy.raw[,'pid']\n\n###########\nantibio.raw <- read.table('../1_Data/Raw_Data/Clinical_Information/antibiotics_use_at_each_vist.txt',sep='\\t',header=T,stringsAsFactors = FALSE)\nrownames(antibio.raw) <- paste(antibio.raw[,1],'-0',antibio.raw[,2]+1,sep='')\n```\n\n### Merge outcome tables\n```{r merge_all_sample_information, cache=TRUE,eval=TRUE}\n### Creat a sample.info matrix to store all the sample information.\nsample.info <- outcome %>% add_rownames(var = \"Subject\") %>%\ndplyr::select(-(Plate:DiffStopStart),-StopReason,-(PUCAIResponse:FCP50),-(FCPGreaterRedution:MergedResponse)) %>% \ngather(Measure,Value,BristolScore_1:FCP_4) %>%\nseparate(col=Measure,into=c(\"Measure\", \"Time\"),sep='_' ) %>%\nspread(Measure,Value) %>%\n## log FCP\nmutate(log.FCP = log(FCP)) %>%\n## sample name\nunite(col=Sample,Subject,Time,sep = '-0',remove=FALSE) %>%\n## Group\nmutate(Group='PLEASE') %>%\n## Response (same as FCPReponse, but re-code it)\nmutate(Response=ifelse(FCPResponse==1,'Response','Non.Response')) %>%\n## Type\nunite(col=Type,Group,Time,sep='-T',remove=FALSE) %>%\n## Antibiotics at each visit\nleft_join(dplyr::select(add_rownames(antibio.raw,var='Sample'),Sample,fcpabx7),by='Sample') %>%\nmutate(Antibiotics.visit=ifelse(fcpabx7==1,'Use','Not.Use')) %>%\ndplyr::select(-fcpabx7) %>%\n##Baseline use of systemic or rectally administered steroids \n##from baseline form these are variables bas18 and bas19\n##If either have value 1 then patient was using steroids at baseline\nleft_join(dplyr::select(Baseline,Pid,Bas18,Bas19),by=c('Subject'='Pid')) %>%\nmutate(Steroids=ifelse(Bas18 ==1 | Bas19 == 1,'Use','Not.Use')) %>%\ndplyr::select(-Bas18,-Bas19) %>% \n### EEN PEN\nmutate(Treatment.Specific=ifelse(Treatment=='antiTNF','antiTNF',\nifelse(as.numeric(Subject)>=5000 & as.numeric(Subject)<6000,'PEN','EEN'))) %>%\n### COMBO \nfull_join(data.frame(Sample=rownames(COMBO.raw),\nSubject=rownames(COMBO.raw),\nGroup = 'COMBO',\nType  = 'COMBO',\nAntibiotics.visit='Not.Use'),\nby = c('Subject','Sample','Group','Type','Antibiotics.visit')) %>%\nmutate(Disease=ifelse(Group=='COMBO','Control','Crohn')) %>%\n## Human DNA percentage\nleft_join(dplyr::select(add_rownames(human.read,var='Sample'),Sample,NonHumanReads,Human.Per=HumanPer),by=c('Sample')) %>%\n### fungi percentage\nleft_join(add_rownames(fungi.per,var='Sample'),by=c('Sample')) %>%\n### \narrange(Subject,Time)  %>% \n###\nadd_back_rownames(row.var='Sample')\n\n####\nhead(sample.info,n=5)\n\n#df1 %>% inner_join(df2) %>% knitr::kable()\n```\n\n```{r for_publication_supple_table1,eval=FALSE,include=FALSE}\nsupple.table1 <- add_rownames(sample.info,var='Sample') %>%\nleft_join(add_rownames(human.read,var='Sample'),by=c('Sample')) %>%\ndplyr::select(Subject,Sample,Time,Treatment.Specific, FCP, Antibiotics.visit,Steroids,TotalReads, Human.Per, Fungi.Per )\n#add_back_rownames(row.var='Sample')\n##############################\n### save the sample information\nwrite.csv(supple.table1,file='../3_Result/Suppl_Table1_Sample_Information.csv',row.names=FALSE)\n```\n\n\n\n\n### Correlation of FCP and PCDAI\nFirst, take a look at the correlation between FCP and PCDAI\n```{r correlation_of_FCP_and_PCDAI,cache=TRUE}\nFCP.PCDAI.cor <- cor(outcome[,c('FCP_1','FCP_2','FCP_3','FCP_4','PCDAI_1','PCDAI_4')],use=\"pairwise.complete.obs\",method=\"spearman\")\nFCP.PCDAI.cor\nggplot(melt(FCP.PCDAI.cor), aes(x=Var1, y=Var2, fill=value, label=round(value, 2))) + scale_fill_gradient(low=\"#FEE0D2\", high=\"#FB6A4A\") + geom_tile() + geom_text()+xlab(\"\")+ylab(\"\")\n```\n\n### FCP change across time\nHow FCP changed across different time points?\n```{r FCP_change_arocss_time,cache=TRUE}\np <- outcome[,c('Treatment','FCPResponse','FCP_1','FCP_2','FCP_3','FCP_4')] %>%\ngather(Time,FCP,FCP_1:FCP_4) %>%\nmutate(FCPResponse=ifelse(FCPResponse==1,'Response','Non-Response')) %>%\nna.omit %>%\nggplot(aes(y=FCP,x=Time))+geom_boxplot()+\nxlab('')+ylab('FCP')+ labs(title='')+\nfacet_grid(Treatment ~ FCPResponse, margins=TRUE)\nprint(p)\n```\n\n### PCDAI change across time\nHow PCDAI changed across different time points?\n```{r PCDAI_Change_Arocss_Time,cache=TRUE}\np <- outcome[,c('Treatment','PCDAIResponse','PCDAI_1','PCDAI_4')] %>%\ngather(Time,PCDAI,PCDAI_1:PCDAI_4) %>%\nmutate(PCDAIResponse=ifelse(PCDAIResponse==1,'Response','Non-Response')) %>%\nna.omit %>%\nggplot(aes(y=PCDAI,x=Time))+geom_boxplot()+\nxlab('')+ylab('PCDAI')+ labs(title='')+\nfacet_grid(Treatment ~ PCDAIResponse, margins=TRUE)\nprint(p)\n```\n\n### Response rate by treatment\nThen, create a table for FCP and PCDAI response\n```{r response_rate_by_treatment_table,cache=TRUE}\ntable(outcome[,c('Treatment'),drop=F],useNA='always') \ntable(subset(sample.info,Time==1,select=Treatment.Specific),useNA='always') \ntable(outcome[,c('FCPResponse','PCDAIResponse')],useNA='always') %>% kable(format='markdown')\ntable(outcome[,c('Treatment','FCPResponse')],useNA='always')  %>% kable(format='markdown')\ntable(outcome[,c('Treatment','PCDAIResponse')],useNA='always') %>% kable(format='markdown') \n```\n\n\n************************************************************\n************************************************************\n# Analyze bacterial data\n********************\n\n## Normal vs. crohn-T1\n```{r bacteria_normal_vs_crohn_t1}\n### I don't use dplyr filter \n### because it will remove the row names\nbact.cp1 <- subset_data_by_sample_info(taxa.data,sample.info,\n                                       Type=='COMBO' | Type=='PLEASE-T1')\n```\n\n### Calculate distance\n```{r bacteria_calculate_distance,cache=TRUE}\nbact.dist <- calculate_distance(X = taxa.data, method = bacteral.distance.method, tree = NA)\n```\n\n```{r bacteria_calculate_distance_cp1,cache=TRUE}\nbact.dist.cp1 <- calculate_distance(X = bact.cp1, method = bacteral.distance.method, tree = NA)\n```\n\n### Find the best clustering\n```{r bacteria_find_the_best_clustering,cache=TRUE}\npamk.best <- find_best_clustering(bact.dist.cp1,plot.results=TRUE)\n```\n\n\n### Find the best clustering (numerical jaccard)\n```{r bacteria_find_the_best_clustering_numerical_jaccard,cache=TRUE}\n### Hongzhe has some concerns about the two cluster result based on the binary jaccard distance\n### Here, use numerical jaccard distance to repeat the same analysis\npamk.best.numerical <- find_best_clustering(calculate_distance(X = bact.cp1, method = \"Numerical_Jaccard\", tree = NA),\n                     plot.results=TRUE)\n```\n\n\n```{r update_cluster_info_and_save_sample_informaion,cache=TRUE}\n### rename does not work\nclustering.res <- as.data.frame(pamk.best$pamobject$clustering)\ncolnames(clustering.res) <- 'Cluster'\n### add clustering result to sample information\n### only T1 samples are in the clustering result\nsample.info <- \n  add_rownames(clustering.res,var='Sample') %>%\n  separate(col=Sample,into=c(\"Subject\", \"Time\"),sep='-',extra='drop' ) %>%\n  dplyr::select(Subject,Cluster) %>%\n  right_join(add_rownames(sample.info,var='Sample'),by = c('Subject')) %>% #head  \n  mutate(Cluster=ifelse(Cluster==1,'cluster 1','cluster 2')) %>% #head\n  add_back_rownames(row.var='Sample') \n\n\n##############################\n### save the sample information\nwrite.csv(sample.info,file=paste('../1_Data/Processed_Data/Sample_Information/2015_02_13_Processed_Sample_Information.csv',sep=''),row.names=TRUE)\n```\n\n\n### MDS analysis\n```{r bacteria_MDS,cache=TRUE,results='hide'}\n### MDS\nset.seed(10)\nmeta.MDS <- metaMDS(bact.dist.cp1)\n\n### Normal/Disease\np <- add_rownames(as.data.frame(meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ geom_point(aes(colour = Disease)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  labs(title = 'metaMDS') \nprint(p)\n\n### Normal/Disease, cluster\np <- add_rownames(as.data.frame(meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ geom_point(aes(colour = Disease,shape=Cluster)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,4),name=\"\") +\n  labs(title = 'metaMDS') \nprint(p)\n\n#### Fugal percentage \np <- add_rownames(as.data.frame(meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster,Fungi.Per),\n            by='Sample') %>% \n  mutate(Fungi.Per.sqrt=sqrt(Fungi.Per)) %>%\n  ggplot(aes(x=MDS1,y=MDS2))+ \n  geom_point(aes(colour = Disease,shape=Cluster,size = Fungi.Per.sqrt)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  scale_size_area()+\n  labs(title = 'metaMDS') \nprint(p)\n\n\n#### Human DNA percentage\np <- add_rownames(as.data.frame(meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster,Human.Per),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ \n  geom_point(aes(colour = Disease,shape=Cluster,size = Human.Per)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  scale_size_area()+\n  labs(title = 'metaMDS') \nprint(p)\n\n#### Human DNA percentage (for publication)\np <- add_rownames(as.data.frame(meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster,Human.Per),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ \n  geom_point(aes(colour = Cluster,shape= Disease,size = Human.Per)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  #scale_size_area(range = c(1, 10))+\n  scale_size_continuous(range = c(3, 10)) +\n  labs(title = 'Ordination bacterial taxa') +\n  ##########################\n  theme_classic()\nprint(p)\n\n### Figure for Rick\n### we start with the same MDS as in 1B, but don't show human DNA or near and far cluster.  Control is shown as the filled circle, Crohn's as open circles.  Current antibiotic use is shown by blue versus red coloring.  If not too hard, maybe also plot the centroid of the healties as a large yellow triangle.\np <- add_rownames(as.data.frame(meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Antibiotics.visit),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ \n  geom_point(aes(colour = Antibiotics.visit,shape= Disease),size=3) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  #scale_size_area(range = c(1, 10))+\n  #scale_size_continuous(range = c(3, 10)) +\n  labs(title = 'Ordination bacterial taxa') +\n  ##########################\n  theme_classic()\nprint(p)\n\n\n#### Fugal percentage and Human DNA percentage\np <- add_rownames(as.data.frame(meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster,Human.Per,Fungi.Per),\n            by='Sample') %>% \n  mutate(Fungi.Per.sqrt=sqrt(Fungi.Per)) %>%\n  ggplot(aes(x=MDS1,y=MDS2,colour=Human.Per,shape=Cluster))+ \n  geom_point(aes(size = Fungi.Per.sqrt)) + scale_size_area()+\n  scale_colour_gradient(low = \"#43a2ca\",high=\"#de2d26\")+ \n  scale_shape_manual(values=c(20,1),name=\"\") + labs(title = 'metaMDS')\nprint(p)\n\n### switch human and fungi \np <- add_rownames(as.data.frame(meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster,Human.Per,Fungi.Per),\n            by='Sample') %>% \n  mutate(Fungi.Per.sqrt=sqrt(Fungi.Per)) %>%\n  ggplot(aes(x=MDS1,y=MDS2,colour=Fungi.Per.sqrt,shape=Cluster))+ \n  geom_point(aes(size = Human.Per)) + scale_size_area()+\n  scale_colour_gradient(low = \"#43a2ca\",high=\"#de2d26\")+ \n  scale_shape_manual(values=c(20,1),name=\"\") + labs(title = 'metaMDS')\nprint(p)\n```\n\n### PERMANOVA of response vs. non-response at T1\n```{r bacteria_permanova_of_r_vs_nr_t1,cache=TRUE}\n## R vs. NR\ncov.mat <- subset(sample.info,Type=='PLEASE-T1',select=Response)\nPERMANOVA_analysis(dist.mat=bact.dist.cp1,cov.mat=cov.mat)\n\n## R vs. NR, antiTNF\ncov.mat <- subset(sample.info,Type=='PLEASE-T1' & Treatment=='antiTNF',select=Response)\nPERMANOVA_analysis(dist.mat=bact.dist.cp1,cov.mat=cov.mat)\n\n## R vs. NR, Diet\ncov.mat <- subset(sample.info,Type=='PLEASE-T1' & Treatment=='Diet',select=Response)\nPERMANOVA_analysis(dist.mat=bact.dist.cp1,cov.mat=cov.mat)\n\n## R vs. NR, PEN\ncov.mat <- subset(sample.info,Type=='PLEASE-T1' & Treatment.Specific=='PEN',select=Response)\nPERMANOVA_analysis(dist.mat=bact.dist.cp1,cov.mat=cov.mat)\n\n## R vs. NR, EEN\ncov.mat <- subset(sample.info,Type=='PLEASE-T1' & Treatment.Specific=='EEN',select=Response)\nPERMANOVA_analysis(dist.mat=bact.dist.cp1,cov.mat=cov.mat)\n```\n\n\n### Wilcoxon rank test of normal vs. Crohn\n```{r bacteria_rank_test_of_normal_vs_crohn,cache=TRUE}\n### only plot the top 5 significant ones\nbact.cp1.wil <- wilcox_test(bact.cp1,sample.info[,'Disease',drop=FALSE],\n                            plot.heatmap=FALSE,boxplot.top=0.05,boxplot.y='Abundance(%)')\n###\nwrite.csv(bact.cp1.wil,file=paste('../3_Result/2015_03_05_Bacteria_COMBO_vs_PLEASET1_Wilcox.csv',sep=''),row.names=TRUE)\n```\n\n### Wilcoxon rank test of normal vs. Crohn without antibiotics use\n```{r bacteria_rank_test_of_normal_vs_crohn_without_antibiotics_use,cache=TRUE}\n### only plot the top 5 significant ones\nbact.cp1.noabx.wil <- wilcox_test(bact.cp1,\n              subset(sample.info,Antibiotics.visit=='Not.Use',select=Disease),\n              plot.heatmap=FALSE,boxplot.top=0.05,boxplot.y='Abundance(%)')\n###\nwrite.csv(bact.cp1.noabx.wil,file=paste('../3_Result/2015_03_05_Bacteria_COMBO_vs_PLEASET1_No_Abx_Wilcox.csv',sep=''),row.names=TRUE)\n```\n\n\n### Heatmap of clustering results\n```{r bacteria_heatmap_all_taxa,cache=TRUE,fig.width=8,fig.height=8}\nbk <- unique(c(\n        0,\n        min(min(taxa.data[taxa.data>0])/2,0.1),\n        seq(min(min(taxa.data[taxa.data>0])/2,1),0.1,length=10),\n        seq(0.1,1,length=10),\n        seq(1,5,length=10),\n        seq(5,20,length=20),\n        seq(20,50,length=20),\n        seq(50,100,length=20)\n        ))\nhmcols<- colorRampPalette(c('white','#1f78b4','#ff7f00','#e41a1c'))(length(bk)-1)\n###############\n#bk = unique(c(seq(0,5, length=100),seq(5,10,length=100),seq(10,100,length=100)))\n#hmcols<- colorRampPalette(c(\"white\",\"firebrick3\",\"yellow\"))(length(bk)-1) \n\n##########\n### the color lables must be columns,so I have to transform the data\npheatmap(t(bact.cp1),border_color=\"grey60\",\n         clustering_distance_rows = 'correlation',\n         clustering_distance_cols = bact.dist.cp1,\n         clustering_method = \"complete\",\n         annotation=sample.info[,c(\"Disease\",\"Cluster\",\"Treatment.Specific\",\"FCP\",\"Response\",\"Antibiotics.visit\",\"Steroids\")],\n         color =hmcols, breaks=bk,\n         show_rownames = TRUE,\n         scale=\"none\")\n```\n\n\n\n```{r bacteria_heatmap_manually_order_samples,cache=TRUE,fig.width=8,fig.height=8}\n#### manually re-order the samples\ndata.heat <- \n  add_rownames(bact.cp1,var='Sample') %>%\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \n  arrange(Disease,Cluster,Response,Treatment.Specific) %>%\n  dplyr::select( 1:(ncol(bact.cp1)+1) ) %>% ## first column is the sample name\n  add_back_rownames(row.var='Sample')\n\nbk <- unique(c(\n        0,\n        min(min(taxa.data[taxa.data>0])/2,0.1),\n        seq(min(min(taxa.data[taxa.data>0])/2,1),0.1,length=10),\n        seq(0.1,1,length=10),\n        seq(1,5,length=10),\n        seq(5,20,length=20),\n        seq(20,50,length=20),\n        seq(50,100,length=20)\n        ))\nhmcols<- colorRampPalette(c('white','#1f78b4','#ff7f00','#e41a1c'))(length(bk)-1)\n\n#### sometimes got an error about \"factor does not match color\"\n#### try to install the newest pheatmap from GitHub\npheatmap(t(data.heat),border_color=\"grey60\",\n         cluster_cols = FALSE,\n         clustering_distance_rows = 'correlation',\n         #clustering_distance_cols = bact.dist.cp1,\n         clustering_method = \"complete\",\n         annotation=sample.info[,c(\"Disease\",\"Cluster\",\"Response\",\"Treatment.Specific\",\"FCP\",\"Antibiotics.visit\",\"Steroids\")],\n         color =hmcols, breaks=bk,\n         show_rownames = TRUE,\n         scale=\"none\")\n\nrm(data.heat)\n```\n\n\n\n```{r bacteria_heatmap_significant_taxa,cache=TRUE,fig.width=8,fig.height=8}\n##### In the previous analysis, I plotted the heatmap for those significant taxa\n##### The distance used for sample clustering was based on all taxa\n##### the distance needs to be re-calcualte with those significant taxa only\n```\n\n\n### Random Forest \n```{r bacteria_random_forest_of_normal_vs_crohn,cache=TRUE}\nrandom_forest(bact.cp1,sample.info[,'Disease',drop=FALSE],\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Normal vs. Crohn\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n```\n\n\n## Antibiotics use\n\n### Wilcoxon rank test \n```{r bacteria_rank_test_of_antibiotics_use,cache=TRUE}\n### plot all the significant ones\nbact.antibio.wil <- wilcox_test(bact.cp1,\n                    subset(sample.info,Group=='PLEASE',select=Antibiotics.visit),\n                             plot.heatmap=FALSE,boxplot.top=0.05,boxplot.y='Abundance(%)')      \n###\nwrite.csv(bact.antibio.wil,file=paste('../3_Result/2015_03_05_Bacteria_PLEASE_Antibiotics_Use_Wilcox.csv',sep=''),row.names=TRUE)\n\n```\n\n### Random Forest \n```{r bacteria_random_forest_of_antibiotics_use,cache=TRUE}\nrandom_forest(bact.cp1,\n              subset(sample.info,Group=='PLEASE',select=Antibiotics.visit),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Antibiotics use\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n```\n\n\n\n## Cluster 1 vs. cluster 2\n\n### Wilcoxon rank test \n```{r bacteria_rank_test_of_cluster_1_vs_2,cache=TRUE}\n### plot all the significant ones\nbact.c1c2.wil <- wilcox_test(bact.cp1,\n                             subset(sample.info,Group=='PLEASE',select=Cluster),\n                             plot.heatmap=FALSE,boxplot.top=0.05,boxplot.y='Abundance(%)')      \n###\nwrite.csv(bact.c1c2.wil,file=paste('../3_Result/2015_03_05_Bacteria_PLEASE_Cluster_1_2_Wilcox.csv',sep=''),row.names=TRUE)\n```\n\n### Random Forest \n```{r bacteria_random_forest_of_cluster_1_vs_2,cache=TRUE}\nrandom_forest(bact.cp1,subset(sample.info,Group=='PLEASE',select=Cluster),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Cluster 1 vs. Cluster 2\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n```\n\n\n### Heatmap: normal vs. disease and cluster 1 vs. 2 (new label)\n```{r bacteria_heatmap_normal_vs_disease_and_cluster_1_vs_2,cache=TRUE,fig.width=8,fig.height=8}\n\nbact.cp1.heat <- add_rownames(as.data.frame(bact.cp1.wil),var='Taxa') %>%\n  left_join(add_rownames(as.data.frame( bact.c1c2.wil),var='Taxa'),by='Taxa') %>%\n  mutate(Disease=ifelse(Disease.qvalue<0.05,'*',' '),\n         Cluster=ifelse(Cluster.qvalue<0.05,'+',' ')\n  ) %>%\n  mutate(Tnames=paste(Taxa,Disease,Cluster,sep=''))%>%\n  dplyr::select(Taxa,Tnames) %>%\n  right_join( add_rownames(as.data.frame(t(bact.cp1)),var='Taxa'),by='Taxa') %>%\n  dplyr::select(-Taxa) %>%\n  add_back_rownames(row.var='Tnames') \n\n### * disease.q < 0.05\n### + cluster.q < 0.05\nbk <- unique(c(\n        0,\n        min(min(taxa.data[taxa.data>0])/2,0.1),\n        seq(min(min(taxa.data[taxa.data>0])/2,1),0.1,length=10),\n        seq(0.1,1,length=10),\n        seq(1,5,length=10),\n        seq(5,20,length=20),\n        seq(20,50,length=20),\n        seq(50,100,length=20)\n        ))\nhmcols<- colorRampPalette(c('white','#1f78b4','#ff7f00','#e41a1c'))(length(bk)-1)\n#bk = unique(c(seq(0,5, length=100),seq(5,10,length=100),seq(10,100,length=100)))\n#hmcols<- colorRampPalette(c(\"white\",\"firebrick3\",\"yellow\"))(length(bk)-1) \n\n### the color lables must be columns,so I have to transform the data\npheatmap(bact.cp1.heat,border_color=\"grey60\",\n         clustering_distance_rows = 'correlation',\n         clustering_distance_cols = bact.dist.cp1,\n         clustering_method = \"complete\",\n         annotation=sample.info[,c(\"Disease\",\"Cluster\",\"Treatment.Specific\",\"FCP\",\"Response\",\"Antibiotics.visit\",\"Steroids\")],\n         color =hmcols, breaks=bk,\n         show_rownames = TRUE,\n         scale=\"none\")\n\nrm(bact.cp1.heat)\n```\n\n```{r bacteria_heatmap_manually_order_samples_normal_disease_cluster1_2,cache=TRUE,fig.width=8,fig.height=8}\n#### manually re-order the samples\ndata.heat <- \n  add_rownames(as.data.frame(bact.cp1.wil),var='Taxa') %>%\n  left_join(add_rownames(as.data.frame( bact.c1c2.wil),var='Taxa'),by='Taxa') %>%\n  mutate(Disease=ifelse(Disease.qvalue<0.05,'*',' '),\n         Cluster=ifelse(Cluster.qvalue<0.05,'+',' ')\n  ) %>%\n  mutate(Tnames=paste(Taxa,Disease,Cluster,sep=''))%>%\n  dplyr::select(Taxa,Tnames) %>%\n  right_join( add_rownames(as.data.frame(t(bact.cp1)),var='Taxa'),by='Taxa') %>%\n  dplyr::select(-Taxa) %>%\n  add_back_rownames(row.var='Tnames') %>%\n  t() %>%\n  as.data.frame %>%\n  add_rownames(var='Sample') %>%\n  ##\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \n  arrange(Disease,Cluster,Response,Treatment.Specific,Antibiotics.visit,FCP,Steroids) %>%\n  dplyr::select(1:(ncol(bact.cp1)+1)) %>%  ## first column is sample name\n  add_back_rownames(row.var='Sample') \n\npheatmap(t(data.heat),border_color=\"grey60\",\n         cluster_cols = FALSE,\n         clustering_distance_rows = 'correlation',\n         #clustering_distance_cols = bact.dist.cp1,\n         clustering_method = \"complete\",\n         annotation=sample.info[,c(\"Disease\",\"Cluster\",\"Response\",\"Treatment.Specific\",\"FCP\",\"Antibiotics.visit\",\"Steroids\")],\n         color =hmcols, breaks=bk,\n         show_rownames = TRUE,\n         scale=\"none\")\n\nrm(data.heat)\n```\n\n### Response rate in two clusters\n```{r bacteria_response_rate_in_two_clusters,cache=TRUE}\n## all\nsample.info %>% dplyr::select(Response,Cluster,Type) %>%\ndplyr::filter(Type=='PLEASE-T4') %>%\nna.omit() %>%\ngroup_by(Cluster,Response) %>%\nsummarise(Num=n()) %>%\nspread(Response,Num) %>%\nadd_back_rownames(row.var='Cluster') %>%\n(function(tdata){\n  print(tdata)\n  fisher.test(tdata)$p.value\n})\n\n\n## antiTNF\nsample.info %>% \ndplyr::filter(Treatment.Specific=='antiTNF') %>%\ndplyr::select(Response,Cluster,Type) %>%\ndplyr::filter(Type=='PLEASE-T4') %>%\nna.omit() %>%\ngroup_by(Cluster,Response) %>%\nsummarise(Num=n()) %>%\nspread(Response,Num) %>%\nadd_back_rownames(row.var='Cluster') %>%\n(function(tdata){\n  print(tdata)\n  fisher.test(tdata)$p.value\n})\n\n\n## EEN\nsample.info %>% \ndplyr::filter(Treatment.Specific=='EEN') %>%\ndplyr::select(Response,Cluster,Type) %>%\ndplyr::filter(Type=='PLEASE-T4') %>%\nna.omit() %>%\ngroup_by(Cluster,Response) %>%\nsummarise(Num=n()) %>%\nspread(Response,Num) %>%\nadd_back_rownames(row.var='Cluster')# %>%\n#function(tdata){\n#  print(tdata)\n#  fisher.test(tdata)$p.value\n#}\n\n## PEN\nsample.info %>% \ndplyr::filter(Treatment.Specific=='PEN') %>%\ndplyr::select(Response,Cluster,Type) %>%\ndplyr::filter(Type=='PLEASE-T4') %>%\nna.omit() %>%\ngroup_by(Cluster,Response) %>%\nsummarise(Num=n()) %>%\nspread(Response,Num) %>%\nadd_back_rownames(row.var='Cluster') #%>%\n## NA in one cell, can not do fisher exact test\n#function(tdata){\n#  print(tdata)\n#  fisher.test(tdata)$p.value\n#}\n```\n\n\n## Human DNA\n\n### Humand DNA among normal, disease cluster 1 and cluster 2\n```{r bacteria_humand_dna_among_normal_disease_cluster1_and_cluster2,cache=TRUE}\n### human DNA\nsample.info %>% \n  dplyr::select(Type,Cluster,Human.Per) %>%\n  dplyr::filter(Type=='COMBO' | Type=='PLEASE-T1') %>%\n  na.omit() %>%\n  unite(Group,Type,Cluster, sep = ' ')  %>%\n  (function(pdata){\n    boxplot(Human.Per~Group,data=pdata,ylab='Human DNA (%)')\n    # Kruskal Wallis Test One Way Anova by Ranks \n    print('Kruskal Wallis test (non-parametric ANOVA) pvalue')\n    kruskal.test(Human.Per~as.factor(Group),data=pdata)$p.value \n  })\n\n### human DNA (for publication)\nsample.info %>% \n  dplyr::select(Type,Cluster,Human.Per) %>%\n  dplyr::filter(Type=='COMBO' | Type=='PLEASE-T1') %>%\n  na.omit() %>%\n  unite(Group,Type,Cluster, sep = ' ')  %>%\n  ggplot(aes(factor(Group), Human.Per)) +\n  geom_boxplot(aes(fill = Group),outlier.shape = NA) + \n  #geom_jitter() +\n  theme_classic()\n\n\n##### non-human DNA\nsample.info %>% \n  dplyr::select(Type,Cluster,NonHumanReads) %>%\n  dplyr::filter(Type=='COMBO' | Type=='PLEASE-T1') %>%\n  na.omit() %>%\n  unite(Group,Type,Cluster, sep = ' ')  %>%\n  (function(pdata){\n    boxplot(log10(NonHumanReads)~Group,data=pdata,ylab='log10 non-human reads')\n    # Kruskal Wallis Test One Way Anova by Ranks \n    print('Kruskal Wallis test (non-parametric ANOVA) pvalue')\n    kruskal.test(NonHumanReads~as.factor(Group),data=pdata)$p.value \n  })\n```\n\n### Human DNA and fungi percentage\n```{r human_dna_with_fungi_percentage,cache=TRUE}\np <- subset(sample.info,Type=='PLEASE-T1' | Type=='COMBO',\n            select=c(Disease,Cluster,Human.Per,Fungi.Per)) %>%\nna.omit() %>%\nggplot(aes(log10(Human.Per),log10(Fungi.Per))) + \ngeom_point(aes(colour = Cluster,shape= Disease),size=5) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  #scale_size_area(range = c(1, 10))+\n  #scale_size_continuous(range = c(3, 10)) +\n  #labs(title = 'Ordination bacterial taxa') +\n  #stat_smooth_func(geom=\"text\",method=\"lm\",hjust=0,parse=TRUE) +\n  geom_smooth(method=\"lm\",se=FALSE) +\n  theme_classic()\nprint(p)\n```\n\n### Human DNA with clinical outcomes\n```{r human_dna_with_clinical_outcomes,cache=TRUE}\n### Plot human DNA by treatment(PEN vs. EEN) and response\np<- sample.info %>% dplyr::select(Human.Per,Response,Time,Treatment.Specific) %>%\n  na.omit %>%\n  ggplot(aes(factor(Time), Human.Per),na.rm=T)+\n  geom_boxplot(na.rm=T)+facet_grid(Treatment.Specific ~ Response, margins=TRUE)\nplot(p)\n\n####  T1 vs. T2,3,4 \nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Human.Per) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Human.Per) %>%\n  summarise_each(funs(wilcox.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n####  T1 vs. T2,3,4 for each treatment arm\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Human.Per) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Human.Per) %>%\n  group_by(Treatment) %>%\n  summarise_each(funs(wilcox.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n\n####  T1 vs. T2,3,4 for each treatment arm\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment.Specific,Human.Per) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Human.Per) %>% \n  group_by(Treatment.Specific) %>%\n  summarise_each(funs(wilcox.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n####  T1 vs. T2,3,4 for each treatment arm & response\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Response,Human.Per) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Human.Per) %>%\n  group_by(Treatment,Response) %>%\n  summarise_each(funs(wilcox.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n####  T1 vs. T2,3,4 for each treatment arm & response\n####  Not enough sample for PEN\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment.Specific,Response,Human.Per) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Human.Per) %>% \n  filter(Treatment.Specific=='EEN') %>%\n  group_by(Treatment.Specific,Response) %>%\n  summarise_each(funs(wilcox.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n###########################\n##### R vs. NR\nwilcoxtest.fun = function(tdata){ \n  R.vs.NR <- NA\n  try(R.vs.NR <- signif(wilcox.test(Human.Per~Response,data=tdata)$p.value, 2),silent=TRUE)\n  return(as.data.frame(R.vs.NR))\n}\n\n\n####  R vs. NR: by treatment\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Human.Per,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Treatment) %>%\n  do(wilcoxtest.fun(.)) %>%\n  add_back_rownames(row.var='Treatment')\n\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Human.Per,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Treatment.Specific) %>%\n  do(wilcoxtest.fun(.)) %>%\n  add_back_rownames(row.var='Treatment.Specific')\n\n####  R vs. NR: by time\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Human.Per,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Time) %>%\n  do(wilcoxtest.fun(.)) %>%\n  add_back_rownames(row.var='Time')\n\n####  R vs. NR: by time & treatment\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Human.Per,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Time,Treatment) %>%\n  do(wilcoxtest.fun(.)) \n\n\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Human.Per,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Time,Treatment.Specific) %>%\n  do(wilcoxtest.fun(.))\n\n###### EEN T1 R vs. NR\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Human.Per,Response) %>% \n  dplyr::filter(Time=='1'&Treatment.Specific=='EEN') %>%\n  na.omit() %>%\n  ggplot(aes(factor(Response), Human.Per),na.rm=T)+\n  geom_boxplot(na.rm=T)\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Human.Per,Response) %>% \n  dplyr::filter(Time=='1'&Treatment.Specific=='EEN') %>%\n  wilcox.test(as.numeric(Human.Per)~as.factor(Response),data=.)\n##\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment.Specific,Human.Per,FCP) %>% \n  dplyr::filter(Treatment.Specific=='EEN') %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  unite(Human.Per.FCP, Human.Per,FCP) %>%\n  spread(Time,Human.Per.FCP) %>%\n  separate(T1, into = c(\"T1.Human.Per\", \"T1.FCP\"), sep = \"_\") %>%\n  separate(T4, into = c(\"T4.Human.Per\", \"T4.FCP\"), sep = \"_\") %>%\n  dplyr::select(T1.Human.Per,T4.FCP) %>%\n  mutate(T1.Human.Per=as.numeric(T1.Human.Per)) %>%\n  mutate(T4.FCP=as.numeric(T4.FCP)) %>%\n  #as.data.frame() %>%\n  #na.omit() %>%\n  (function(tdata){\n    plot(log10(tdata$T1.Human.Per),log10(tdata$T4.FCP),main='EEN T1',\n         xlab='log10(T1.Human.Per)',ylab='log10(T4.FCP)')\n    mtext(paste(\n          'Spearman cor:',\n          signif(cor(log10(tdata$T1.Human.Per),log10(tdata$T4.FCP),method='spearman'),2),\n          'Pval',\n          signif(cor.test(log10(tdata$T1.Human.Per),log10(tdata$T4.FCP),method='spearman')$p.value,2)\n          ))\n  })\n```\n\n### Compare to healthy controls\n```{r human_dna_to_healthy_controls,cache=TRUE}\n#### Plot distance by treatment,response\np<- sample.info %>% dplyr::select(Type,Human.Per,Treatment.Specific,Response) %>%\n  mutate(Response=ifelse(Type=='COMBO','COMBO',Response)) %>%\n  mutate(Treatment.Specific=ifelse(Type=='COMBO','COMBO',Treatment.Specific)) %>%\n  na.omit() %>%\n  unite(Treatment.Response, Treatment.Specific,Response, sep = \".\") %>%\n  ggplot(aes(factor(Type),log(Human.Per))) + \n  geom_boxplot(aes(fill = factor(Treatment.Response)),outlier.shape = NA)+\n  xlab('')+ylab('log Human Per') + \n  theme_classic() \nplot(p)\n\n#### Calculate the pvalues for each box in the above figure\nsample.info %>%\ndplyr::select(Type,Time,Treatment.Specific,Human.Per,Response) %>% \nmutate(Treatment.Specific=ifelse(Type=='COMBO','COMBO',Treatment.Specific)) %>%\nmutate(Response=ifelse(Type=='COMBO','COMBO',Response)) %>%\nmutate(Time=paste('T',Time,sep='')) %>%\nmutate(Time=ifelse(Type=='COMBO','COMBO',Time)) %>%\ndplyr::filter(Treatment.Specific != 'PEN') %>% \nna.omit() %>%\nunite(Time.Treatment.Response,Time, Treatment.Specific,Response, sep = \"_\") %>%\ndplyr::select(Time.Treatment.Response,Human.Per) %>%\n(function(tdata){\ncdata <- dplyr::filter(tdata,Time.Treatment.Response=='COMBO_COMBO_COMBO') %>%\n         dplyr::select(Human.Per) %>%\n         mutate(Human.Per=as.numeric(Human.Per))\n#print(cdata)\ngroup_by(tdata,Time.Treatment.Response) %>%\nsummarise(pval.compare.to.combo=wilcox.test(Human.Per,cdata$Human.Per)$p.value) %>%\nmutate(pval.compare.to.combo=signif(pval.compare.to.combo,2)) %>%\nseparate(Time.Treatment.Response, into=c(\"Time\",\"Treatment\",\"Response\"), sep = \"_\")\n})\n```\n\n### quantile regression on fold change\n```{r human_dna_fc_quantile_regression_treatment_antibiotics_response,cache=TRUE}\n## fold change T4/T1\nset.seed(1)\nmaster.table <- add_rownames(sample.info,var='Sample') %>%\n  dplyr::filter(Time==1 | Time==4) %>%\n  dplyr::select(Human.Per,Subject,Time,Treatment.Specific,Antibiotics.visit,log.FCP,Response) %>%\n  mutate(Time=ifelse(Time==1,'T1','T4'))\n### human.dna\nhuman.temp <- master.table %>%\n  mutate(Human.Per = Human.Per+min(Human.Per[Human.Per>0],na.rm=TRUE))  %>% \n  dplyr::select(Subject,Human.Per,Time,Treatment.Specific) %>%\n  spread(Time,Human.Per) %>%\n  mutate(Human.Per.log.fc = log(T4/T1)) %>%\n  dplyr::select(Subject,Treatment.Specific,Human.Per.log.fc)\n### response\nresponse.temp <- master.table %>%\n  dplyr::select(Subject,Response) \n### log FCP\nlog.fcp.temp <- master.table %>%\n  dplyr::select(Subject,Time,log.FCP) %>%\n  spread(Time,log.FCP) %>%\n  mutate(log.FCP.T4 = T4) %>%\n  dplyr::select(Subject,log.FCP.T4)\n### antibiotics\nantibiotics.temp <- master.table %>%\n  dplyr::select(Subject,Time,Antibiotics.visit) %>%\n  spread(Time,Antibiotics.visit) %>%\n  mutate(antibiotics = ifelse(is.na(T4),T1,T4)) %>%\n  dplyr::select(Subject,antibiotics)\n### merge together \nrq.fc.res <- human.temp %>% full_join(antibiotics.temp,by='Subject') %>%\n  full_join(response.temp,by='Subject') %>%\n  ### quantile regression\n  rq(Human.Per.log.fc ~ Treatment.Specific + antibiotics + Response,\n     tau=0.75,data=.,na.action=na.omit) %>%\n  summary.rq(.,se=\"boot\") %>% coef %>%\n  as.data.frame %>% add_rownames(var='Var') %>%\n  dplyr::select(1,2,5) %>% dplyr::select(Var,Est=Value,Pval=starts_with(\"Pr\"))%>%\n  gather(value,var,Est,Pval) %>% \n  unite(Variables,Var,value, sep = \".\", remove = TRUE) %>%\n  add_back_rownames(row.var='Variables') %>% as.matrix\n\n\n###  \nrm(master.table)\nrm(human.temp)\nrm(antibiotics.temp)\nrm(log.fcp.temp)\nrm(response.temp)\n#break\n\nrq.res.table <- \n  as.data.frame(t(as.data.frame(rq.fc.res))) %>% ## must use as.data.frame again \n  add_rownames(var='Human.DNA') \n\nrm(rq.fc.res)\n######\n#### row name is a column\nwrite.csv(rq.res.table,file=paste('../3_Result/2015_03_05_Human_DNA_Fold_Change_Quantile_Q75_Regression_Treatment_Antibiotics_Response.csv',sep=''),row.names=FALSE)\n\nrm(rq.res.table)\n```\n\n\n\n## Responders vs. non-responders\n\n### Random Forest:EEN T1 and EEN T4\n```{r bacteria_random_forest_of_r_vs_nr_een,cache=TRUE}\n### EEN T1\nrandom_forest(taxa.data,\n              subset(sample.info,Time==1 & Treatment.Specific=='EEN' & !is.na(Response),\n                     select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Response vs. non-response\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n### EEN T4\nrandom_forest(taxa.data,\n              subset(sample.info,Time==4 & Treatment.Specific=='EEN' & !is.na(Response),\n                     select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Response vs. non-response\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n\n### Prevotella\ntry(\n  add_rownames(taxa.data[,'Prevotella',drop=F],var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),Subject,Sample,Time,Treatment.Specific,Response), by='Sample') %>% \n  mutate(Prevotella.log = log(Prevotella+min(Prevotella[Prevotella!=0])))%>%\n  #head(30)\n  na.omit() %>%\n  ggplot( aes(factor(Time), Prevotella.log),na.rm=T)+\n  geom_boxplot(na.rm=T)+facet_grid(Treatment.Specific ~ Response, margins=TRUE)\n\n,silent=TRUE\n)\n\ntry(\n  add_rownames(taxa.data[,'Prevotella',drop=F],var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),Subject,Sample,Time), by='Sample') %>% \n  dplyr::filter(Time==1) %>% \n  left_join(dplyr::filter(dplyr::select(add_rownames(sample.info,var='Sample'),Subject,Sample,Time,log.FCP),Time==4),by='Subject') %>% \n  dplyr::select(Subject,Prevotella,log.FCP) %>%\n  ggplot(aes(Prevotella,log.FCP)) + geom_point()\n  #,xlab='Prevotella(T1)',ylab='log FCP (T4)')\n  \n,silent=TRUE\n)\n```\n\n### Wilcoxon rank test: EEN T1 and EEN T4\n```{r bacteria_rank_test_of_r_vs_nr_een,cache=TRUE}\n### EEN T1\nbact.EEN.T1 <- wilcox_test(taxa.data,\n                           subset(sample.info,Time==1 & Treatment.Specific=='EEN' & !is.na(Response),\n                                  select=Response),\n                           plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance(%)')\nwrite.csv(bact.EEN.T1,file=paste('../3_Result/2015_03_05_Bacteria_EEN_T1_R_vs_NR_Wilcox.csv',sep=''),row.names=FALSE)\n\n### EEN T4\nbact.EEN.T4 <- wilcox_test(taxa.data,\n                           subset(sample.info,Time==4 & Treatment.Specific=='EEN' & !is.na(Response),\n                                  select=Response),\n                           plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance(%)')\nwrite.csv(bact.EEN.T4,file=paste('../3_Result/2015_03_05_Bacteria_EEN_T4_R_vs_NR_Wilcox.csv',sep=''),row.names=FALSE)\n\n```\n\n### Random Forest:antiTNF and antiTNF T4\n```{r bacteria_random_forest_of_r_vs_nr_antiTNF,cache=TRUE}\n### antiTNF T1\nrandom_forest(taxa.data,\n              subset(sample.info,Time==1 & Treatment.Specific=='antiTNF' & !is.na(Response),\n                     select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Response vs. non-response\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n### antiTNF T4\nrandom_forest(taxa.data,\n              subset(sample.info,Time==4 & Treatment.Specific=='antiTNF' & !is.na(Response),\n                     select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Response vs. non-response\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n\n```\n\n### Wilcoxon rank test: antiTNF T1 and antiTNF T4\n```{r bacteria_rank_test_of_r_vs_nr_antitnf,cache=TRUE}\n### antiTNF T1\nbact.antiTNF.T1 <- wilcox_test(taxa.data,\n                           subset(sample.info,Time==1 & Treatment.Specific=='antiTNF' & !is.na(Response),\n                                  select=Response),\n                           plot.heatmap=FALSE,boxplot.top=10,boxplot.y='Abundance(%)')\nwrite.csv(bact.antiTNF.T1,file=paste('../3_Result/2015_03_05_Bacteria_antiTNF_T1_R_vs_NR_Wilcox.csv',sep=''),row.names=FALSE)\n\n### antiTNF T4\nbact.antiTNF.T4 <- wilcox_test(taxa.data,\n                           subset(sample.info,Time==4 & Treatment.Specific=='antiTNF' & !is.na(Response),\n                                  select=Response),\n                           plot.heatmap=FALSE,boxplot.top=10,boxplot.y='Abundance(%)')\nwrite.csv(bact.antiTNF.T4,file=paste('../3_Result/2015_03_05_Bacteria_antiTNF_T4_R_vs_NR_Wilcox.csv',sep=''),row.names=FALSE)\n\n```\n\n## EEN response vs. aniTNF response vs. control\n\n### Random Forest\n```{r bacteria_random_forest_of_een_r_vs_control,cache=TRUE}\n### T4 EEN response vs. control\nrandom_forest(taxa.data,\n              subset(sample.info,Type=='COMBO' | (Type=='PLEASE-T4' & Treatment.Specific=='EEN' & Response=='Response'),  select=Type),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n\n### T1 EEN response vs. control\nrandom_forest(taxa.data,\n              subset(sample.info,Type=='COMBO' | (Type=='PLEASE-T1' & Treatment.Specific=='EEN' & Response=='Response'),  select=Type),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n\n### T4 aniTNF response vs. control\nrandom_forest(taxa.data,\n              subset(sample.info,Type=='COMBO' | (Type=='PLEASE-T4' & Treatment.Specific=='antiTNF' & Response=='Response'),  select=Type),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n\n### T1 aniTNF response vs. control\nrandom_forest(taxa.data,\n              subset(sample.info,Type=='COMBO' | (Type=='PLEASE-T1' & Treatment.Specific=='antiTNF' & Response=='Response'),  select=Type),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n\n\n### T4 EEN response vs. aniTNF response\nrandom_forest(taxa.data,\n              subset(sample.info,Type=='PLEASE-T4' & (Treatment.Specific=='EEN' | Treatment.Specific=='antiTNF') & Response=='Response',  select=Treatment.Specific),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n\n\n### T1 EEN response vs. aniTNF response\nrandom_forest(taxa.data,\n              subset(sample.info,Type=='PLEASE-T1' & (Treatment.Specific=='EEN' | Treatment.Specific=='antiTNF') & Response=='Response',  select=Treatment.Specific),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n```\n\n### Wilcoxon rank test\n```{r bacteria_rank_test_of_een_r_vs_control,cache=TRUE}\n### T4 EEN response vs. control\nbact.EEN.R.T4 <- wilcox_test(taxa.data,\n        subset(sample.info,Type=='COMBO' | (Type=='PLEASE-T4' & Treatment.Specific=='EEN' & Response=='Response'),  select=Type),\n      plot.heatmap=FALSE,boxplot.top=6,boxplot.y='Abundance(%)')\n###\nwrite.csv(bact.EEN.R.T4,file=paste('../3_Result/2015_03_05_Bacteria_EEN_T4R_vs_Control_Wilcox.csv',sep=''),row.names=TRUE)\n\n\n### T1 EEN response vs. control\nbact.EEN.R.T1 <- wilcox_test(taxa.data,\n        subset(sample.info,Type=='COMBO' | (Type=='PLEASE-T1' & Treatment.Specific=='EEN' & Response=='Response'),  select=Type),\n      plot.heatmap=FALSE,boxplot.top=6,boxplot.y='Abundance(%)')\nwrite.csv(bact.EEN.R.T1,file=paste('../3_Result/2015_03_05_Bacteria_EEN_T1R_vs_Control_Wilcox.csv',sep=''),row.names=TRUE)\n\n### T4 antiTNF response vs. control\nbact.antiTNF.R.T4 <- wilcox_test(taxa.data,\n        subset(sample.info,Type=='COMBO' | (Type=='PLEASE-T4' & Treatment.Specific=='antiTNF' & Response=='Response'),  select=Type),\n      plot.heatmap=FALSE,boxplot.top=0.05,boxplot.y='Abundance(%)')\nwrite.csv(bact.antiTNF.R.T4,file=paste('../3_Result/2015_03_05_Bacteria_anitTNF_T4R_vs_Control_Wilcox.csv',sep=''),row.names=TRUE)\n\n### T1 antiTNF response vs. control\nbact.antiTNF.R.T1 <- wilcox_test(taxa.data,\n        subset(sample.info,Type=='COMBO' | (Type=='PLEASE-T1' & Treatment.Specific=='antiTNF' & Response=='Response'),  select=Type),\n      plot.heatmap=FALSE,boxplot.top=0.05,boxplot.y='Abundance(%)')\nwrite.csv(bact.antiTNF.R.T1,file=paste('../3_Result/2015_03_05_Bacteria_anitTNF_T1R_vs_Control_Wilcox.csv',sep=''),row.names=TRUE)\n\n### T4 EEN response vs. aniTNF response\nbact.EEN.antiTNF.R.T4 <- wilcox_test(taxa.data,\n        subset(sample.info,Type=='PLEASE-T4' & (Treatment.Specific=='EEN' | Treatment.Specific=='antiTNF') & Response=='Response',  select=Treatment.Specific),\n      plot.heatmap=FALSE,boxplot.top=6,boxplot.y='Abundance(%)')\nwrite.csv(bact.EEN.antiTNF.R.T4,file=paste('../3_Result/2015_03_05_Bacteria_anitTNF_T4R_vs_EEN_T4R_Wilcox.csv',sep=''),row.names=TRUE)\n\n\n### T1 EEN response vs. aniTNF response\nbact.EEN.antiTNF.R.T1 <- wilcox_test(taxa.data,\n        subset(sample.info,Type=='PLEASE-T1' & (Treatment.Specific=='EEN' | Treatment.Specific=='antiTNF') & Response=='Response',  select=Treatment.Specific),\n      plot.heatmap=FALSE,boxplot.top=6,boxplot.y='Abundance(%)')\nwrite.csv(bact.EEN.antiTNF.R.T1,file=paste('../3_Result/2015_03_05_Bacteria_anitTNF_T1R_vs_EEN_T1R_Wilcox.csv',sep=''),row.names=TRUE)\n\n```\n\n## Compare time points\n\n### T1 vs. T2/3/4 by treatment\n```{r bacteria_T1_vs_T234_treatment,cache=TRUE}\nwil.by.time <- add_rownames(taxa.data,var='Sample') %>%\n  gather(Taxa,Abu,-Sample) %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),Subject,Sample,Time,Treatment.Specific,Response), by='Sample') %>%  \n  filter(!is.na(Time)) %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  dplyr::select(-Sample) %>% \n  spread(Time,Abu) %>%\n  group_by(Treatment.Specific,Taxa) %>%\n  summarise_each(funs(wilcox.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  ## raw pvalues\n  rename(T1.vs.T2.p=vars1,T1.vs.T3.p=vars2,T1.vs.T4.p=vars3) %>%\n  mutate(T1.vs.T2.q = p.adjust(T1.vs.T2.p,method='fdr'),\n         T1.vs.T3.q = p.adjust(T1.vs.T3.p,method='fdr'),\n         T1.vs.T4.q = p.adjust(T1.vs.T4.p,method='fdr')\n         ) %>%\n  mutate_each(funs(signif(.,digits=2)),T1.vs.T2.p:T1.vs.T4.q) %>%\n  arrange(Treatment.Specific,T1.vs.T2.p,T1.vs.T3.p,T1.vs.T4.p) \n\n \n########### save the results\nwrite.csv(wil.by.time,file=paste('../3_Result/2015_03_05_Bacteria_Compare_Time_Points_by_Treatment_Wilcox.csv',sep=''),row.names=FALSE)\n\n########## print the significant results\nwil.by.time %>%\n  dplyr::filter(T1.vs.T2.p<0.05 | T1.vs.T3.p<0.05 | T1.vs.T4.p<0.05) %>%\n  as.data.frame\n\n```\n\n### EEN  T1 vs. T2\n```{r bacteria_T1_vs_T2_EEN,cache=TRUE}\nwil.t1.t2.een <- add_rownames(taxa.data,var='Sample') %>%\n  gather(Taxa,Abu,-Sample) %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),Subject,Sample,Time,Treatment.Specific,Response), by='Sample') %>%  \n  filter(!is.na(Time)) %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  dplyr::select(-Sample) %>% \n  spread(Time,Abu) %>% \n  dplyr::filter(Treatment.Specific=='EEN') %>% \n  group_by(Taxa) %>%\n  summarise(median.T1=median(T1,na.rm=TRUE),mad.T1=mad(T1,na.rm=TRUE),\n            median.T2=median(T2,na.rm=TRUE),mad.T2=mad(T2,na.rm=TRUE),\n            mean.T1=mean(T1,na.rm=TRUE),sd.T1=sd(T1,na.rm=TRUE),\n            mean.T2=mean(T2,na.rm=TRUE),sd.T2=sd(T2,na.rm=TRUE),\n            T1.vs.T2.p=wilcox.test(T1, T2, pair = TRUE)$p.value\n            ) %>%\n  ## raw pvalues\n  mutate(T1.vs.T2.q = p.adjust(T1.vs.T2.p,method='fdr'))\n  \n \n########### save the results\nwrite.csv(wil.t1.t2.een,file=paste('../3_Result/2015_03_05_Bacteria_EEN_T1_vs_T2_Wilcox.csv',sep=''),row.names=FALSE)\n\n```\n\n\n### T1 vs. T2/3/4 by treatment and response\n```{r bacteria_T1_vs_T234_treatment_response,cache=TRUE}\nadd_rownames(taxa.data,var='Sample') %>%\n  gather(Taxa,Abu,-Sample) %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),Subject,Sample,Time,Treatment.Specific,Response), by='Sample') %>%  \n  filter(!is.na(Time) & Treatment.Specific != 'PEN' & !is.na(Response)) %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  dplyr::select(-Sample) %>% \n  spread(Time,Abu) %>%\n  group_by(Treatment.Specific,Response,Taxa) %>%\n  summarise_each(funs(wilcox.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  #mutate_each(funs(p.adjust(.,method='fdr')),vars1:vars3) %>%\n  ## raw pvalues\n  mutate_each(funs(signif(.,digits=2)),vars1:vars3) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3) %>%\n  arrange(Treatment.Specific,T1.vs.T2,T1.vs.T3,T1.vs.T4) %>%\n  dplyr::filter(T1.vs.T2<0.05 | T1.vs.T3<0.05 | T1.vs.T4<0.05) %>%\n  as.data.frame \n\n\n```\n\n\n### Heatmap: all four time points\n```{r bacteria_heatmap_all_four_time_points,cache=TRUE,fig.width=15,fig.height=10}\n## Rick:\n## The reviewer wondered about how the bacterial taxa changed over time.  I think we need some heat maps to summarize this, which we can then add to the supplemental information.\n## How about making four heat maps, showing the two therapies, each separated by responders and non responders.  There would be four columns, one for each time point.  Rows would be bacteria, either the most abundant, or the ones that changed the most.\n\ndata.heat <- \n  add_rownames(as.data.frame(taxa.data),var='Sample') %>%\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \n  arrange(Disease,Time,Treatment.Specific,Response,Cluster,Antibiotics.visit,FCP) %>%\n  dplyr::select(1:(ncol(taxa.data)+1)) %>%  ## first column is sample name\n  add_back_rownames(row.var='Sample') \n\nbk <- unique(c(\n        0,\n        min(min(taxa.data[taxa.data>0])/2,0.1),\n        seq(min(min(taxa.data[taxa.data>0])/2,1),0.1,length=10),\n        seq(0.1,1,length=10),\n        seq(1,5,length=10),\n        seq(5,20,length=20),\n        seq(20,50,length=20),\n        seq(50,100,length=20)\n        ))\nhmcols<- colorRampPalette(c('white','#1f78b4','#ff7f00','#e41a1c'))(length(bk)-1)\n#bk = unique(c(seq(0,5, length=100),seq(5,10,length=100),seq(10,100,length=100)))\n#hmcols<- colorRampPalette(c(\"white\",\"firebrick3\",\"yellow\"))(length(bk)-1) \n\n#### distance for taxa\ndist.taxa <- calculate_distance(X = t(data.heat), method = bacteral.distance.method)\n\n#######################\n #######################\n ### use the new parameters in pheatmap to separate different treatments\n # Gaps in heatmaps\npheatmap(t(data.heat),\n         border_color=\"grey60\",\n         cluster_cols = FALSE,\n         clustering_distance_rows = dist.taxa,\n         #clustering_distance_cols = bact.dist,\n         #clustering_method = \"complete\",\n         annotation=sample.info[,c(\"Disease\",\"Time\",\"Treatment.Specific\",\"Response\",\"Cluster\",\"FCP\",\"Antibiotics.visit\",\"Steroids\")],\n         color =hmcols, breaks=bk,\n         show_rownames = TRUE,\n         scale=\"none\",\n         gaps_col = c(26, 111,191,273)\n         )\nrm(data.heat)\nrm(dist.taxa)\n```\n\n\n```{r bacteria_heatmap_all_four_time_points_v2,cache=TRUE,fig.width=15,fig.height=10}\n######\n### different ways of arranging the samples (columns)\ndata.heat <- \n  add_rownames(as.data.frame(taxa.data),var='Sample') %>%\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \n  arrange(Disease,Treatment.Specific,Response,Time,Cluster,Antibiotics.visit,FCP) %>%\n  dplyr::select(1:(ncol(taxa.data)+1)) %>%  ## first column is sample name\n  add_back_rownames(row.var='Sample') \n\nbk <- unique(c(\n        0,\n        min(min(taxa.data[taxa.data>0])/2,0.1),\n        seq(min(min(taxa.data[taxa.data>0])/2,1),0.1,length=10),\n        seq(0.1,1,length=10),\n        seq(1,5,length=10),\n        seq(5,20,length=20),\n        seq(20,50,length=20),\n        seq(50,100,length=20)\n        ))\nhmcols<- colorRampPalette(c('white','#1f78b4','#ff7f00','#e41a1c'))(length(bk)-1)\n#bk = unique(c(seq(0,5, length=100),seq(5,10,length=100),seq(10,100,length=100)))\n#hmcols<- colorRampPalette(c(\"white\",\"firebrick3\",\"yellow\"))(length(bk)-1) \n\n#### distance for taxa\ndist.taxa <- calculate_distance(X = t(data.heat), method = bacteral.distance.method)\n\n#######################\n #######################\n ### use the new parameters in pheatmap to separate different treatments\n # Gaps in heatmaps\npheatmap(t(data.heat),\n         border_color=\"grey60\",\n         cluster_cols = FALSE,\n         clustering_distance_rows = dist.taxa,\n         #clustering_distance_cols = bact.dist,\n         #clustering_method = \"complete\",\n         annotation=sample.info[,c(\"Disease\",\"Treatment.Specific\",\"Response\",\"Time\",\"Cluster\",\"FCP\",\"Antibiotics.visit\",\"Steroids\")],\n         color =hmcols, breaks=bk,\n         show_rownames = TRUE,\n         scale=\"none\",\n         gaps_col = c(26, 53, 90, 94, 138, 144, 156, 211, 313, 353)\n         )\nrm(data.heat)\nrm(dist.taxa)\n```\n\n\n\n```{r  bacteria_heatmap_all_four_time_points_v3,cache=TRUE,fig.width=15,fig.height=10}\n#### manually re-order the samples\ndata.heat <- \n  add_rownames(as.data.frame(taxa.data),var='Sample') %>%\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \n  arrange(Cluster,Treatment.Specific,Response,Time,Antibiotics.visit,FCP) %>%\n  dplyr::select(1:(ncol(taxa.data)+1)) %>%  ## first column is sample name\n  add_back_rownames(row.var='Sample') \n\nbk <- unique(c(\n        0,\n        min(min(taxa.data[taxa.data>0])/2,0.1),\n        seq(min(min(taxa.data[taxa.data>0])/2,1),0.1,length=10),\n        seq(0.1,1,length=10),\n        seq(1,5,length=10),\n        seq(5,20,length=20),\n        seq(20,50,length=20),\n        seq(50,100,length=20)\n        ))\nhmcols<- colorRampPalette(c('white','#1f78b4','#ff7f00','#e41a1c'))(length(bk)-1)\n#bk = unique(c(seq(0,5, length=100),seq(5,10,length=100),seq(10,100,length=100)))\n#hmcols<- colorRampPalette(c(\"white\",\"firebrick3\",\"yellow\"))(length(bk)-1) \n\n#### distance for taxa\ndist.taxa <- calculate_distance(X = t(data.heat), method = bacteral.distance.method)\n\nheat.res <- pheatmap(t(data.heat),border_color=\"grey60\",\n         cluster_cols = FALSE,\n         clustering_distance_rows = dist.taxa,\n         #clustering_distance_cols = bact.dist,\n         #clustering_method = \"complete\",\n         annotation=sample.info[,c(\"Disease\",\"Time\",\"Response\",\"Treatment.Specific\",\"Cluster\",\"FCP\",\"Antibiotics.visit\",\"Steroids\")],\n         color =hmcols, breaks=bk,\n         show_rownames = TRUE,\n         scale=\"none\")\nordered.labels <- heat.res$tree_row$labels[heat.res$tree_row$order]\n\n```\n\n```{r bacteria_heatmap_all_four_time_points_separately,cache=TRUE,fig.width=15,fig.height=8}\n#### plot each time point\nbk <- unique(c(\n        0,\n        min(min(taxa.data[taxa.data>0])/2,0.1),\n        seq(min(min(taxa.data[taxa.data>0])/2,1),0.1,length=10),\n        seq(0.1,1,length=10),\n        seq(1,5,length=10),\n        seq(5,20,length=20),\n        seq(20,50,length=20),\n        seq(50,100,length=20)\n        ))\nhmcols<- colorRampPalette(c('white','#1f78b4','#ff7f00','#e41a1c'))(length(bk)-1)\n### #1f78b4' blue\n### '#e41a1c' red\n### '#ff7f00' orange\n### #4daf4a green\n\n##### COMBO\npheatmap(t(subset_data_by_sample_info(data.heat,sample.info,Type=='COMBO'))[ordered.labels,],\n         border_color=\"grey60\",\n         cluster_cols = FALSE,\n         cluster_rows = FALSE, \n         annotation=sample.info[,c(\"Disease\",\"Cluster\")],\n         color =hmcols, breaks=bk,\n         show_rownames = TRUE,\n          main='COMBO',\n         cellwidth = 8, cellheight = 8,\n         scale=\"none\")\n\n##### PLEASE\nfor (i in c(\"antiTNF\",\"EEN\",\"PEN\")){\nfor (j in c(\"PLEASE-T1\",\"PLEASE-T2\",\"PLEASE-T3\",\"PLEASE-T4\")){\ndata.temp <- subset_data_by_sample_info(data.heat,sample.info,Treatment.Specific==i & Type==j)\n#dist.temp <- calculate_distance(X = data.temp, method = bacteral.distance.method)\npheatmap(t(data.temp)[ordered.labels,],\n         border_color=\"grey60\",\n         #clustering_distance_rows = 'correlation',\n         #clustering_distance_cols = dist.temp,\n         #clustering_method = \"complete\",\n         cluster_cols = FALSE,\n         cluster_rows = FALSE, \n         annotation=sample.info[,c(\"Disease\",\"Response\",\"Cluster\",\"FCP\",\"Antibiotics.visit\",\"Steroids\")],\n         color =hmcols, breaks=bk,\n         show_rownames = TRUE,\n         main=paste(i,j),\n         cellwidth = 8, cellheight = 8,\n         scale=\"none\")\n}}\n\n\n```\n\n```{r bacteria_heatmap_pdf,eval=FALSE,include=FALSE}\n###########\npdf('Heatmap_four_time_points.pdf',width=30,height=10)\n#### plot each time point\nbk <- unique(c(\n        0,\n        min(min(taxa.data[taxa.data>0])/2,0.1),\n        seq(min(min(taxa.data[taxa.data>0])/2,1),0.1,length=10),\n        seq(0.1,1,length=10),\n        seq(1,5,length=10),\n        seq(5,20,length=20),\n        seq(20,50,length=20),\n        seq(50,100,length=20)\n        ))\nhmcols<- colorRampPalette(c('white','#1f78b4','#ff7f00','#e41a1c'))(length(bk)-1)\n##### COMBO\npheatmap(t(subset_data_by_sample_info(data.heat,sample.info,Type=='COMBO'))[ordered.labels,],\n         border_color=\"grey60\",\n         cluster_cols = FALSE,\n         cluster_rows = FALSE, \n         annotation=sample.info[,c(\"Disease\",\"Cluster\")],\n         color =hmcols, breaks=bk,\n         show_rownames = TRUE,\n         main='COMBO',\n         cellwidth = 8, cellheight = 8,\n         scale=\"none\")\n\n##### PLEASE\nfor (i in c(\"antiTNF\",\"EEN\",\"PEN\")){\nfor (j in c(\"PLEASE-T1\",\"PLEASE-T2\",\"PLEASE-T3\",\"PLEASE-T4\")){\ndata.temp <- subset_data_by_sample_info(data.heat,sample.info,Treatment.Specific==i & Type==j)\n#dist.temp <- calculate_distance(X = data.temp, method = bacteral.distance.method)\npheatmap(t(data.temp)[ordered.labels,],\n         border_color=\"grey60\",\n         #clustering_distance_rows = 'correlation',\n         #clustering_distance_cols = dist.temp,\n         #clustering_method = \"complete\",\n         cluster_cols = FALSE,\n         cluster_rows = FALSE, \n         annotation=sample.info[,c(\"Disease\",\"Response\",\"Cluster\",\"FCP\",\"Antibiotics.visit\",\"Steroids\")],\n         color =hmcols, breaks=bk,\n         show_rownames = TRUE,\n         main=paste(i,j),\n         cellwidth = 8, cellheight = 8,\n         scale=\"none\")\n}}\n\ndev.off()\n```\n\n## Treatment, antibiotics use, FCP on bacterial abundance\n### Logistic regression\n```{r bacteria_logistic_regression_treatment_antibiotics_fcp,cache=TRUE,eval=FALSE}\n## T4\nlogistic.res <- list()\nfor (spe in colnames(taxa.data)){\n  taxa.tem <- taxa.data[,spe,drop=FALSE]\n  colnames(taxa.tem) <- 'Taxa'\n  logistic.res[[spe]] <- add_rownames(taxa.tem,var='Sample') %>%\n    left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>%\n    dplyr::filter(Type=='PLEASE-T4') %>%\n    dplyr::select(Taxa,Treatment.Specific,Antibiotics.visit,log.FCP) %>%\n    mutate(Taxa.present = ifelse(Taxa>0,'Present','Absent')) %>%\n    glm(as.factor(Taxa.present) ~ Treatment.Specific + Antibiotics.visit + log.FCP,\n        family=binomial(logit), data=.) %>%\n    summary %>% coef  %>%  \n    as.data.frame %>% add_rownames(var='Var') %>%\n    dplyr::select(1,2,5) %>% dplyr::select(Var,Est=Estimate,Pval=starts_with(\"Pr\"))%>%\n    gather(value,var,Est,Pval) %>% \n    unite(Variables,Var,value, sep = \".\", remove = TRUE) %>%\n    add_back_rownames(row.var='Variables') %>% as.matrix\n  ####\n  colnames(logistic.res[[spe]]) <- spe\n  ###  \n  rm(taxa.tem)\n}\n\nlogistic.res <- signif(t(as.data.frame(logistic.res)),2)\n\nprint(logistic.res)\n######\nwrite.csv(logistic.res,file=paste('../3_Result/2015_03_05_Bacteria_Logistic_Regression_Treatment_Antibiotics_FCP.csv',sep=''),row.names=TRUE)\n```\n\n\n### quantile regression on fold change\n```{r bacteria_fc_quantile_regression_treatment_antibiotics_fcp,cache=TRUE}\n## fold change T4/T1\nrq.fc.res <- list()\nfor (spe in colnames(taxa.data)){\n  #spe <- \"Bacteroides\"\n  ### it seems rq used some random numbers\n  set.seed(1)\n  bact.tem <- taxa.data[,spe,drop=FALSE]\n  colnames(bact.tem) <- 'Taxa'\n    ####\n    master.table <- add_rownames(as.data.frame(bact.tem),var='Sample') %>%\n    left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>%\n    dplyr::filter(Time==1 | Time==4) %>%\n    dplyr::select(Taxa,Subject,Time,Treatment.Specific,Antibiotics.visit,log.FCP,Response) %>%\n    mutate(Time=ifelse(Time==1,'T1','T4'))\n    ### taxa\n    taxa.temp <- master.table %>%\n    mutate(Taxa = Taxa+min(Taxa[Taxa>0]))  %>% \n    dplyr::select(Subject,Taxa,Time,Treatment.Specific) %>%\n    spread(Time,Taxa) %>%\n    mutate(Taxa.log.fc = log(T4/T1)) %>%\n    dplyr::select(Subject,Treatment.Specific,Taxa.log.fc)\n    ### response\n    response.temp <- master.table %>%\n    dplyr::select(Subject,Response) \n    ### log FCP\n    log.fcp.temp <- master.table %>%\n    dplyr::select(Subject,Time,log.FCP) %>%\n    spread(Time,log.FCP) %>%\n    mutate(log.FCP.T4 = T4) %>%\n    dplyr::select(Subject,log.FCP.T4)\n    ### antibiotics\n    antibiotics.temp <- master.table %>%\n    dplyr::select(Subject,Time,Antibiotics.visit) %>%\n    spread(Time,Antibiotics.visit) %>%\n    mutate(antibiotics = ifelse(is.na(T4),T1,T4)) %>%\n    dplyr::select(Subject,antibiotics)\n    ### merge together \n    rq.fc.res[[spe]] <- taxa.temp %>% full_join(antibiotics.temp,by='Subject') %>%\n    full_join(log.fcp.temp,by='Subject') %>%\n    full_join(response.temp,by='Subject') %>%\n    ### !!!!!!!!!! ########\n    ### After updating RStudio and some R packages,\n    ### a problem has occured: the reference level in the linear model\n    ### has changed for no reason\n    ### Change the reference level back to EEN for consistency with\n    ### previous analysis\n    ###\n    mutate( Treatment.Specific = relevel(as.factor(Treatment.Specific), ref = 'EEN')) %>%\n    ######################\n    ### quantile regression\n    rq( Taxa.log.fc ~ Treatment.Specific + \n                      antibiotics + \n                      Response,\n        tau=0.75,data=.,na.action=na.omit) %>%\n    summary.rq(.,se=\"boot\") %>% coef %>%\n    as.data.frame %>% add_rownames(var='Var') %>%\n    dplyr::select(1,2,5) %>% dplyr::select(Var,Est=Value,Pval=starts_with(\"Pr\"))%>%\n    gather(value,var,Est,Pval) %>% \n    unite(Variables,Var,value, sep = \".\", remove = TRUE) %>%\n    add_back_rownames(row.var='Variables') %>% as.matrix\n  #### add pathway name\n  colnames(rq.fc.res[[spe]]) <- spe\n  ###  \n  rm(bact.tem)\n  rm(master.table)\n  rm(taxa.temp)\n  rm(antibiotics.temp)\n  rm(log.fcp.temp)\n  #break\n}\n\nrq.res.table <- \n  as.data.frame(t(as.data.frame(rq.fc.res))) %>% ## must use as.data.frame again \n  add_rownames(var='taxa') %>%\n  mutate(\n    Treatment.SpecificPEN.Qval = p.adjust(Treatment.SpecificPEN.Pval,method='fdr'),\n    Treatment.SpecificantiTNF.Qval = p.adjust(Treatment.SpecificantiTNF.Pval,method='fdr'),\n    Antibiotics.visitUse.Qval = p.adjust(antibioticsUse.Pval,method='fdr'),\n    #log.FCP.Qval = p.adjust(log.FCP.T4.Pval,method='fdr')\n    ResponseResponse.Qval = p.adjust(ResponseResponse.Pval ,method='fdr')\n  ) \n\n\n######\n#### row name is a column\nwrite.csv(rq.res.table,file=paste('../3_Result/2015_03_05_Bacteria_Fold_Change_Quantile_Q75_Regression_Treatment_Antibiotics_Response.csv',sep=''),row.names=FALSE)\n\nrm(rq.fc.res)\nrm(rq.res.table)\n```\n\n\n## Distance-based analysis\n### Calculate the distance to COMBO centroid\n```{r bacteria_calculate_distance_to_combo_centroid,cache=TRUE}\n## use mean\nCOMBO.centroid <- apply(subset_data_by_sample_info(taxa.data,sample.info,Type=='COMBO'),2,mean)\nhead(COMBO.centroid)\nPLEASE.COMBO.centroid <- rbind(taxa.data,COMBO.centroid=COMBO.centroid)\ndist.all <- calculate_distance(X = PLEASE.COMBO.centroid, method = bacteral.distance.method)\n\n### Get the distance to the COMBO centroid for all samples\ndist.all.mat <- as.matrix(dist.all)\ndist.to.cen <- dist.all.mat[-which(colnames(dist.all.mat)=='COMBO.centroid'),\"COMBO.centroid\",drop=FALSE]\ncolnames(dist.to.cen) <- 'Distance'\n### Check the data maniputation\n####Before data manipulation\ndist.all.mat[\"5001-01\",\"COMBO.centroid\"]\n####After data manipulation\ndist.to.cen[\"5001-01\",]\n\n\ndim(dist.to.cen)\n\n### What is the distribution of the distance    \n### The data looks normal, we can use t.test in the following analysis\nhist(dist.to.cen,xlab='Distance to the COMBO centroid',breaks=20,main='')\n\n### Add distance information to the sample information\nsample.info <- add_rownames(sample.info,var='Sample') %>%\n  left_join(add_rownames(as.data.frame(dist.to.cen),var='Sample'),by='Sample') %>%\n  add_back_rownames(row.var='Sample')\n\n\n##############################\n### save the sample information\n### again\nwrite.csv(sample.info,file=paste('../1_Data/Processed_Data/Sample_Information/2015_02_13_Processed_Sample_Information.csv',sep=''),row.names=TRUE)\n```\n \n \n```{r distance_to_combo_centroid_mds_plot,cache=TRUE}\n## use distance as input\n## the centroid is not in the center at MDS plot\nind <- c(grep('-',rownames(as.matrix(dist.all)),invert=TRUE),\n       grep('-01',rownames(as.matrix(dist.all)),invert=FALSE))\ndist.all.cp1 <- as.dist(as.matrix(dist.all)[ind,ind])\nset.seed(10)\nmeta.MDS.cen <- metaMDS(dist.all.cp1)\n\n## use raw data as input\n## the centroid is in the center at MDS plot with binary jaccard distance\n## but in the center with numerical jaccard distance\ndistf <- function(X,dist.method,tree=NA){\n  if (dist.method == 'UniFrac'){\n    if (is.na(tree)){stop('Need the tree information to run UniFrac!')}\n    #overlap.species <- intersect(colnames(X),tree$tip.label)\n    unifracs <- GUniFrac(X,tree,alpha=0.5)\n    dist <- as.dist(unifracs$unifracs[,,1])\n  }\n  else if (dist.method == 'Binary_Jaccard'){\n    dist <- vegdist(X,method='jaccard',binary=TRUE)\n  }\n  else if (dist.method == 'Numerical_Jaccard'){\n    dist <- vegdist(X,method='jaccard',binary=FALSE)\n  }\n  else if (dist.method == 'Bray'){\n    dist <- vegdist(X,method='bray',binary=FALSE)\n  }\n  else {\n    stop('method is not correct')\n  }\n  return(dist)\n}\n\nind <- c(grep('-',rownames(PLEASE.COMBO.centroid),invert=TRUE),\n       grep('-01',rownames(PLEASE.COMBO.centroid),invert=FALSE))\nPLEASE.COMBO.centroid.cp1 <- PLEASE.COMBO.centroid[ind,]\nset.seed(10)\nmeta.MDS.cen <- metaMDS(PLEASE.COMBO.centroid.cp1,distfun=distf,dist.method = 'Numerical_Jaccard')\n\n## The control centroid is calculated by averaged species abundance across all\n## control samples. Unless the species has zero abundance across all samples,\n## the average would be non-zero. Therefore, the control centroid would have non-zero\n## abundance across all species. When using the binary Jaccard distance,\n## the distance between any control sample and control centroid may not give the\n## the centroid as the center.\n## The controid was calculated numerically, but the distance was calculated binaryly.\n\n### Figure for Rick\n### we start with the same MDS as in 1B, but don't show human DNA or near and far cluster.  Control is shown as the filled circle, Crohn's as open circles.  Current antibiotic use is shown by blue versus red coloring.  If not too hard, maybe also plot the centroid of the healties as a large yellow triangle.\np <- add_rownames(as.data.frame(meta.MDS.cen$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Type,Disease,Antibiotics.visit),\n            by='Sample') %>% \n  dplyr::filter(is.na(Type) | Type != 'PLEASE-T2' & Type != 'PLEASE-T3' & Type != 'PLEASE-T4') %>%\n  mutate(Disease=ifelse(is.na(Disease),'Centroid',Disease)) %>%\n  mutate(Antibiotics.visit=ifelse(is.na(Antibiotics.visit),'Centroid',Antibiotics.visit)) %>%\n  ggplot(aes(x=MDS1,y=MDS2))+ \n  geom_point(aes(colour = Antibiotics.visit,shape= Disease),size=3) +\n  scale_color_manual(values=c(\"darkgoldenrod1\",\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(3,20,1),name=\"\") +\n  #scale_size_area(range = c(1, 10))+\n  #scale_size_continuous(range = c(3, 10)) +\n  labs(title = 'Ordination bacterial taxa') +\n  ##########################\n  theme_classic()\nprint(p)\nrm(p)\nrm(ind)\nrm(PLEASE.COMBO.centroid.cp1)\nrm(dist.all.cp1)\nrm(meta.MDS.cen)\n```\n\n\n\n### Plot the distance to the COMBO centroid\n```{r plot_distance_to_combo_centroid,cache=TRUE}\n### Plot distance by treatment\np<- sample.info %>% dplyr::select(Type,Distance,Treatment) %>%\n  ggplot(aes(factor(Type),Distance)) + \n  geom_boxplot(aes(fill = factor(Treatment)))+\n  xlab('')+ylab('Distance to the COMBO centroid')\nplot(p)\n\np<- sample.info %>% dplyr::select(Type,Distance,Treatment.Specific) %>%\n  ggplot(aes(factor(Type),Distance)) + \n  geom_boxplot(aes(fill = factor(Treatment.Specific)))+\n  xlab('')+ylab('Distance to the COMBO centroid')\nplot(p)\n\n#### For publication\np<- sample.info %>% dplyr::select(Type,Distance,Treatment.Specific) %>%\n  ggplot(aes(factor(Type),Distance)) + \n  geom_boxplot(aes(fill = factor(Treatment.Specific)),outlier.shape = NA)+\n  xlab('')+ylab('Distance to the COMBO centroid') + \n  theme_classic() \nplot(p)\n\n\n\n#### Plot distance by response\np<- sample.info %>% dplyr::select(Type,Distance,Response) %>%\n  filter(Type=='COMBO' | (Type!='COMBO' & !is.na(Response))) %>%\n  ggplot(aes(factor(Type),Distance)) + \n  geom_boxplot(aes(fill = factor(Response)))+\n  xlab('')+ylab('Distance to the COMBO centroid')\nplot(p)\n\n\n#### Plot distance by treatment,response\np<- sample.info %>% dplyr::select(Type,Distance,Treatment.Specific,Response) %>%\n  mutate(Response=ifelse(Type=='COMBO','COMBO',Response)) %>%\n  mutate(Treatment.Specific=ifelse(Type=='COMBO','COMBO',Treatment.Specific)) %>%\n  na.omit() %>%\n  unite(Treatment.Response, Treatment.Specific,Response, sep = \".\") %>%\n  ggplot(aes(factor(Type),Distance)) + \n  geom_boxplot(aes(fill = factor(Treatment.Response)),outlier.shape = NA)+\n  xlab('')+ylab('Distance to the COMBO centroid') + \n  theme_classic() \nplot(p)\n\n\n### Plot distance by both treatment and response\np<- sample.info %>% dplyr::select(Distance,Response,Time,Treatment) %>%\n  na.omit %>%\n  ggplot( aes(factor(Time), Distance),na.rm=T)+\n  geom_boxplot(na.rm=T)+facet_grid(Treatment ~ Response, margins=TRUE)\nplot(p)\n\n### Plot distance by both treatment(PEN vs. EEN) and response\np<- sample.info %>% dplyr::select(Distance,Response,Time,Treatment.Specific) %>%\n  na.omit %>%\n  ggplot(aes(factor(Time), Distance),na.rm=T)+\n  geom_boxplot(na.rm=T)+facet_grid(Treatment.Specific ~ Response, margins=TRUE)\nplot(p)\n```\n\n\n### Compare distance change between time points \n```{r test_distance_to_combo_centroid, cache=TRUE}\n####  T1 vs. T2,3,4 \nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Distance) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Distance) %>%\n  summarise_each(funs(t.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n\n####  T1 vs. T2,3,4 for each treatment arm\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Distance) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Distance) %>%\n  group_by(Treatment) %>%\n  summarise_each(funs(t.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n####  T1 vs. T2,3,4 for each treatment arm\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment.Specific,Distance) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Distance) %>% \n  group_by(Treatment.Specific) %>%\n  summarise_each(funs(t.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n\n####  T1 vs. T2,3,4 for each treatment arm & response\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Response,Distance) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Distance) %>%\n  group_by(Treatment,Response) %>%\n  summarise_each(funs(t.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n####  T1 vs. T2,3,4 for each treatment arm & response\n####  Not enough sample for PEN\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment.Specific,Response,Distance) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Distance) %>% \n  filter(Treatment.Specific=='EEN') %>%\n  group_by(Treatment.Specific,Response) %>%\n  summarise_each(funs(t.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n```\n\n### Compare distance change on response status\n```{r test_distance_on_response, cache=TRUE}\nttest.fun = function(tdata){ \n  R.vs.NR <- NA\n  try(R.vs.NR <- signif(t.test(Distance~Response,data=tdata)$p.value, 2),silent=TRUE)\n  return(as.data.frame(R.vs.NR))\n}\n\n\n####  R vs. NR: by treatment\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Distance,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Treatment) %>%\n  do(ttest.fun(.)) %>%\n  add_back_rownames(row.var='Treatment')\n\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Distance,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Treatment.Specific) %>%\n  do(ttest.fun(.)) %>%\n  add_back_rownames(row.var='Treatment.Specific')\n\n\n####  R vs. NR: by time\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Distance,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Time) %>%\n  do(ttest.fun(.)) %>%\n  add_back_rownames(row.var='Time')\n\n\n####  R vs. NR: by time & treatment\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Distance,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Time,Treatment) %>%\n  do(ttest.fun(.)) \n\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Distance,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Time,Treatment.Specific) %>%\n  do(ttest.fun(.))\n```\n\n### Compare distance change on treatment\n```{r test_distance_on_treatment, cache=TRUE}\n####  EEN-T1 response vs. control\nsample.info %>%\ndplyr::select(Subject,Type,Treatment.Specific,Distance,Response,Antibiotics.visit) %>% \ndplyr::filter(Type=='COMBO'| (Type=='PLEASE-T1' & Treatment.Specific=='EEN' & Response == 'Response')) %>%\ndplyr::select(Type,Distance,Antibiotics.visit) %>%\nna.omit() %>%\n(function(tdata){\nt.test(Distance~Type,data=tdata)$p.value %>% print\nlm(Distance~Type+Antibiotics.visit,data=tdata) %>% summary %>% coef %>% print\nboxplot(Distance~Type,data=tdata,ylab='Distance')\n})\n\n####  EEN-T4 response vs. control\nsample.info %>%\ndplyr::select(Subject,Type,Treatment.Specific,Distance,Response,Antibiotics.visit) %>% \ndplyr::filter(Type=='COMBO'| (Type=='PLEASE-T4' & Treatment.Specific=='EEN' & Response == 'Response')) %>%\ndplyr::select(Type,Distance,Antibiotics.visit) %>%\nna.omit() %>%\n(function(tdata){\nt.test(Distance~Type,data=tdata)$p.value %>% print\nlm(Distance~Type+Antibiotics.visit,data=tdata) %>% summary %>% coef %>% print\nboxplot(Distance~Type,data=tdata,ylab='Distance')\n})\n\n####  antiTNF-T1 response vs. control\nsample.info %>%\ndplyr::select(Subject,Type,Treatment.Specific,Distance,Response,Antibiotics.visit) %>% \ndplyr::filter(Type=='COMBO'| (Type=='PLEASE-T1' & Treatment.Specific=='antiTNF' & Response == 'Response')) %>%\ndplyr::select(Type,Distance,Antibiotics.visit) %>%\nna.omit() %>%\n(function(tdata){\nt.test(Distance~Type,data=tdata)$p.value %>% print\nlm(Distance~Type+Antibiotics.visit,data=tdata) %>% summary %>% coef %>% print\nboxplot(Distance~Type,data=tdata,ylab='Distance')\n})\n\n####  antiTNF-T4 response vs. control\nsample.info %>%\ndplyr::select(Subject,Type,Treatment.Specific,Distance,Response,Antibiotics.visit) %>% \ndplyr::filter(Type=='COMBO'| (Type=='PLEASE-T4' & Treatment.Specific=='antiTNF' & Response == 'Response')) %>%\ndplyr::select(Type,Distance,Antibiotics.visit) %>%\nna.omit() %>%\n(function(tdata){\nt.test(Distance~Type,data=tdata)$p.value %>% print\nlm(Distance~Type+Antibiotics.visit,data=tdata) %>% summary %>% coef %>% print\nboxplot(Distance~Type,data=tdata,ylab='Distance')\n})\n\n####  antiTNF-T1 response vs. EEN-T1 response\nsample.info %>%\ndplyr::select(Subject,Type,Treatment.Specific,Distance,Response) %>% \ndplyr::filter( (Type=='PLEASE-T1' & Treatment.Specific !='PEN' & Response == 'Response')) %>%\ndplyr::select(Treatment.Specific,Distance) %>%\nna.omit() %>%\n(function(tdata){\nt.test(Distance~Treatment.Specific,data=tdata)$p.value %>% print\nboxplot(Distance~Treatment.Specific,data=tdata,ylab='Distance')\n})\n\n\n####  antiTNF-T4 response vs. EEN-T4 response\nsample.info %>%\ndplyr::select(Subject,Type,Treatment.Specific,Distance,Response) %>% \ndplyr::filter( (Type=='PLEASE-T4' & Treatment.Specific !='PEN' & Response == 'Response')) %>%\ndplyr::select(Treatment.Specific,Distance) %>%\nna.omit() %>%\n(function(tdata){\nt.test(Distance~Treatment.Specific,data=tdata)$p.value %>% print\nboxplot(Distance~Treatment.Specific,data=tdata,ylab='Distance')\n})\n```\n\n\n### Compare distance to healthy controls\n```{r compare_distance_to_healthy_controls,cache=TRUE}\n#### I am goint to re-plot the figure before\n#### Plot distance by treatment,response\np<- sample.info %>% dplyr::select(Type,Distance,Treatment.Specific,Response) %>%\n  mutate(Response=ifelse(Type=='COMBO','COMBO',Response)) %>%\n  mutate(Treatment.Specific=ifelse(Type=='COMBO','COMBO',Treatment.Specific)) %>%\n  na.omit() %>%\n  unite(Treatment.Response, Treatment.Specific,Response, sep = \".\") %>%\n  ggplot(aes(factor(Type),Distance)) + \n  geom_boxplot(aes(fill = factor(Treatment.Response)),outlier.shape = NA)+\n  xlab('')+ylab('Distance to the COMBO centroid') + \n  theme_classic() \nplot(p)\n\n#### Calculate the pvalues for each box in the above figure\nsample.info %>%\ndplyr::select(Type,Time,Treatment.Specific,Distance,Response) %>% \nmutate(Treatment.Specific=ifelse(Type=='COMBO','COMBO',Treatment.Specific)) %>%\nmutate(Response=ifelse(Type=='COMBO','COMBO',Response)) %>%\nmutate(Time=paste('T',Time,sep='')) %>%\nmutate(Time=ifelse(Type=='COMBO','COMBO',Time)) %>%\ndplyr::filter(Treatment.Specific != 'PEN') %>% \nna.omit() %>%\n### group by treatment\n(function(tdata){\n### merge the time and treatment\ntemp <- tdata %>% \nunite(Time.Treatment,Time,Treatment.Specific, sep = \"_\") %>%\ndplyr::select(Time.Treatment,Distance)\n#### take the COMBO samples out, use them in the t.test\ncdata <- dplyr::filter(temp,Time.Treatment=='COMBO_COMBO') %>%\n         dplyr::select(Distance)\n### compare each group to combo group by t.test\ngroup_by(temp,Time.Treatment) %>%\nsummarise(pval.compare.to.combo=t.test(Distance,cdata$Distance)$p.value) %>%\nmutate(pval.compare.to.combo=signif(pval.compare.to.combo,2)) %>%\nseparate(Time.Treatment, into=c(\"Time\",\"Treatment\"), sep = \"_\") %>%\nprint\nreturn(tdata)\n}) %>%\n### group by treatment and response\nunite(Time.Treatment.Response,Time, Treatment.Specific,Response, sep = \"_\") %>%\ndplyr::select(Time.Treatment.Response,Distance) %>%\n(function(tdata){\ncdata <- dplyr::filter(tdata,Time.Treatment.Response=='COMBO_COMBO_COMBO') %>%\n         dplyr::select(Distance)\ngroup_by(tdata,Time.Treatment.Response) %>%\nsummarise(pval.compare.to.combo=t.test(Distance,cdata$Distance)$p.value) %>%\nmutate(pval.compare.to.combo=signif(pval.compare.to.combo,2)) %>%\nseparate(Time.Treatment.Response, into=c(\"Time\",\"Treatment\",\"Response\"), sep = \"_\")\n})\n```\n\n\n\n### Linear regression \n```{r linear_regression_on_distance_to_combo_centroid,cache=TRUE}\n### all, adjust for baseline distance\nlm.all <- sample.info %>%\n  #filter(Treatment=='antiTNF')%>% \n  dplyr::select(Subject, Time, Distance,Response,Antibiotics.visit) %>%\n  na.omit() %>%\n  mutate(Time=paste('Dist_T',Time,sep='')) %>%\n  spread(Time,Distance) %>% \n  lm(Dist_T4~Dist_T1+Response+as.factor(Antibiotics.visit),data=.)\nsummary(lm.all)\ncoefplot(lm.all)\n\n### antiTNF, adjust for baseline distance\nlm.antiTNF <- sample.info %>%\n  filter(Treatment=='antiTNF')%>% \n  dplyr::select(Subject, Time, Distance,Response,Antibiotics.visit) %>%\n  na.omit() %>%\n  mutate(Time=paste('Dist_T',Time,sep='')) %>%\n  spread(Time,Distance) %>% \n  lm(Dist_T4~Dist_T1+Response+as.factor(Antibiotics.visit),data=.)\nsummary(lm.antiTNF)\ncoefplot(lm.antiTNF)\n\n### Diet \nlm.Diet <- sample.info %>%\n  filter(Treatment=='Diet')%>% \n  dplyr::select(Subject, Time, Distance,Response,Antibiotics.visit) %>%\n  na.omit() %>%\n  mutate(Time=paste('Dist_T',Time,sep='')) %>%\n  spread(Time,Distance) %>% \n  lm(Dist_T4~Dist_T1+Response+as.factor(Antibiotics.visit),data=.)\nsummary(lm.Diet)\ncoefplot(lm.Diet)\n\n### EEN\nlm.EEN <- sample.info %>%\n  filter(Treatment.Specific=='EEN')%>% \n  dplyr::select(Subject, Time, Distance,Response,Antibiotics.visit) %>%\n  na.omit() %>%\n  mutate(Time=paste('Dist_T',Time,sep='')) %>%\n  spread(Time,Distance) %>% \n  lm(Dist_T4~Dist_T1+Response+as.factor(Antibiotics.visit),data=.)\nsummary(lm.EEN)\ncoefplot(lm.EEN)\n\n### PEN \nlm.PEN <- sample.info %>%\n  filter(Treatment.Specific=='PEN')%>% \n  dplyr::select(Subject, Time, Distance,Response,Antibiotics.visit) %>%\n  na.omit() %>%\n  mutate(Time=paste('Dist_T',Time,sep='')) %>%\n  spread(Time,Distance) %>% \n  lm(Dist_T4~Dist_T1+Response+as.factor(Antibiotics.visit),data=.)\nsummary(lm.PEN)\ncoefplot(lm.PEN)\n\n\n####################################\n### plot all coefficients in one plot\n### the order is from bottom to top\ncoefplot(lm.all, xlim=c(-1, 1),  col.pts=\"black\",intercept=TRUE)\ncoefplot(lm.antiTNF, add=TRUE, col.pts=\"red\",  intercept=TRUE)\ncoefplot(lm.EEN, add=TRUE, col.pts=\"blue\", intercept=TRUE, offset=0.2)\nlegend('topright',legend=c('All','antiTNF','EEN'),col=c(\"black\",\"red\",\"blue\"),pch=19)\n```\n\n\n\n\n\n\n## Diversity\n```{r calculate_diversity,cache=TRUE,eval=FALSE,include=FALSE}\n### calculate shannon diversity\n###\n### !!! use raw metaphlan data (raw data) to calcualte the diversity\n###\nbact.div <- as.data.frame(apply(taxa.rare,1,function(x){-sum(x/100*log(x/100),na.rm=TRUE)}))\ncolnames(bact.div) <- 'bact.div'\n\n```\n\nRarefraction\n```{r rarefraction,cache=TRUE}\ntaxa.rare <- as.data.frame(taxa.rare.raw) %>%\nadd_rownames(var='Name') %>%\nseparate(Name,into=c('Sample','Reads','Depth','Repeats','Repeat'),sep='_') %>%\ndplyr::select(-Reads,-Repeats) %>%\ngroup_by(Sample,Depth) %>%\nsummarise_each(funs(mean),3+(1:ncol(taxa.rare.raw)))%>%\n(function(tdata){\n  print(tdata %>% dplyr::select(Sample,Depth) %>% group_by(Depth) %>% summarize(Num=n()) %>% arrange(Num))\n  return(tdata)\n}) %>%\ndplyr::filter(Depth=='100000') %>%\ndplyr::select(-Depth) %>%\nadd_back_rownames(row.var='Sample')\n```\n\n\n\n```{r unweighted_phylogenetic_diversity,cache=FALSE,eval=FALSE,include=FALSE}\n### calculate phylogenetic diversity\nbact.comm <- taxa.rare\nphylo.tree.pru <- prune.sample(bact.comm,phylo.tree.uniq)\n### plot tree\n#for (i in row.names(taxa.raw)) {\n#     plot(phylo.tree.pru, show.tip.label = FALSE, main = i)\n#     tiplabels(tip = which(phylo.tree.pru$tip.label %in% names(which(taxa.raw[i,]> 0))), pch = 19, cex = 2)\n# }\nphylo.div <- pd(bact.comm, phylo.tree.pru, include.root = TRUE)\n\nbact.div <- phylo.div[,'PD',drop=F] ## SR: species richness\ncolnames(bact.div) <- 'bact.div'\n```\n\n\n```{r abundance_weighted_phylogenetic_diversity,cache=TRUE,eval=TRUE,include=TRUE}\n### got an error when using the species level PhyloPhAn tree\n###\n### calculate abundance-weighted phylogenetic diversity\nbact.comm <- taxa.raw\nphylo.tree.pru <- prune.sample(bact.comm,phylo.tree.uniq)\nbranches <- as.data.frame(matrix(NA,ncol=4,nrow=nrow(phylo.tree.pru$edge)))\nbranches[,1:2] <- phylo.tree.pru$edge\nbranches[,3] <- phylo.tree.pru$edge.length\n##############################\nwpd <- matrix(NA,ncol=1,nrow=nrow(taxa.raw))\nrownames(wpd) <- rownames(taxa.raw)\nfor (j in 1:nrow(wpd)){\n  for (i in 1:nrow(branches)){\n    #print(c(j,i))\n    leaves.node <- tips(phylo.tree.pru,branches[i,2])\n    branches[i,4] <- mean(bact.comm[j,leaves.node]/100) ## in x% scale\n  }\n  number.of.branches <- nrow(phylo.tree.pru$edge)\n  denominator <- sum(branches[,4],na.rm=TRUE)\n  numerator <- sum(branches[,3]*branches[,4],na.rm=TRUE)\n  wpd[j,1] <- number.of.branches * numerator / denominator\n  #break\n}\nbact.div <- as.data.frame(wpd)\ncolnames(bact.div) <- 'bact.div'\n```\n\n\n```{r plot_phylogenetic_tree,include=TRUE,eval=TRUE,fig.height=20}\n#pdf('PhyloPhlAn_tree.pdf',height=500,width=10)\nplot(phylo.tree.pru,cex=0.5)\n#dev.off()\n```\n\n\n\n```{r add_diversity_to_sample_info,cache=TRUE}\n### Add diversity to the sample information\nsample.info <- add_rownames(sample.info,var='Sample') %>%\n  left_join(add_rownames(as.data.frame(bact.div),var='Sample'),by='Sample') %>%\n  rename(Bact.Div=bact.div) %>%\n  add_back_rownames(row.var='Sample')\n\n##############################\n### save the sample information\n### again\nwrite.csv(sample.info,file=paste('../1_Data/Processed_Data/Sample_Information/2015_02_13_Processed_Sample_Information.csv',sep=''),row.names=TRUE)\n```\n\n\n\nPlot the correlation between total non-human reads vs. diversity to see if they are correlated.\n```{r correlation_between_diversity_and_non_human_reads,cache=TRUE}\n### check the distribution of the diversity\nhist(bact.div$bact.div,xlab='Diversity',main='',breaks=20)\n#hist(log(bact.div$bact.div),xlab='log phylogenetic diversity',main='',breaks=20)\n\n####\nadd_rownames(bact.div,var='Sample') %>%\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \n  dplyr::select(bact.div,NonHumanReads) %>%\n  mutate(log10.NonHumanReads=log10(NonHumanReads)) %>%\n  na.omit() %>%  \n  (function(dat){\n    plot(bact.div~log10.NonHumanReads,data=dat)\n    mtext(paste('Rank cor =',\n                signif(cor(dat$bact.div,dat$log10.NonHumanReads,method='spearman'),2),\n                'P =',\n                signif(cor.test(dat$bact.div,dat$log10.NonHumanReads,method='spearman')$p.value,2)\n                ))\n  })\n```\n\nPlot the correlation between FCP vs. diversity to see if they are correlated.\n```{r correlation_between_diversity_and_fcp,cache=TRUE}\n### all\nadd_rownames(bact.div,var='Sample') %>%\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \n  dplyr::select(bact.div,log.FCP) %>%\n  na.omit() %>%  \n  (function(dat){\n    plot(bact.div~log.FCP,data=dat)\n    mtext(paste('Rank cor =',\n                signif(cor(dat$bact.div,dat$log.FCP,method='spearman'),2),\n                'P =',\n                signif(cor.test(dat$bact.div,dat$log.FCP,method='spearman')$p.value,2)\n    ))\n  })\n\n### antiTNF response\nadd_rownames(bact.div,var='Sample') %>%\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \n  dplyr::filter(Treatment=='antiTNF',Response=='Response') %>%\n  dplyr::select(bact.div,log.FCP) %>%\n  na.omit() %>%  \n  (function(dat){\n    plot(bact.div~log.FCP,data=dat)\n    mtext(paste('Rank cor =',\n                signif(cor(dat$bact.div,dat$log.FCP,method='spearman'),2),\n                'P =',\n                signif(cor.test(dat$bact.div,dat$log.FCP,method='spearman')$p.value,2)\n    ))\n  })\n```\n\n\n\n```{r diversity_change_aross_time,eval=FALSE,include=FALSE}\nadd_rownames(bact.div,var='Sample') %>%\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \n  dplyr::filter(Response=='Response') %>%\n  dplyr::select(Subject,bact.div,Time,Treatment.Specific) %>%\n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  #spread(Time,bact.div) %>%\n  #head\n  ggplot(aes(Time,bact.div,group=Subject,color=Treatment.Specific),data=.) + geom_line(alpha = 0.5)\n```\n\n\n\n```{r plot_diversity,cache=FALSE}\n### normal vs. crohn-T1\ntem <- wilcox_test(data.matrix=bact.div,label.matrix=subset(sample.info,Type=='COMBO' | (Type == 'PLEASE-T1'),select=Type),plot.heatmap=FALSE,boxplot.top=2,boxplot.y='Diversity')\n \n\n### normal vs. cluster1\ntem <- wilcox_test(data.matrix=bact.div,label.matrix=subset(sample.info,Type=='COMBO' | (Type == 'PLEASE-T1' & Cluster =='cluster 1' ),select=Type),plot.heatmap=FALSE,boxplot.top=2,boxplot.y='Diversity')\n\n### normal vs. cluster2\ntem <- wilcox_test(data.matrix=bact.div,label.matrix=subset(sample.info,Type=='COMBO' | (Type == 'PLEASE-T1' & Cluster =='cluster 2' ),select=Type),plot.heatmap=FALSE,boxplot.top=2,boxplot.y='Diversity')\n\n### cluster 1 vs. 2 (both COMBO and PLEASE-T1)\ntem <- wilcox_test(data.matrix=bact.div,label.matrix=subset(sample.info,Type=='COMBO' | (Type == 'PLEASE-T1' & Antibiotics.visit=='Not.Use'),select=Cluster),plot.heatmap=FALSE,boxplot.top=2,boxplot.y='Diversity')\n\n### cluster 1 vs. 2 (only PLEASE-T1)\ntem <- wilcox_test(data.matrix=bact.div,label.matrix=subset(sample.info,Type == 'PLEASE-T1',select=Cluster),plot.heatmap=FALSE,boxplot.top=2,boxplot.y='Diversity')\n\n\n### treatment and response\np <- add_rownames(bact.div,var='Sample') %>%\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \n  dplyr::select(bact.div,Treatment,Response, Time) %>%\n  na.omit() %>%  \n  ggplot(aes(factor(Time),bact.div),na.rm=T) +\n  geom_boxplot(na.rm=T)+facet_grid(Treatment ~ Response, margins=TRUE)\nplot(p)\n\n### specific treatment and response\np <- add_rownames(bact.div,var='Sample') %>%\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \n  dplyr::select(bact.div,Treatment.Specific,Response, Time) %>%\n  na.omit() %>%  \n  ggplot(aes(factor(Time),bact.div),na.rm=T) +\n  geom_boxplot(na.rm=T)+facet_grid(Treatment.Specific ~ Response, margins=TRUE)\nplot(p)\n```\n\n### Compare diversity change between time points \n```{r test_diversity_by_time, cache=TRUE,eval=FALSE}\n####  T1 vs. T2,3,4 \nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Bact.Div) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Bact.Div) %>%\n  summarise_each(funs(t.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n\n####  T1 vs. T2,3,4 for each treatment arm\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Bact.Div) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Bact.Div) %>%\n  group_by(Treatment) %>%\n  summarise_each(funs(t.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n####  T1 vs. T2,3,4 for each treatment arm\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment.Specific,Bact.Div) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Bact.Div) %>% \n  group_by(Treatment.Specific) %>%\n  summarise_each(funs(t.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n\n####  T1 vs. T2,3,4 for each treatment arm & response\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Response,Bact.Div) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Bact.Div) %>%\n  group_by(Treatment,Response) %>%\n  summarise_each(funs(t.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n####  T1 vs. T2,3,4 for each treatment arm & response\n####  Not enough sample for PEN\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment.Specific,Response,Bact.Div) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Bact.Div) %>% \n  filter(Treatment.Specific=='EEN') %>%\n  group_by(Treatment.Specific,Response) %>%\n  summarise_each(funs(t.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n```\n\n### Compare diversity change on response status\n```{r test_diversity_on_response, cache=TRUE,eval=FALSE}\nttest.fun = function(tdata){ \n  R.vs.NR <- NA\n  try(R.vs.NR <- signif(t.test(Bact.Div~Response,data=tdata)$p.value, 2),silent=TRUE)\n  return(as.data.frame(R.vs.NR))\n}\n\n\n####  R vs. NR: by treatment\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Bact.Div,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Treatment) %>%\n  do(ttest.fun(.)) %>%\n  add_back_rownames(row.var='Treatment')\n\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Bact.Div,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Treatment.Specific) %>%\n  do(ttest.fun(.)) %>%\n  add_back_rownames(row.var='Treatment.Specific')\n\n\n####  R vs. NR: by time\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Bact.Div,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Time) %>%\n  do(ttest.fun(.)) %>%\n  add_back_rownames(row.var='Time')\n\n\n####  R vs. NR: by time & treatment\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Bact.Div,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Time,Treatment) %>%\n  do(ttest.fun(.)) \n\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Bact.Div,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Time,Treatment.Specific) %>%\n  do(ttest.fun(.))\n```\n\n\n\n\n### Linear regression \n```{r linear_regression_on_diversity,cache=TRUE,eval=FALSE}\n### all, adjust for baseline \nlm.all <- sample.info %>%\n  #filter(Treatment=='antiTNF')%>% \n  dplyr::select(Subject, Time, Bact.Div,Response,Antibiotics.visit) %>%\n  na.omit() %>%\n  mutate(Time=paste('Div_T',Time,sep='')) %>%\n  spread(Time,Bact.Div) %>% \n  lm(Div_T4~Div_T1+Response+as.factor(Antibiotics.visit),data=.)\nsummary(lm.all)\ncoefplot(lm.all)\n\n### antiTNF, adjust for baseline distance\nlm.antiTNF <- sample.info %>%\n  filter(Treatment=='antiTNF')%>% \n  dplyr::select(Subject, Time, Bact.Div,Response,Antibiotics.visit) %>%\n  na.omit() %>%\n  mutate(Time=paste('Div_T',Time,sep='')) %>%\n  spread(Time,Bact.Div) %>% \n  lm(Div_T4~Div_T1+Response+as.factor(Antibiotics.visit),data=.)\nsummary(lm.antiTNF)\ncoefplot(lm.antiTNF)\n\n### Diet \nlm.Diet <- sample.info %>%\n  filter(Treatment=='Diet')%>% \n  dplyr::select(Subject, Time, Bact.Div,Response,Antibiotics.visit) %>%\n  na.omit() %>%\n  mutate(Time=paste('Div_T',Time,sep='')) %>%\n  spread(Time,Bact.Div) %>% \n  lm(Div_T4~Div_T1+Response+as.factor(Antibiotics.visit),data=.)\nsummary(lm.Diet)\ncoefplot(lm.Diet)\n\n### EEN\nlm.EEN <- sample.info %>%\n  filter(Treatment.Specific=='EEN')%>% \n  dplyr::select(Subject, Time, Bact.Div,Response,Antibiotics.visit) %>%\n  na.omit() %>%\n  mutate(Time=paste('Div_T',Time,sep='')) %>%\n  spread(Time,Bact.Div) %>% \n  lm(Div_T4~Div_T1+Response+as.factor(Antibiotics.visit),data=.)\nsummary(lm.EEN)\ncoefplot(lm.EEN)\n\n### PEN \nlm.PEN <- sample.info %>%\n  filter(Treatment.Specific=='PEN')%>% \n  dplyr::select(Subject, Time, Bact.Div,Response,Antibiotics.visit) %>%\n  na.omit() %>%\n  mutate(Time=paste('Div_T',Time,sep='')) %>%\n  spread(Time,Bact.Div) %>% \n  lm(Div_T4~Div_T1+Response+as.factor(Antibiotics.visit),data=.)\nsummary(lm.PEN)\ncoefplot(lm.PEN)\n\n```\n\n\n### Batch effect of the two clusters\n```{r batch_effect,cache=TRUE}\nPlate.file <- '../1_Data/Raw_Data/Plate_Information/Plate_Source_for_Samples.txt'\nPlate <- read.table(Plate.file,sep='\\t',header=TRUE,check.names=FALSE,stringsAsFactors=FALSE)\n\nadd_rownames(sample.info,var='Sample') %>%\nleft_join(Plate,by='Sample') %>%\ngroup_by(Cluster,Plate) %>%\nsummarize(N=n()) %>%\nna.omit() %>%\nspread(Plate, N) %>%\nadd_back_rownames(row.var='Cluster') %>%\nchisq.test()\n## not significant\n## p-value = 0.09816\n```\n\n# Analyze bacterial data (species level)\n\n## Load data\n```{r species_load_bacterial_data, cache=TRUE}\nPLEASE.file <- paste('../1_Data/Raw_Data/MetaPhlAn/PLEASE/','S', '_Remove_unclassfied_Renormalized_Merge_Rel_MetaPhlAn_Result.xls',sep='')\nPLEASE.raw <- read.table(PLEASE.file,sep='\\t',header=TRUE,row.names = 1,check.names=FALSE,stringsAsFactors=FALSE)\nPLEASE.raw <- t(PLEASE.raw)\ncat('samples','taxa',dim(PLEASE.raw),'\\n')\nPLEASE.raw[1:3,1:3]\n\n\nCOMBO.file <- paste('../1_Data/Raw_Data/MetaPhlAn/COMBO/','S',\n'_Remove_unclassfied_Renormalized_Merge_Rel_MetaPhlAn_Result.xls',sep='')\nCOMBO.raw <- read.table(COMBO.file,sep='\\t',header=TRUE,row.names = 1,check.names=FALSE,stringsAsFactors=FALSE)\nCOMBO.raw <- t(COMBO.raw)\ncat('samples','taxa',dim(COMBO.raw),'\\n')\nCOMBO.raw[1:3,1:3]\n\nrm(PLEASE.file)\nrm(COMBO.file)\n```\n\n### Merge PLEASE data and COMBO data. \n```{r species_merge_please_combo_data, cache=TRUE}\nspecies.raw <- merge_two_tables(COMBO.raw,PLEASE.raw,\n                             fill.zero = TRUE,rnames = 'union',cnames = 'union')\ncat('samples','species',dim(species.raw),'\\n')\nspecies.raw[1:3,1:3]\n```\n\n### Filter low depth samples\nFilter out low sequencing depth samples.Filter out samples with non-humand reads < 30000.\n```{r species_filter_low_depth_samples,cache=TRUE}\nlow.depth.samples <- subset(human.read,NonHumanReads<30000)\nlow.depth.samples[,1:5]\n### Delete these samples from PLEASE data.\n### Due to the low sequencing depth, some of the samples have no MetaPhlAn output\n### These are the samples with MetaPhlAn output but also low sequencing\nrownames(species.raw)[which(rownames(species.raw) %in% rownames(low.depth.samples))]\n### Before deletion\ndim(species.raw)\n### After deletion\nspecies.raw <- species.raw[-which(rownames(species.raw) %in% rownames(low.depth.samples)),]\ndim(species.raw)\n\nrm(low.depth.samples)\n```\n\n### Filter low abundant bacterial data\nFilter low abundant bacteria. I'm going to filter out the low abundant species.The species must present in at least 10% of the samples and the max abundance across samples must large than 1%. Renormalize the species abundance so that the sum of the species abundance is 100 (%)\n```{r species_filter_low_abundant_bacteria, cache=TRUE, fig.width=4,fig.height=4}\nfilter.index1 <- apply(species.raw,2,function(X){sum(X>0)>0.1*length(X)})\nfilter.index2 <- apply(species.raw,2,function(X){max(X)>1})\nspecies.filter <- species.raw[,filter.index1 & filter.index2]\nspecies.filter <- 100*sweep(species.filter, 1, rowSums(species.filter), FUN=\"/\")\ncat('after filter:','samples','taxa',dim(species.filter),'\\n')\nhead(rowSums(species.filter))\n\n## Did the filtering process change the abundance ?\nplot(species.raw[,colnames(species.filter)],species.filter,\nxlab='before filtering',ylab='after filtering')\n\nrm(filter.index1)\nrm(filter.index2)\n```\n\n\n```{r species_save_processed_taxa_abundance_data,cache=TRUE}\n### save the processed taxa abundance\nwrite.csv(species.filter,file=paste('../1_Data/Processed_Data/MetaPhlAn/','S','_Processed_MetaPhlAn_Abundance.csv',sep=''))\n\n### Remove s__ before the taxa name\ncolnames(species.filter) <- colsplit(colnames(species.filter), '__', c('V1','V2'))[,'V2']\n\n####### change the variable name\nspecies.data <- as.data.frame(species.filter)\n\nrm(species.filter)\n```\n\n\n## Normal vs. crohn-T1\n```{r species_bacteria_normal_vs_crohn_t1,cache=TRUE}\n### I don't use dplyr filter \n### because it will remove the row names\nspecies.cp1 <- subset_data_by_sample_info(species.data,sample.info,\n                                       Type=='COMBO' | Type=='PLEASE-T1')\n```\n\n### Calculate distance\n```{r species_bacteria_calculate_distance,cache=TRUE}\nspecies.dist <- calculate_distance(X = species.data, method = bacteral.distance.method, tree = NA)\n```\n\n```{r species_bacteria_calculate_distance_cp1,cache=TRUE}\nspecies.dist.cp1 <- calculate_distance(X = species.cp1, method = bacteral.distance.method, tree = NA)\n```\n\n### Find the best clustering\n```{r species_bacteria_find_the_best_clustering,cache=TRUE}\n#pdf('best_cluster.pdf')\npamk.best <- find_best_clustering(species.dist.cp1,plot.results=TRUE)\n#dev.off()\n```\n\n```{r species_update_cluster_info_and_save_sample_informaion,cache=TRUE}\n### rename does not work\nclustering.res <- as.data.frame(pamk.best$pamobject$clustering)\ncolnames(clustering.res) <- 'Species.Cluster'\n### add clustering result to sample information\n### only T1 samples are in the clustering result\nsample.info <- \n  add_rownames(clustering.res,var='Sample') %>%\n  separate(col=Sample,into=c(\"Subject\", \"Time\"),sep='-',extra='drop' ) %>%\n  dplyr::select(Subject,Species.Cluster) %>%\n  right_join(add_rownames(sample.info,var='Sample'),by = c('Subject')) %>% #head  \n  mutate(Species.Cluster=ifelse(Species.Cluster==1,'cluster 1','cluster 2')) %>% #head\n  add_back_rownames(row.var='Sample') \n\n\n##############################\n### save the sample information\nwrite.csv(sample.info,file=paste('../1_Data/Processed_Data/Sample_Information/2015_02_13_Processed_Sample_Information.csv',sep=''),row.names=TRUE)\n\nrm(clustering.res)\nrm(pamk.best)\n```\n\n### MDS analysis\n```{r species_bacteria_MDS,cache=TRUE,results='hide'}\n### MDS\nset.seed(10)\nmeta.MDS <- metaMDS(species.dist.cp1)\n\n### Normal/Disease\np <- add_rownames(as.data.frame(meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ geom_point(aes(colour = Disease)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  labs(title = 'metaMDS') \nprint(p)\n\n### Normal/Disease, cluster\np <- add_rownames(as.data.frame(meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Species.Cluster),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ geom_point(aes(colour = Disease,shape=Species.Cluster)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,4),name=\"\") +\n  labs(title = 'metaMDS') \nprint(p)\n\n#### Fugal percentage \np <- add_rownames(as.data.frame(meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Species.Cluster,Fungi.Per),\n            by='Sample') %>% \n  mutate(Fungi.Per.sqrt=sqrt(Fungi.Per)) %>%\n  ggplot(aes(x=MDS1,y=MDS2))+ \n  geom_point(aes(colour = Disease,shape=Species.Cluster,size = Fungi.Per.sqrt)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  scale_size_area()+\n  labs(title = 'metaMDS') \nprint(p)\n\n\n#### Human DNA percentage\np <- add_rownames(as.data.frame(meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Species.Cluster,Human.Per),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ \n  geom_point(aes(colour = Disease,shape=Species.Cluster,size = Human.Per)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  scale_size_area()+\n  labs(title = 'metaMDS') \nprint(p)\n\n#### Human DNA percentage (for publication)\np <- add_rownames(as.data.frame(meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Species.Cluster,Human.Per),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ \n  geom_point(aes(colour = Species.Cluster,shape= Disease,size = Human.Per)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  #scale_size_area(range = c(1, 10))+\n  scale_size_continuous(range = c(3, 10)) +\n  labs(title = 'Ordination bacterial taxa') +\n  ##########################\n  theme_classic()\nprint(p)\n\n### Figure for Rick\n### we start with the same MDS as in 1B, but don't show human DNA or near and far cluster.  Control is shown as the filled circle, Crohn's as open circles.  Current antibiotic use is shown by blue versus red coloring.  If not too hard, maybe also plot the centroid of the healties as a large yellow triangle.\np <- add_rownames(as.data.frame(meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Antibiotics.visit),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ \n  geom_point(aes(colour = Antibiotics.visit,shape= Disease),size=3) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  #scale_size_area(range = c(1, 10))+\n  #scale_size_continuous(range = c(3, 10)) +\n  labs(title = 'Ordination bacterial taxa') +\n  ##########################\n  theme_classic()\nprint(p)\n\n\n#### Fugal percentage and Human DNA percentage\np <- add_rownames(as.data.frame(meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Species.Cluster,Human.Per,Fungi.Per),\n            by='Sample') %>% \n  mutate(Fungi.Per.sqrt=sqrt(Fungi.Per)) %>%\n  ggplot(aes(x=MDS1,y=MDS2,colour=Human.Per,shape=Species.Cluster))+ \n  geom_point(aes(size = Fungi.Per.sqrt)) + scale_size_area()+\n  scale_colour_gradient(low = \"#43a2ca\",high=\"#de2d26\")+ \n  scale_shape_manual(values=c(20,1),name=\"\") + labs(title = 'metaMDS')\nprint(p)\n\n### switch human and fungi \np <- add_rownames(as.data.frame(meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Species.Cluster,Human.Per,Fungi.Per),\n            by='Sample') %>% \n  mutate(Fungi.Per.sqrt=sqrt(Fungi.Per)) %>%\n  ggplot(aes(x=MDS1,y=MDS2,colour=Fungi.Per.sqrt,shape=Species.Cluster))+ \n  geom_point(aes(size = Human.Per)) + scale_size_area()+\n  scale_colour_gradient(low = \"#43a2ca\",high=\"#de2d26\")+ \n  scale_shape_manual(values=c(20,1),name=\"\") + labs(title = 'metaMDS')\nprint(p)\n\nrm(meta.MDS)\n```\n\n\n\n### Wilcoxon rank test of normal vs. Crohn\n```{r species_bacteria_rank_test_of_normal_vs_crohn,cache=TRUE}\n### only plot the top 5 significant ones\nspecies.cp1.wil <- wilcox_test(species.cp1,sample.info[,'Disease',drop=FALSE],\n                            plot.heatmap=FALSE,boxplot.top=0.05,boxplot.y='Abundance(%)')\n###\n## write.csv(species.cp1.wil,file=paste('../3_Result/2015_03_05_Species_Bacteria_COMBO_vs_PLEASET1_Wilcox.csv',sep=''),row.names=TRUE)\n```\n\n### Wilcoxon rank test of normal vs. Crohn without antibiotics use\n```{r species_bacteria_rank_test_of_normal_vs_crohn_without_antibiotics_use,cache=TRUE}\n### only plot the top 5 significant ones\nspecies.cp1.noabx.wil <- wilcox_test(species.cp1,\n              subset(sample.info,Antibiotics.visit=='Not.Use',select=Disease),\n              plot.heatmap=FALSE,boxplot.top=0.05,boxplot.y='Abundance(%)')\n###\n### write.csv(species.cp1.noabx.wil,file=paste('../3_Result/2015_03_05_Species_Bacteria_COMBO_vs_PLEASET1_No_Abx_Wilcox.csv',sep=''),row.names=TRUE)\n```\n\n\n## Cluster 1 vs. cluster 2\n\n### Wilcoxon rank test \n```{r species_bacteria_rank_test_of_cluster_1_vs_2,cache=TRUE}\n### plot all the significant ones\nspecies.c1c2.wil <- wilcox_test(species.cp1,\n                             subset(sample.info,Group=='PLEASE',select=Species.Cluster),\n                             plot.heatmap=FALSE,boxplot.top=0.05,boxplot.y='Abundance(%)')      \n###\n## write.csv(species.c1c2.wil,file=paste('../3_Result/2015_03_05_Species_Bacteria_PLEASE_Cluster_1_2_Wilcox.csv',sep=''),row.names=TRUE)\n```\n\n\n### Heatmap: normal vs. disease and cluster 1 vs. 2 (new label)\n```{r species_bacteria_heatmap_manually_order_samples_normal_disease_cluster1_2,cache=TRUE,fig.width=8,fig.height=8}\n#### manually re-order the samples\ndata.heat <- \n  add_rownames(as.data.frame(species.cp1.wil),var='Taxa') %>%\n  left_join(add_rownames(as.data.frame( species.c1c2.wil),var='Taxa'),by='Taxa') %>%\n  mutate(Disease=ifelse(Disease.qvalue<0.05,'*',' '),\n         Species.Cluster=ifelse(Species.Cluster.qvalue<0.05,'+',' ')\n  ) %>%\n  mutate(Tnames=paste(Taxa,Disease,Species.Cluster,sep=''))%>%\n  dplyr::select(Taxa,Tnames) %>%\n  right_join( add_rownames(as.data.frame(t(species.cp1)),var='Taxa'),by='Taxa') %>%\n  dplyr::select(-Taxa) %>%\n  add_back_rownames(row.var='Tnames') %>%\n  t() %>%\n  as.data.frame %>%\n  add_rownames(var='Sample') %>%\n  ##\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \n  arrange(Disease,Species.Cluster,Response,Treatment.Specific,Antibiotics.visit,FCP,Steroids) %>%\n  dplyr::select(1:(ncol(species.cp1)+1)) %>%  ## first column is sample name\n  add_back_rownames(row.var='Sample') \n\n\n### * disease.q < 0.05\n### + cluster.q < 0.05\nbk <- unique(c(\n        0,\n        min(min(species.data[species.data>0])/2,0.1),\n        seq(min(min(species.data[species.data>0])/2,1),0.1,length=10),\n        seq(0.1,1,length=10),\n        seq(1,5,length=10),\n        seq(5,20,length=20),\n        seq(20,50,length=20),\n        seq(50,100,length=20)\n        ))\nhmcols<- colorRampPalette(c('white','#1f78b4','#ff7f00','#e41a1c'))(length(bk)-1)\n\npheatmap(t(data.heat),border_color=\"grey60\",\n         cluster_cols = FALSE,\n         clustering_distance_rows = 'correlation',\n         #clustering_distance_cols = bact.dist.cp1,\n         clustering_method = \"complete\",\n         annotation=sample.info[,c(\"Disease\",\"Species.Cluster\",\"Response\",\"Treatment.Specific\",\"FCP\",\"Antibiotics.visit\",\"Steroids\")],\n         color =hmcols, breaks=bk,\n         show_rownames = TRUE,\n         scale=\"none\")\n\nrm(data.heat)\n```\n\n\n\n## Distance-based analysis\n### Calculate the distance to COMBO centroid\n```{r species_bacteria_calculate_distance_to_combo_centroid,cache=TRUE}\n## use mean\nspecies.COMBO.centroid <- apply(subset_data_by_sample_info(species.data,sample.info,Type=='COMBO'),2,mean)\nhead(species.COMBO.centroid)\nspecies.PLEASE.COMBO.centroid <- rbind(species.data, species.COMBO.centroid=species.COMBO.centroid)\nspecies.dist.all <- calculate_distance(X = species.PLEASE.COMBO.centroid, method = bacteral.distance.method)\n\n### Get the distance to the COMBO centroid for all samples\nspecies.dist.all.mat <- as.matrix(species.dist.all)\nspecies.dist.to.cen <- species.dist.all.mat[-which(colnames(species.dist.all.mat)=='species.COMBO.centroid'),\"species.COMBO.centroid\",drop=FALSE]\ncolnames(species.dist.to.cen) <- 'Species.Distance'\n### Check the data maniputation\n####Before data manipulation\nspecies.dist.all.mat[\"5001-01\",\"species.COMBO.centroid\"]\n####After data manipulation\nspecies.dist.to.cen[\"5001-01\",]\n\n\ndim(species.dist.to.cen)\n\n### What is the distribution of the distance    \n### The data looks normal, we can use t.test in the following analysis\nhist(species.dist.to.cen,xlab='Distance to the COMBO centroid',breaks=20,main='')\n\n### Add distance information to the sample information\nsample.info <- add_rownames(sample.info,var='Sample') %>%\n  left_join(add_rownames(as.data.frame(species.dist.to.cen),var='Sample'),by='Sample') %>%\n  add_back_rownames(row.var='Sample')\n\n\n##############################\n### save the sample information\n### again\nwrite.csv(sample.info,file=paste('../1_Data/Processed_Data/Sample_Information/2015_02_13_Processed_Sample_Information.csv',sep=''),row.names=TRUE)\n```\n \n\n\n### Plot the distance to the COMBO centroid\n```{r species_plot_distance_to_combo_centroid,cache=TRUE}\n### Plot distance by treatment\np<- sample.info %>% dplyr::select(Type,Species.Distance,Treatment) %>%\n  ggplot(aes(factor(Type),Species.Distance)) + \n  geom_boxplot(aes(fill = factor(Treatment)))+\n  xlab('')+ylab('Distance to the COMBO centroid')\nplot(p)\n\np<- sample.info %>% dplyr::select(Type,Species.Distance,Treatment.Specific) %>%\n  ggplot(aes(factor(Type),Species.Distance)) + \n  geom_boxplot(aes(fill = factor(Treatment.Specific)))+\n  xlab('')+ylab('Distance to the COMBO centroid')\nplot(p)\n\n#### For publication\np<- sample.info %>% dplyr::select(Type,Species.Distance,Treatment.Specific) %>%\n  ggplot(aes(factor(Type),Species.Distance)) + \n  geom_boxplot(aes(fill = factor(Treatment.Specific)),outlier.shape = NA)+\n  xlab('')+ylab('Distance to the COMBO centroid') + \n  theme_classic() \nplot(p)\n\n\n#### Plot distance by response\np<- sample.info %>% dplyr::select(Type,Species.Distance,Response) %>%\n  filter(Type=='COMBO' | (Type!='COMBO' & !is.na(Response))) %>%\n  ggplot(aes(factor(Type),Species.Distance)) + \n  geom_boxplot(aes(fill = factor(Response)))+\n  xlab('')+ylab('Distance to the COMBO centroid')\nplot(p)\n\n\n#### Plot distance by treatment,response\np<- sample.info %>% dplyr::select(Type,Species.Distance,Treatment.Specific,Response) %>%\n  mutate(Response=ifelse(Type=='COMBO','COMBO',Response)) %>%\n  mutate(Treatment.Specific=ifelse(Type=='COMBO','COMBO',Treatment.Specific)) %>%\n  na.omit() %>%\n  unite(Treatment.Response, Treatment.Specific,Response, sep = \".\") %>%\n  ggplot(aes(factor(Type),Species.Distance)) + \n  geom_boxplot(aes(fill = factor(Treatment.Response)),outlier.shape = NA)+\n  xlab('')+ylab('Distance to the COMBO centroid') + \n  theme_classic() \nplot(p)\n\n\n### Plot distance by both treatment and response\np<- sample.info %>% dplyr::select(Species.Distance,Response,Time,Treatment) %>%\n  na.omit %>%\n  ggplot( aes(factor(Time), Species.Distance),na.rm=T)+\n  geom_boxplot(na.rm=T)+facet_grid(Treatment ~ Response, margins=TRUE)\nplot(p)\n\n### Plot distance by both treatment(PEN vs. EEN) and response\np<- sample.info %>% dplyr::select(Species.Distance,Response,Time,Treatment.Specific) %>%\n  na.omit %>%\n  ggplot(aes(factor(Time), Species.Distance),na.rm=T)+\n  geom_boxplot(na.rm=T)+facet_grid(Treatment.Specific ~ Response, margins=TRUE)\nplot(p)\n```\n\n\n\n### Compare distance change between time points \n```{r species_test_distance_to_combo_centroid, cache=TRUE}\n####  T1 vs. T2,3,4 \nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Species.Distance) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Species.Distance) %>%\n  summarise_each(funs(t.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n\n####  T1 vs. T2,3,4 for each treatment arm\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Species.Distance) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Species.Distance) %>%\n  group_by(Treatment) %>%\n  summarise_each(funs(t.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n####  T1 vs. T2,3,4 for each treatment arm\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment.Specific,Species.Distance) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Species.Distance) %>% \n  group_by(Treatment.Specific) %>%\n  summarise_each(funs(t.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n\n####  T1 vs. T2,3,4 for each treatment arm & response\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Response,Species.Distance) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Species.Distance) %>%\n  group_by(Treatment,Response) %>%\n  summarise_each(funs(t.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n####  T1 vs. T2,3,4 for each treatment arm & response\n####  Not enough sample for PEN\n####  t-test\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment.Specific,Response,Species.Distance) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Species.Distance) %>% \n  filter(Treatment.Specific=='EEN') %>%\n  group_by(Treatment.Specific,Response) %>%\n  summarise_each(funs(t.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n\n####  T1 vs. T2,3,4 for each treatment arm & response\n####  Not enough sample for PEN\n####  wilcox\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment.Specific,Response,Species.Distance) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Species.Distance) %>% \n  filter(Treatment.Specific=='EEN') %>%\n  group_by(Treatment.Specific,Response) %>%\n  summarise_each(funs(wilcox.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment.Specific,Response,Species.Distance) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,Species.Distance) %>% \n  filter(Treatment.Specific=='EEN',Response=='Non.Response')\n```\n\n### Compare distance change on response status\n```{r species_test_distance_on_response, cache=TRUE}\nttest.fun = function(tdata){ \n  R.vs.NR <- NA\n  try(R.vs.NR <- signif(t.test(Species.Distance~Response,data=tdata)$p.value, 2),silent=TRUE)\n  return(as.data.frame(R.vs.NR))\n}\n\n\n####  R vs. NR: by treatment\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Species.Distance,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Treatment) %>%\n  do(ttest.fun(.)) %>%\n  add_back_rownames(row.var='Treatment')\n\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Species.Distance,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Treatment.Specific) %>%\n  do(ttest.fun(.)) %>%\n  add_back_rownames(row.var='Treatment.Specific')\n\n\n####  R vs. NR: by time\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Species.Distance,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Time) %>%\n  do(ttest.fun(.)) %>%\n  add_back_rownames(row.var='Time')\n\n\n####  R vs. NR: by time & treatment\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Species.Distance,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Time,Treatment) %>%\n  do(ttest.fun(.)) \n\nsample.info %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,Species.Distance,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Time,Treatment.Specific) %>%\n  do(ttest.fun(.))\n```\n\n### Compare distance change on treatment\n```{r species_test_distance_on_treatment, cache=TRUE}\n####  EEN-T1 response vs. control\nsample.info %>%\ndplyr::select(Subject,Type,Treatment.Specific,Species.Distance,Response,Antibiotics.visit) %>% \ndplyr::filter(Type=='COMBO'| (Type=='PLEASE-T1' & Treatment.Specific=='EEN' & Response == 'Response')) %>%\ndplyr::select(Type,Species.Distance,Antibiotics.visit) %>%\nna.omit() %>%\n(function(tdata){\nt.test(Species.Distance~Type,data=tdata)$p.value %>% print\nlm(Species.Distance~Type+Antibiotics.visit,data=tdata) %>% summary %>% coef %>% print\nboxplot(Species.Distance~Type,data=tdata,ylab='Distance')\n})\n\n####  EEN-T4 response vs. control\nsample.info %>%\ndplyr::select(Subject,Type,Treatment.Specific,Species.Distance,Response,Antibiotics.visit) %>% \ndplyr::filter(Type=='COMBO'| (Type=='PLEASE-T4' & Treatment.Specific=='EEN' & Response == 'Response')) %>%\ndplyr::select(Type,Species.Distance,Antibiotics.visit) %>%\nna.omit() %>%\n(function(tdata){\nt.test(Species.Distance~Type,data=tdata)$p.value %>% print\nlm(Species.Distance~Type+Antibiotics.visit,data=tdata) %>% summary %>% coef %>% print\nboxplot(Species.Distance~Type,data=tdata,ylab='Distance')\n})\n\n####  antiTNF-T1 response vs. control\nsample.info %>%\ndplyr::select(Subject,Type,Treatment.Specific,Species.Distance,Response,Antibiotics.visit) %>% \ndplyr::filter(Type=='COMBO'| (Type=='PLEASE-T1' & Treatment.Specific=='antiTNF' & Response == 'Response')) %>%\ndplyr::select(Type,Species.Distance,Antibiotics.visit) %>%\nna.omit() %>%\n(function(tdata){\nt.test(Species.Distance~Type,data=tdata)$p.value %>% print\nlm(Species.Distance~Type+Antibiotics.visit,data=tdata) %>% summary %>% coef %>% print\nboxplot(Species.Distance~Type,data=tdata,ylab='Distance')\n})\n\n####  antiTNF-T4 response vs. control\nsample.info %>%\ndplyr::select(Subject,Type,Treatment.Specific,Species.Distance,Response,Antibiotics.visit) %>% \ndplyr::filter(Type=='COMBO'| (Type=='PLEASE-T4' & Treatment.Specific=='antiTNF' & Response == 'Response')) %>%\ndplyr::select(Type,Species.Distance,Antibiotics.visit) %>%\nna.omit() %>%\n(function(tdata){\nt.test(Species.Distance~Type,data=tdata)$p.value %>% print\nlm(Species.Distance~Type+Antibiotics.visit,data=tdata) %>% summary %>% coef %>% print\nboxplot(Species.Distance~Type,data=tdata,ylab='Distance')\n})\n\n####  antiTNF-T1 response vs. EEN-T1 response\nsample.info %>%\ndplyr::select(Subject,Type,Treatment.Specific,Species.Distance,Response) %>% \ndplyr::filter( (Type=='PLEASE-T1' & Treatment.Specific !='PEN' & Response == 'Response')) %>%\ndplyr::select(Treatment.Specific,Species.Distance) %>%\nna.omit() %>%\n(function(tdata){\nt.test(Species.Distance~Treatment.Specific,data=tdata)$p.value %>% print\nboxplot(Species.Distance~Treatment.Specific,data=tdata,ylab='Distance')\n})\n\n\n####  antiTNF-T4 response vs. EEN-T4 response\nsample.info %>%\ndplyr::select(Subject,Type,Treatment.Specific,Species.Distance,Response) %>% \ndplyr::filter( (Type=='PLEASE-T4' & Treatment.Specific !='PEN' & Response == 'Response')) %>%\ndplyr::select(Treatment.Specific,Species.Distance) %>%\nna.omit() %>%\n(function(tdata){\nt.test(Species.Distance~Treatment.Specific,data=tdata)$p.value %>% print\nboxplot(Species.Distance~Treatment.Specific,data=tdata,ylab='Distance')\n})\n```\n\n\n### Compare distance to healthy controls\n```{r species_compare_distance_to_healthy_controls,cache=TRUE}\n#### I am goint to re-plot the figure before\n#### Plot distance by treatment,response\np<- sample.info %>% dplyr::select(Type,Species.Distance,Treatment.Specific,Response) %>%\n  mutate(Response=ifelse(Type=='COMBO','COMBO',Response)) %>%\n  mutate(Treatment.Specific=ifelse(Type=='COMBO','COMBO',Treatment.Specific)) %>%\n  na.omit() %>%\n  unite(Treatment.Response, Treatment.Specific,Response, sep = \".\") %>%\n  ggplot(aes(factor(Type),Species.Distance)) + \n  geom_boxplot(aes(fill = factor(Treatment.Response)),outlier.shape = NA)+\n  xlab('')+ylab('Distance to the COMBO centroid') + \n  theme_classic() \nplot(p)\n\n#### Calculate the pvalues for each box in the above figure\nsample.info %>%\ndplyr::select(Type,Time,Treatment.Specific,Species.Distance,Response) %>% \nmutate(Treatment.Specific=ifelse(Type=='COMBO','COMBO',Treatment.Specific)) %>%\nmutate(Response=ifelse(Type=='COMBO','COMBO',Response)) %>%\nmutate(Time=paste('T',Time,sep='')) %>%\nmutate(Time=ifelse(Type=='COMBO','COMBO',Time)) %>%\ndplyr::filter(Treatment.Specific != 'PEN') %>% \nna.omit() %>%\n### group by treatment\n(function(tdata){\n### merge the time and treatment\ntemp <- tdata %>% \nunite(Time.Treatment,Time,Treatment.Specific, sep = \"_\") %>%\ndplyr::select(Time.Treatment,Species.Distance)\n#### take the COMBO samples out, use them in the t.test\ncdata <- dplyr::filter(temp,Time.Treatment=='COMBO_COMBO') %>%\n         dplyr::select(Species.Distance)\n### compare each group to combo group by t.test\ngroup_by(temp,Time.Treatment) %>%\nsummarise(pval.compare.to.combo=t.test(Species.Distance,cdata$Species.Distance)$p.value) %>%\nmutate(pval.compare.to.combo=signif(pval.compare.to.combo,2)) %>%\nseparate(Time.Treatment, into=c(\"Time\",\"Treatment\"), sep = \"_\") %>%\nprint\nreturn(tdata)\n}) %>%\n### group by treatment and response\nunite(Time.Treatment.Response,Time, Treatment.Specific,Response, sep = \"_\") %>%\ndplyr::select(Time.Treatment.Response,Species.Distance) %>%\n(function(tdata){\ncdata <- dplyr::filter(tdata,Time.Treatment.Response=='COMBO_COMBO_COMBO') %>%\n         dplyr::select(Species.Distance)\ngroup_by(tdata,Time.Treatment.Response) %>%\nsummarise(pval.compare.to.combo=t.test(Species.Distance,cdata$Species.Distance)$p.value) %>%\nmutate(pval.compare.to.combo=signif(pval.compare.to.combo,2)) %>%\nseparate(Time.Treatment.Response, into=c(\"Time\",\"Treatment\",\"Response\"), sep = \"_\")\n})\n```\n\n\n### Linear regression \n```{r species_linear_regression_on_distance_to_combo_centroid,cache=TRUE}\n### all, adjust for baseline distance\nlm.all <- sample.info %>%\n  #filter(Treatment=='antiTNF')%>% \n  dplyr::select(Subject, Time, Species.Distance,Response,Antibiotics.visit) %>%\n  na.omit() %>%\n  mutate(Time=paste('Dist_T',Time,sep='')) %>%\n  spread(Time, Species.Distance) %>% \n  lm(Dist_T4~Dist_T1+Response+as.factor(Antibiotics.visit),data=.)\nsummary(lm.all)\ncoefplot(lm.all)\n\n### antiTNF, adjust for baseline distance\nlm.antiTNF <- sample.info %>%\n  filter(Treatment=='antiTNF')%>% \n  dplyr::select(Subject, Time, Species.Distance,Response,Antibiotics.visit) %>%\n  na.omit() %>%\n  mutate(Time=paste('Dist_T',Time,sep='')) %>%\n  spread(Time, Species.Distance) %>% \n  lm(Dist_T4~Dist_T1+Response+as.factor(Antibiotics.visit),data=.)\nsummary(lm.antiTNF)\ncoefplot(lm.antiTNF)\n\n### Diet \nlm.Diet <- sample.info %>%\n  filter(Treatment=='Diet')%>% \n  dplyr::select(Subject, Time, Species.Distance,Response,Antibiotics.visit) %>%\n  na.omit() %>%\n  mutate(Time=paste('Dist_T',Time,sep='')) %>%\n  spread(Time,Species.Distance) %>% \n  lm(Dist_T4~Dist_T1+Response+as.factor(Antibiotics.visit),data=.)\nsummary(lm.Diet)\ncoefplot(lm.Diet)\n\n### EEN\nlm.EEN <- sample.info %>%\n  filter(Treatment.Specific=='EEN')%>% \n  dplyr::select(Subject, Time, Species.Distance,Response,Antibiotics.visit) %>%\n  na.omit() %>%\n  mutate(Time=paste('Dist_T',Time,sep='')) %>%\n  spread(Time,Species.Distance) %>% \n  lm(Dist_T4~Dist_T1+Response+as.factor(Antibiotics.visit),data=.)\nsummary(lm.EEN)\ncoefplot(lm.EEN)\n\n### PEN \nlm.PEN <- sample.info %>%\n  filter(Treatment.Specific=='PEN')%>% \n  dplyr::select(Subject, Time, Species.Distance,Response,Antibiotics.visit) %>%\n  na.omit() %>%\n  mutate(Time=paste('Dist_T',Time,sep='')) %>%\n  spread(Time,Species.Distance) %>% \n  lm(Dist_T4~Dist_T1+Response+as.factor(Antibiotics.visit),data=.)\nsummary(lm.PEN)\ncoefplot(lm.PEN)\n\n\n####################################\n### plot all coefficients in one plot\n### the order is from bottom to top\ncoefplot(lm.all, xlim=c(-1, 1),  col.pts=\"black\",intercept=TRUE)\ncoefplot(lm.antiTNF, add=TRUE, col.pts=\"red\",  intercept=TRUE)\ncoefplot(lm.EEN, add=TRUE, col.pts=\"blue\", intercept=TRUE, offset=0.2)\nlegend('topright',legend=c('All','antiTNF','EEN'),col=c(\"black\",\"red\",\"blue\"),pch=19)\n\nrm(lm.all)\nrm(lm.PEN)\nrm(lm.Diet)\nrm(lm.antiTNF)\nrm(lm.EEN)\n```\n\n\n\n\n\n# Analyze fungal data\n\n\n\n\n\n## Normal vs. Crohn-T1\n```{r fungi_normal_vs_crohn_t1,cache=TRUE}\n### I don't use dplyr filter \n### because it will remove the row names\nfungi.cp1 <- subset_data_by_sample_info(fungi.RPKM,sample.info,\n                                        Type=='COMBO' | Type=='PLEASE-T1')\n\n### remove empty rows, \"6007-01\"\nrownames(fungi.cp1)[rowSums(fungi.cp1) == 0]\nfungi.cp1 <- fungi.cp1[rowSums(fungi.cp1) > 0,]\n### there are other samples with empty rows\n### remember to remove them in the latter analysis\n\ndim(fungi.cp1)\n```\n\n### Calculate distance\nWe only have five fungi in the data, binary jaccard may not be a good choice. Try bray.\n```{r fungi_calculate_distance,cache=TRUE}\nfungi.distance.method <- \"Bray\"\nfungi.dist.cp1 <- calculate_distance(X = fungi.cp1, method = fungi.distance.method, tree = NA)\n\n### distribution\nhist(fungi.dist.cp1,xlab='Distance',main='Fungi (COMBO and PLEASE-T1)')\n#hist(log(fungi.dist.cp1),xlab='log distance',main='Fungi (COMBO and PLEASE-T1)')\n```\n\n### Find the best clustering\n```{r fungi_find_the_best_clustering,cache=TRUE}\nfungi.pamk.best <- find_best_clustering(fungi.dist.cp1,plot.results=TRUE)\n```\n\n### MDS analysis\n```{r fungi_MDS,cache=TRUE,results='hide'}\n### MDS\nfungi.meta.MDS <- metaMDS(fungi.dist.cp1)\n\n### Normal/Disease\np <- add_rownames(as.data.frame(fungi.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ geom_point(aes(colour = Disease)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  labs(title = 'metaMDS') \nprint(p)\n\n### Normal/Disease, cluster\n### These are bacterial clusters !!\np <- add_rownames(as.data.frame(fungi.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ geom_point(aes(colour = Disease,shape=Cluster)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,4),name=\"\") +\n  labs(title = 'metaMDS') \nprint(p)\n```\n\n### Heatmap of normal vs Crohn-T1\n```{r fungi_heatmap_of_normal_vs_crohn_t1,cache=TRUE,fig.width=8,fig.height=8}\nbk <- unique(c(\n        0,\n        min(min(fungi.RPKM[fungi.RPKM>0])/2,0.00001),\n        seq(min(min(fungi.RPKM[fungi.RPKM>0])/2,1),0.00001,length=10),\n        seq(0.00001,0.0001,length=10),\n        seq(0.0001,0.01,length=10),\n        seq(0.01,1,length=20),\n        seq(1,10,length=20),\n        seq(10,max(fungi.RPKM),length=20)\n        ))\nhmcols<- colorRampPalette(c('white','#1f78b4','#ff7f00','#e41a1c'))(length(bk)-1)\n\n\n#bk = unique(c(seq(0,quantile(as.matrix(fungi.cp1),0.2), length=100),\n#              seq(quantile(as.matrix(fungi.cp1),0.2),quantile(as.matrix(fungi.cp1),0.5),length=100),\n#              seq(quantile(as.matrix(fungi.cp1),0.5),quantile(as.matrix(fungi.cp1),1.0),length=100)))\n#hmcols<- colorRampPalette(c(\"white\",\"firebrick3\",\"yellow\"))(length(bk)-1) \n\n\n### the color lables must be columns,so I have to transform the data\npheatmap(t(fungi.cp1),border_color=\"grey60\",\n         clustering_distance_rows = 'correlation',\n         clustering_distance_cols = fungi.dist.cp1,clustering_method = \"complete\",\n         annotation=sample.info[,c(\"Type\",\"Cluster\",\"Treatment.Specific\",\"FCP\",\"Response\",\"Antibiotics.visit\",\"Steroids\")],\n         color =hmcols, breaks=bk,\n         show_rownames = TRUE,\n         scale=\"none\")\n```\n\n\n```{r fungi_heatmap_manually_order_samples,cache=TRUE,fig.width=8,fig.height=8}\n#### manually re-order the samples\ndata.heat <- \n  add_rownames(fungi.cp1,var='Sample') %>%\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \n  arrange(Disease,Cluster,Response,Treatment.Specific,Antibiotics.visit,FCP,Steroids) %>%\n  dplyr::select(1:(ncol(fungi.cp1)+1)) %>% \n  add_back_rownames(row.var='Sample')\n\npheatmap(t(data.heat),border_color=\"grey60\",\n         cluster_cols = FALSE,\n         clustering_distance_rows = 'correlation',\n         #clustering_distance_cols =,\n         clustering_method = \"complete\",\n         annotation=sample.info[,c(\"Disease\",\"Cluster\",\"Response\",\"Treatment.Specific\",\"FCP\",\"Antibiotics.visit\",\"Steroids\")],\n         color =hmcols, breaks=bk,\n         show_rownames = TRUE,\n         scale=\"none\")\n\n## for publication\npheatmap(t(data.heat),border_color=\"grey60\",\n         cluster_cols = FALSE,\n         clustering_distance_rows = 'correlation',\n         #clustering_distance_cols =,\n         clustering_method = \"complete\",\n         annotation=sample.info[,c(\"Disease\",\"Cluster\",\"Response\",\"Treatment.Specific\",\"FCP\",\"Antibiotics.visit\",\"Steroids\")],\n         color =hmcols, breaks=bk,\n         cellwidth = 8, cellheight = 8 ,\n         show_rownames = TRUE,\n         scale=\"none\")\n\nrm(data.heat)\n```\n\n\n### Wilcoxon rank test of normal vs. Crohn\n```{r fungi_rank_test_of_normal_vs_crohn,cache=TRUE}\n### only plot the top 5 significant ones\nfungi.cp1.wil <- wilcox_test(fungi.cp1,sample.info[,'Disease',drop=FALSE],\n                             plot.heatmap=FALSE,boxplot.top=5,boxplot.y='RPKM')\n\n```\n\n### Random Forest \n```{r fungi_random_forest_of_normal_vs_crohn,cache=TRUE}\nrandom_forest(fungi.cp1,sample.info[,'Disease',drop=FALSE],\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=0,\n              title=\"Normal vs. Crohn\",boxplot.y=\"RPKM\",\n              seed=100)\n```\n\n\n### Wilcoxon rank test of normal vs. Crohn (no antibiotics use)\n```{r fungi_rank_test_of_normal_vs_crohn_no_antibio,cache=TRUE}\n### only plot the top 5 significant ones\nfungi.cp1.wil.no.anti <- wilcox_test(fungi.cp1,\n         subset(sample.info,Antibiotics.visit=='Not.Use',select=Disease),\n        plot.heatmap=FALSE,boxplot.top=0,boxplot.y='RPKM')\n###\nwrite.csv(fungi.cp1.wil.no.anti,file=paste('../3_Result/2015_03_05_Fungi_COMBO_vs_PLEASET1_No_Abx_Wilcox.csv',sep=''),row.names=TRUE)\n```\n\n\n## Antibiotics use\n\n### Wilcoxon rank test \n```{r fungi_rank_test_of_antibiotics_use,cache=TRUE}\n### plot all the significant ones\nfungi.antibio.wil <- wilcox_test(fungi.cp1,\n                    subset(sample.info,Group=='PLEASE',select=Antibiotics.visit),\n                             plot.heatmap=FALSE,boxplot.top=5,boxplot.y='RPKM')      \n###\nwrite.csv(fungi.antibio.wil,file=paste('../3_Result/2015_03_05_Fungi_PLEASE_Antibiotics_Use_Wilcox.csv',sep=''),row.names=TRUE)\n\n```\n\n### Random Forest \n```{r fungi_random_forest_of_antibiotics_use,cache=TRUE}\nrandom_forest(fungi.cp1,\n              subset(sample.info,Group=='PLEASE',select=Antibiotics.visit),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Antibiotics use\",boxplot.y=\"RPKM\",\n              seed=100)\n```\n\n\n## Cluster 1 vs. cluster 2 (becterial clusters)\n\n### Boxplot fungi abundance in becterial cluster 1 vs. 2\n```{r fungi_boxplot_of_cluster_1_vs_2,cache=TRUE}\nfor (fg in colnames(fungi.RPKM)){\n  print(fg)\n  ggdata <- add_rownames(fungi.RPKM[,fg,drop=F],var='Sample') %>% \n  select(Sample,RPKM=2)  %>% ## the 2nd column -> Abu\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>%\n  dplyr::select(Type,Cluster,RPKM) %>%\n  dplyr::filter(Type=='COMBO' | Type=='PLEASE-T1') %>%\n  na.omit() %>%\n  unite(Group,Type,Cluster, sep = ' ')\n  p <- ggplot(ggdata,aes(factor(Group), RPKM)) +\n  geom_boxplot(aes(fill = Group),outlier.shape = NA) + \n  #geom_jitter() +\n  theme_classic() +\n  ggtitle(fg) +\n  ylim(0,quantile(ggdata$RPKM,0.8)) ## remove outliers\n  print(p)\n}\n\n```\n\n### Wilcoxon rank test of bacterial cluster 1 vs. 2\n```{r fungi_rank_test_of_cluster_1_vs_2,cache=TRUE}\nfungi.cluster.wil <- wilcox_test(fungi.cp1,sample.info[,'Cluster',drop=FALSE],\n                                 plot.heatmap=FALSE,boxplot.top=5,boxplot.y='RPKM')\n#### only five fungi\n#### random forest may not be a good idea\n```\n\n## Compare fungal abundance by treaments, time points and response status\n\n### Overall fungal abundance\n```{r fungi_compare_abundance_by_time_treatment_response,cache=TRUE}\n### Sum all fungal abundance together\nfungi.data <- fungi.RPKM %>% rowSums %>% as.matrix %>%\n## rename header\nas.data.frame %>% dplyr::select(RPKM=1) %>%\nadd_rownames(var='Sample') %>%\nmutate(log.RPKM=log10(RPKM+min(RPKM[RPKM>0]))) %>%\n### add sample information \nleft_join(add_rownames(sample.info,var='Sample'),by='Sample')\n \np <- fungi.data %>% dplyr::select(log.RPKM,Response,Time,Treatment.Specific) %>%\n  na.omit %>%\n  ggplot(aes(factor(Time), log.RPKM),na.rm=T)+\n  geom_boxplot(na.rm=T)+facet_grid(Treatment.Specific ~ Response, margins=TRUE)\nplot(p)\n\n####  T1 vs. T2,3,4 \nfungi.data %>%\n  dplyr::select(Subject,Time,Treatment,RPKM) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,RPKM) %>%\n  summarise_each(funs(wilcox.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n####  T1 vs. T2,3,4 for each treatment arm\nfungi.data %>%\n  dplyr::select(Subject,Time,Treatment,RPKM) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,RPKM) %>%\n  group_by(Treatment) %>%\n  summarise_each(funs(wilcox.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n\n####  T1 vs. T2,3,4 for each treatment arm\nfungi.data %>%\n  dplyr::select(Subject,Time,Treatment.Specific,RPKM) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,RPKM) %>% \n  group_by(Treatment.Specific) %>%\n  summarise_each(funs(wilcox.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n####  T1 vs. T2,3,4 for each treatment arm & response\nfungi.data %>%\n  dplyr::select(Subject,Time,Treatment,Response,RPKM) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,RPKM) %>%\n  group_by(Treatment,Response) %>%\n  summarise_each(funs(wilcox.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n####  T1 vs. T2,3,4 for each treatment arm & response\n####  Not enough sample for PEN\nfungi.data %>%\n  dplyr::select(Subject,Time,Treatment.Specific,Response,RPKM) %>% \n  na.omit() %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  spread(Time,RPKM) %>% \n  filter(Treatment.Specific=='EEN') %>%\n  group_by(Treatment.Specific,Response) %>%\n  summarise_each(funs(wilcox.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3)\n\n###########################\n##### R vs. NR\nwilcoxtest.fun = function(tdata){ \n  R.vs.NR <- NA\n  try(R.vs.NR <- signif(wilcox.test(RPKM~Response,data=tdata)$p.value, 2),silent=TRUE)\n  return(as.data.frame(R.vs.NR))\n}\n\n\n####  R vs. NR: by treatment\nfungi.data %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,RPKM,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Treatment) %>%\n  do(wilcoxtest.fun(.)) %>%\n  add_back_rownames(row.var='Treatment')\n\nfungi.data %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,RPKM,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Treatment.Specific) %>%\n  do(wilcoxtest.fun(.)) %>%\n  add_back_rownames(row.var='Treatment.Specific')\n\n####  R vs. NR: by time\nfungi.data %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,RPKM,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Time) %>%\n  do(wilcoxtest.fun(.)) %>%\n  add_back_rownames(row.var='Time')\n\n####  R vs. NR: by time & treatment\nfungi.data %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,RPKM,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Time,Treatment) %>%\n  do(wilcoxtest.fun(.)) \n\n\nfungi.data %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,RPKM,Response) %>% \n  na.omit() %>%\n  mutate(Time=paste('T',Time,sep='')) %>%\n  group_by(Time,Treatment.Specific) %>%\n  do(wilcoxtest.fun(.))\n\n###### EEN T1 R vs. NR\nfungi.data %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,log.RPKM,Response) %>% \n  dplyr::filter(Time=='1'&Treatment.Specific=='EEN') %>%\n  na.omit() %>%\n  ggplot(aes(factor(Response), log.RPKM),na.rm=T)+\n  geom_boxplot(na.rm=T)\n\nfungi.data %>%\n  dplyr::select(Subject,Time,Treatment,Treatment.Specific,RPKM,Response) %>% \n  dplyr::filter(Time=='1'&Treatment.Specific=='EEN') %>%\n  wilcox.test(as.numeric(RPKM)~as.factor(Response),data=.)\n\n##\nrm(fungi.data)\n```\n\n\n### EEN  T1 vs. T2\n```{r fungi_t1_vs_t2_een,cache=TRUE}\n### Individual fungi comparison\nfungi.wil.t1.t2.een <- add_rownames(fungi.RPKM,var='Sample') %>%\n  gather(Taxa,Abu,-Sample) %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),Subject,Sample,Time,Treatment.Specific,Response), by='Sample') %>%  \n  filter(!is.na(Time)) %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  dplyr::select(-Sample) %>% \n  spread(Time,Abu) %>% \n  dplyr::filter(Treatment.Specific=='EEN') %>% \n  group_by(Taxa) %>%\n  summarise(median.T1=median(T1,na.rm=TRUE),mad.T1=mad(T1,na.rm=TRUE),\n            median.T2=median(T2,na.rm=TRUE),mad.T2=mad(T2,na.rm=TRUE),\n            mean.T1=mean(T1,na.rm=TRUE),sd.T1=sd(T1,na.rm=TRUE),\n            mean.T2=mean(T2,na.rm=TRUE),sd.T2=sd(T2,na.rm=TRUE),\n            T1.vs.T2.p=wilcox.test(T1, T2, pair = TRUE)$p.value\n            ) %>%\n  ## raw pvalues\n  mutate(T1.vs.T2.q = p.adjust(T1.vs.T2.p,method='fdr'))\n  \n \n########### save the results\nwrite.csv(fungi.wil.t1.t2.een,file=paste('../3_Result/2015_03_05_Fungi_EEN_T1_vs_T2_Wilcox.csv',sep=''),row.names=FALSE)\n```\n\n###  T1 vs. T4 for each treatment\n```{r fungi_t1_vs_t4,cache=TRUE}\n### T1 vs. T4: EEN\nfungi.wil.t1.t4.een <- add_rownames(fungi.RPKM,var='Sample') %>%\n  gather(Taxa,Abu,-Sample) %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),Subject,Sample,Time,Treatment.Specific,Response), by='Sample') %>%  \n  filter(!is.na(Time)) %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  dplyr::select(-Sample) %>% \n  spread(Time,Abu) %>% \n  dplyr::filter(Treatment.Specific=='EEN') %>% \n  group_by(Taxa) %>%\n  summarise(median.T1=median(T1,na.rm=TRUE),mad.T1=mad(T1,na.rm=TRUE),\n            median.T4=median(T4,na.rm=TRUE),mad.T4=mad(T4,na.rm=TRUE),\n            mean.T1=mean(T1,na.rm=TRUE),sd.T1=sd(T1,na.rm=TRUE),\n            mean.T4=mean(T4,na.rm=TRUE),sd.T4=sd(T4,na.rm=TRUE),\n            T1.vs.T4.p=wilcox.test(T1, T4, pair = TRUE)$p.value\n            ) %>%\n  ## raw pvalues\n  mutate(T1.vs.T4.q = p.adjust(T1.vs.T4.p,method='fdr'))\n  \n########### save the results\nwrite.csv(fungi.wil.t1.t4.een,file=paste('../3_Result/2015_03_05_Fungi_EEN_T1_vs_T4_Wilcox.csv',sep=''),row.names=FALSE)\n\nrm(fungi.wil.t1.t4.een)\n\n\n### T1 vs. T4: PEN\nfungi.wil.t1.t4.pen <- add_rownames(fungi.RPKM,var='Sample') %>%\n  gather(Taxa,Abu,-Sample) %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),Subject,Sample,Time,Treatment.Specific,Response), by='Sample') %>%  \n  filter(!is.na(Time)) %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  dplyr::select(-Sample) %>% \n  spread(Time,Abu) %>% \n  dplyr::filter(Treatment.Specific=='PEN') %>% \n  group_by(Taxa) %>%\n  summarise(median.T1=median(T1,na.rm=TRUE),mad.T1=mad(T1,na.rm=TRUE),\n            median.T4=median(T4,na.rm=TRUE),mad.T4=mad(T4,na.rm=TRUE),\n            mean.T1=mean(T1,na.rm=TRUE),sd.T1=sd(T1,na.rm=TRUE),\n            mean.T4=mean(T4,na.rm=TRUE),sd.T4=sd(T4,na.rm=TRUE),\n            T1.vs.T4.p=wilcox.test(T1, T4, pair = TRUE)$p.value\n            ) %>%\n  ## raw pvalues\n  mutate(T1.vs.T4.q = p.adjust(T1.vs.T4.p,method='fdr'))\n  \n \n########### save the results\nwrite.csv(fungi.wil.t1.t4.pen,file=paste('../3_Result/2015_03_05_Fungi_PEN_T1_vs_T4_Wilcox.csv',sep=''),row.names=FALSE)\n\nrm(fungi.wil.t1.t4.pen)\n\n\n### T1 vs. T4: antiTNF\nfungi.wil.t1.t4.antitnf <- add_rownames(fungi.RPKM,var='Sample') %>%\n  gather(Taxa,Abu,-Sample) %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),Subject,Sample,Time,Treatment.Specific,Response), by='Sample') %>%  \n  filter(!is.na(Time)) %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  dplyr::select(-Sample) %>% \n  spread(Time,Abu) %>% \n  dplyr::filter(Treatment.Specific=='antiTNF') %>% \n  group_by(Taxa) %>%\n  summarise(median.T1=median(T1,na.rm=TRUE),mad.T1=mad(T1,na.rm=TRUE),\n            median.T4=median(T4,na.rm=TRUE),mad.T4=mad(T4,na.rm=TRUE),\n            mean.T1=mean(T1,na.rm=TRUE),sd.T1=sd(T1,na.rm=TRUE),\n            mean.T4=mean(T4,na.rm=TRUE),sd.T4=sd(T4,na.rm=TRUE),\n            T1.vs.T4.p=wilcox.test(T1, T4, pair = TRUE)$p.value\n            ) %>%\n  ## raw pvalues\n  mutate(T1.vs.T4.q = p.adjust(T1.vs.T4.p,method='fdr'))\n  \n \n########### save the results\nwrite.csv(fungi.wil.t1.t4.antitnf,file=paste('../3_Result/2015_03_05_Fungi_antiTNF_T1_vs_T4_Wilcox.csv',sep=''),row.names=FALSE)\n\nrm(fungi.wil.t1.t4.antitnf)\n```\n\n\n\n## quantile regression (baseline, antibiotics)\nRPKM ~ baseline + antibiotics for each treatment\n```{r fungi_quantile_regression,cache=TRUE}\nantibiotics.temp <- add_rownames(sample.info,var='Sample') %>%\n    dplyr::select(Subject,Time,Antibiotics.visit) %>%\n    dplyr::filter(Time==1 | Time==4) %>%\n    mutate(Time=ifelse(Time==1,'T1','T4')) %>%\n    spread(Time,Antibiotics.visit) %>%\n    mutate(antibiotics = ifelse(is.na(T4),T1,T4)) %>%\n    dplyr::select(Subject,antibiotics)\n\n## sum up of fungal abundance\nqr.data <- fungi.RPKM %>% rowSums %>% as.matrix %>%\n## rename header\nas.data.frame %>% dplyr::select(RPKM=1) %>%\nadd_rownames(var='Sample') %>%\n### add sample information \nleft_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \ndplyr::filter(Time==1 | Time==4) %>%\nmutate(Time=ifelse(Time==1,'T1','T4')) %>%\ndplyr::select(Subject,Time,RPKM,Treatment.Specific,Response) %>% \n# mutate(antibiotics = ifelse(is.na(T4),T1,T4))\ntidyr::spread(Time,RPKM) %>%\nleft_join(antibiotics.temp,by='Subject')\n\n## all\nqr.data %>% \nrq(T4~ T1 + Treatment.Specific + Response + antibiotics,\n        tau=0.75,data=.,na.action=na.omit) %>%\nsummary.rq(.,se=\"boot\") %>% coef \n\n## antiTNF\nqr.data %>% dplyr::filter(Treatment.Specific == 'antiTNF') %>%\nrq(T4~ T1 + Response + antibiotics,\n        tau=0.75,data=.,na.action=na.omit) %>%\nsummary.rq(.,se=\"boot\") %>% coef \n\n\n## EEN\nqr.data %>% dplyr::filter(Treatment.Specific == 'EEN') %>%\nrq(T4~ T1 + Response + antibiotics,\n        tau=0.75,data=.,na.action=na.omit) %>%\nsummary.rq(.,se=\"boot\") %>% coef \n```\n\n\n\n### quantile regression on fold change\n```{r fungi_fc_quantile_regression_treatment_antibiotics_response,cache=TRUE}\n### add overall fungal abundance to the data matrix\nfungi.data <- fungi.RPKM %>% rowSums %>% as.matrix %>%\n## rename header\nas.data.frame %>% dplyr::select(All=1) %>%\nadd_rownames(var='Sample') %>%\n### add sample information \nleft_join(add_rownames(as.data.frame(fungi.RPKM),var='Sample'),by='Sample') %>%\nadd_back_rownames(row.var='Sample')\n  \n  \n## fold change T4/T1\nrq.fc.res <- list()\nfor (fg in colnames(fungi.data)){\n  #print(pw)\n  ### it seems rq used some random numbers\n  set.seed(1)\n  fungi.tem <- fungi.data[,fg,drop=FALSE]\n  colnames(fungi.tem) <- 'Fungi'\n    ####\n    master.table <- add_rownames(as.data.frame(fungi.tem),var='Sample') %>%\n    left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>%\n    dplyr::filter(Time==1 | Time==4) %>%\n    dplyr::select(Fungi,Subject,Time,Treatment.Specific,Antibiotics.visit,log.FCP,Response) %>%\n    mutate(Time=ifelse(Time==1,'T1','T4'))\n    ### fungi\n    fg.temp <- master.table %>%\n    mutate(Fungi = Fungi+min(Fungi[Fungi>0]))  %>% \n    dplyr::select(Subject,Fungi,Time,Treatment.Specific) %>%\n    spread(Time,Fungi) %>%\n    mutate(Fungi.log.fc = log(T4/T1)) %>%\n    dplyr::select(Subject,Treatment.Specific,Fungi.log.fc)\n    ### response\n    response.temp <- master.table %>%\n    dplyr::select(Subject,Response) \n    ### log FCP\n    log.fcp.temp <- master.table %>%\n    dplyr::select(Subject,Time,log.FCP) %>%\n    spread(Time,log.FCP) %>%\n    mutate(log.FCP.T4 = T4) %>%\n    dplyr::select(Subject,log.FCP.T4)\n    ### antibiotics\n    antibiotics.temp <- master.table %>%\n    dplyr::select(Subject,Time,Antibiotics.visit) %>%\n    spread(Time,Antibiotics.visit) %>%\n    mutate(antibiotics = ifelse(is.na(T4),T1,T4)) %>%\n    dplyr::select(Subject,antibiotics)\n    ### merge together \n    rq.fc.res[[fg]] <- fg.temp %>% full_join(antibiotics.temp,by='Subject') %>%\n    full_join(response.temp,by='Subject') %>%\n    ### !!!!!!!!!! ########\n    ### After updating RStudio and some R packages,\n    ### a problem has occured: the reference level in the linear model\n    ### has changed for no reason\n    ### Change the reference level back to EEN for consistency with\n    ### previous analysis\n    ###\n    mutate( Treatment.Specific = relevel(as.factor(Treatment.Specific), ref = 'EEN')) %>%\n    ######################\n    ### quantile regression\n    rq( Fungi.log.fc ~ Treatment.Specific + antibiotics + Response,\n        tau=0.75,data=.,na.action=na.omit) %>%\n    summary.rq(.,se=\"boot\") %>% coef %>%\n    as.data.frame %>% add_rownames(var='Var') %>%\n    dplyr::select(1,2,5) %>% dplyr::select(Var,Est=Value,Pval=starts_with(\"Pr\"))%>%\n    gather(value,var,Est,Pval) %>% \n    unite(Variables,Var,value, sep = \".\", remove = TRUE) %>%\n    add_back_rownames(row.var='Variables') %>% as.matrix\n  #### add fungi name\n  colnames(rq.fc.res[[fg]]) <- fg\n  ###  \n  rm(fungi.tem)\n  rm(master.table)\n  rm(fg.temp)\n  rm(antibiotics.temp)\n  rm(log.fcp.temp)\n  rm(response.temp)\n  rm(fg)\n  #break\n}\n\nrq.res.table <- \n  as.data.frame(t(as.data.frame(rq.fc.res))) %>% ## must use as.data.frame again \n  add_rownames(var='fungi') %>%\n  mutate(\n    Treatment.SpecificPEN.Qval = p.adjust(Treatment.SpecificPEN.Pval,method='fdr'),\n    Treatment.SpecificantiTNF.Qval = p.adjust(Treatment.SpecificantiTNF.Pval,method='fdr'),\n    Antibiotics.visitUse.Qval = p.adjust(antibioticsUse.Pval,method='fdr'),\n    ResponseResponse.Qval = p.adjust(ResponseResponse.Pval ,method='fdr')\n  ) \n\nrm(rq.fc.res)\n######\n#### row name is a column\nwrite.csv(rq.res.table,file=paste('../3_Result/2015_03_05_Fungi_Fold_Change_Quantile_Q75_Regression_Treatment_Antibiotics_Response.csv',sep=''),row.names=FALSE)\n\nrm(rq.res.table)\nrm(fungi.data)\n```\n\n\n## Linear regression on response status\n```{r fungi_linear_regression_on_response,cache=TRUE, eval=FALSE, fig.width=10}\n### FIX THIS: some subjects have different antibiotics.visit information at \n### different time points. THe data transformation will result in duplicated rows\n### check data.mat 5007\nfor (fg in colnames(fungi.RPKM)){\n  print(fg)\n  ########!!!!!!!!!!!!!!!!!!!!!!!!\n  #### consider log transfomation of the abundance\n  ########\n  lm.dat <- add_rownames(fungi.RPKM[,fg,drop=F],var='Sample') %>% \n    select(Sample,Abu=2)  %>% ## the 2nd column -> Abu\n    left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>%\n    dplyr::select(Subject,Abu,Time,Treatment,Treatment.Specific,Response,Antibiotics.visit) %>%\n    na.omit() %>%\n    mutate(Time=paste('T',Time,sep='')) %>%\n    spread(Time,Abu) \n  \n  ### antiTNF\n  cat('\\n','antiTNF','\\n')\n  data.mat <- lm.dat %>% filter(Treatment =='antiTNF') \n  lm.antiTNF <- linear_regression_with_permutation(T4~T1+Response+Antibiotics.visit, data.mat=data.mat, perm.var='T4',perm.num=1000)\n  print(lm.antiTNF)\n  \n  \n  ### Diet\n  cat('\\n','Diet','\\n')\n  data.mat <- lm.dat %>% filter(Treatment =='Diet') \n  lm.Diet <- linear_regression_with_permutation(T4~T1+Response+Antibiotics.visit, data.mat=data.mat, perm.var='T4',perm.num=1000)\n  print(lm.Diet)\n  \n  \n  \n  ### EEN (change model to T4~T1+Response, otherwise get an error)\n  cat('\\n','EEN','\\n')\n  data.mat <- lm.dat %>% filter(Treatment.Specific =='EEN')\n  lm.EEN <- linear_regression_with_permutation(T4~T1+Response, data.mat=data.mat, perm.var='T4',perm.num=1000)\n  print(lm.EEN)\n  \n  #break\n  cat('\\n')\n}\n\n```\n\n\n### Compare to healthy controls\n```{r fungi_to_healthy_controls,cache=TRUE,eval=FALSE}\n#### Plot distance by treatment,response\np<- sample.info %>% dplyr::select(Type,Fungi.Per,Treatment.Specific,Response) %>%\n  mutate(Response=ifelse(Type=='COMBO','COMBO',Response)) %>%\n  mutate(Treatment.Specific=ifelse(Type=='COMBO','COMBO',Treatment.Specific)) %>%\n  na.omit() %>%\n  unite(Treatment.Response, Treatment.Specific,Response, sep = \".\") %>%\n  ggplot(aes(factor(Type),log(Fungi.Per+min(Fungi.Per[Fungi.Per>0])))) + \n  geom_boxplot(aes(fill = factor(Treatment.Response)),outlier.shape = NA)+\n  xlab('')+ylab('log Fungi Per') + \n  theme_classic() \nplot(p)\n\n#### Calculate the pvalues for each box in the above figure\nsample.info %>%\ndplyr::select(Type,Time,Treatment.Specific,Human.Per,Response) %>% \nmutate(Treatment.Specific=ifelse(Type=='COMBO','COMBO',Treatment.Specific)) %>%\nmutate(Response=ifelse(Type=='COMBO','COMBO',Response)) %>%\nmutate(Time=paste('T',Time,sep='')) %>%\nmutate(Time=ifelse(Type=='COMBO','COMBO',Time)) %>%\ndplyr::filter(Treatment.Specific != 'PEN') %>% \nna.omit() %>%\nunite(Time.Treatment.Response,Time, Treatment.Specific,Response, sep = \"_\") %>%\ndplyr::select(Time.Treatment.Response,Human.Per) %>%\n(function(tdata){\ncdata <- dplyr::filter(tdata,Time.Treatment.Response=='COMBO_COMBO_COMBO') %>%\n         dplyr::select(Human.Per) %>%\n         mutate(Human.Per=as.numeric(Human.Per))\n#print(cdata)\ngroup_by(tdata,Time.Treatment.Response) %>%\nsummarise(pval.compare.to.combo=wilcox.test(Human.Per,cdata$Human.Per)$p.value) %>%\nmutate(pval.compare.to.combo=signif(pval.compare.to.combo,2)) %>%\nseparate(Time.Treatment.Response, into=c(\"Time\",\"Treatment\",\"Response\"), sep = \"_\")\n})\n```\n\n\n## Abundance change across time\n```{r fungi_abundance_change_aross_time,cache=TRUE,eval=FALSE,include=FALSE}\nsample.info %>%\n  dplyr::select(Subject,Time, Fungi.Per,Response,Treatment.Specific) %>%\n  #dplyr::filter(Treatment.Specific != 'PEN') %>%\n  dplyr::filter(Time==1 | Time==4) %>%\n  na.omit() %>%\n  ### not right, need non-zero min value\n  mutate(Fungi.Per.log=log(Fungi.Per+min(Fungi.Per))) %>%\n  #spread(Time,bact.div) %>%\n  #head\n  ggplot(aes(Time,Fungi.Per.log,group=Subject,color=Response),data=.) + geom_line(alpha = 0.5) +facet_grid(.~Treatment.Specific)\n```\n\n\n## Correlation of fungi abundance\n```{r fungi_correlation_please_t1,cache=TRUE}\nfungi.p1 <- subset_data_by_sample_info(fungi.RPKM,sample.info,Type=='PLEASE-T1')\nsignif(cor(fungi.p1 ,method='spearman'),2)\n```\n\n\n## Correlation of fungi and bacteria\n```{r fungi_correlation_with_bacteria,cache=TRUE,fig.height=10}\n### scale the colors so that all heatmaps are comparable.\nbk <- unique(c(seq(-1,-0.4,length=10),seq(-0.4,0.4,length=50),seq(0.4,1,length=10)))\nhmcols<- colorRampPalette(c('#4575b4','#91bfdb','#e0f3f8',\n                            '#ffffbf','#fee090','#fc8d59','#d73027'\n                            ))(length(bk)-1)\n\n### all\nind <- intersect(rownames(fungi.RPKM),rownames(taxa.data))\nfungi.bact.cor <- cor(fungi.RPKM[ind,],taxa.data[ind,],method='spearman')\npheatmap(t(fungi.bact.cor), \n           scale='none',fontsize_row = 10, \n           clustering_distance_cols = \"manhattan\",\n           clustering_distance_rows = \"manhattan\",\n           cluster_cols = TRUE,\n           color =hmcols, breaks=bk,\n           cellwidth = 12, cellheight = 8\n           )\nrm(ind)\n\n### control\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(taxa.data)),rownames(subset(sample.info,Type=='COMBO')))\nfungi.bact.cor <- cor(fungi.RPKM[ind,],taxa.data[ind,],method='spearman')\npheatmap(na.omit(t(fungi.bact.cor)), \n           scale='none',fontsize_row = 10, \n           clustering_distance_cols = \"manhattan\",\n           clustering_distance_rows = \"manhattan\",\n           cluster_cols = TRUE,\n         color =hmcols, breaks=bk,\n           cellwidth = 12, cellheight = 8\n           )\nrm(ind)\n\n### PLEASE Cluster 1\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(taxa.data)),rownames(subset(sample.info,Type=='PLEASE-T1' & Cluster=='cluster 1')))\nfungi.bact.cor <- cor(fungi.RPKM[ind,],taxa.data[ind,],method='spearman')\npheatmap(na.omit(t(fungi.bact.cor)), \n           scale='none',fontsize_row = 10, \n           clustering_distance_cols = \"manhattan\",\n           clustering_distance_rows = \"manhattan\",\n           cluster_cols = TRUE,\n         color =hmcols, breaks=bk,\n           cellwidth = 12, cellheight = 8\n           )\nrm(ind)\n\n### PLEASE Cluster 2\n### some of the pairs are NA (sd is zero)\n### so the rows in the final figures are different in cluster 1 vs. 2\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(taxa.data)),rownames(subset(sample.info,Type=='PLEASE-T1' & Cluster=='cluster 2')))\nfungi.bact.cor <- cor(fungi.RPKM[ind,],taxa.data[ind,],method='spearman')\npheatmap(na.omit(t(fungi.bact.cor)), \n           scale='none',fontsize_row = 10, \n           clustering_distance_cols = \"manhattan\",\n           clustering_distance_rows = \"manhattan\",\n           cluster_cols = TRUE,\n         color =hmcols, breaks=bk,\n           cellwidth = 12, cellheight = 8\n           )\nrm(ind)\n\n### PLEASE-T1\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(taxa.data)),rownames(subset(sample.info,Type=='PLEASE-T1')))\nfungi.bact.cor <- cor(fungi.RPKM[ind,],taxa.data[ind,],method='spearman')\npheatmap(na.omit(t(fungi.bact.cor)), \n           scale='none',fontsize_row = 10, \n           clustering_distance_cols = \"manhattan\",\n           clustering_distance_rows = \"manhattan\",\n           cluster_cols = TRUE,\n         color =hmcols, breaks=bk,\n           cellwidth = 12, cellheight = 8\n           )\nrm(ind)\n\n### PLEASE-T4\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(taxa.data)),rownames(subset(sample.info,Type=='PLEASE-T4')))\nfungi.bact.cor <- cor(fungi.RPKM[ind,],taxa.data[ind,],method='spearman')\npheatmap(na.omit(t(fungi.bact.cor)), \n           scale='none',fontsize_row = 10, \n           clustering_distance_cols = \"manhattan\",\n           clustering_distance_rows = \"manhattan\",\n           cluster_cols = TRUE,\n         color =hmcols, breaks=bk,\n           cellwidth = 12, cellheight = 8\n           )\nrm(ind)\n\n### antiTNF\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(taxa.data)),rownames(subset(sample.info,Treatment=='antiTNF')))\nfungi.bact.cor <- cor(fungi.RPKM[ind,],taxa.data[ind,],method='spearman')\npheatmap(t(fungi.bact.cor), \n           scale='none',fontsize_row = 10, \n           clustering_distance_cols = \"manhattan\",\n           clustering_distance_rows = \"manhattan\",\n           cluster_cols = TRUE,\n         color =hmcols, breaks=bk,\n           cellwidth = 12, cellheight = 8\n           )\nrm(ind)\n\n### EEN\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(taxa.data)),rownames(subset(sample.info,Treatment.Specific=='EEN')))\nfungi.bact.cor <- cor(fungi.RPKM[ind,],taxa.data[ind,],method='spearman')\npheatmap(na.omit(t(fungi.bact.cor)), \n           scale='none',fontsize_row = 10, \n           clustering_distance_cols = \"manhattan\",\n           clustering_distance_rows = \"manhattan\",\n           cluster_cols = TRUE,\n         color =hmcols, breaks=bk,\n           cellwidth = 12, cellheight = 8\n           )\nrm(ind)\n\n### response\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(taxa.data)),rownames(subset(sample.info,Response=='Response')))\nfungi.bact.cor <- cor(fungi.RPKM[ind,],taxa.data[ind,],method='spearman')\npheatmap(t(fungi.bact.cor), \n           scale='none',fontsize_row = 10, \n           clustering_distance_cols = \"manhattan\",\n           clustering_distance_rows = \"manhattan\",\n           cluster_cols = TRUE,\n         color =hmcols, breaks=bk,\n           cellwidth = 12, cellheight = 8\n           )\nrm(ind)\n\n### non-response\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(taxa.data)),rownames(subset(sample.info,Response=='Non.Response')))\nfungi.bact.cor <- cor(fungi.RPKM[ind,],taxa.data[ind,],method='spearman')\npheatmap(t(fungi.bact.cor), \n           scale='none',fontsize_row = 10, \n           clustering_distance_cols = \"manhattan\",\n           clustering_distance_rows = \"manhattan\",\n           cluster_cols = TRUE,\n         color =hmcols, breaks=bk,\n           cellwidth = 12, cellheight = 8\n           )\nrm(ind)\n\n\n### PLEASE-T4 Response\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(taxa.data)),rownames(subset(sample.info,Type=='PLEASE-T4' & Response =='Response')))\nfungi.bact.cor <- cor(fungi.RPKM[ind,],taxa.data[ind,],method='spearman')\npheatmap(na.omit(t(fungi.bact.cor)), \n           scale='none',fontsize_row = 10, \n           clustering_distance_cols = \"manhattan\",\n           clustering_distance_rows = \"manhattan\",\n           cluster_cols = TRUE,\n         color =hmcols, breaks=bk,\n           cellwidth = 12, cellheight = 8\n           )\nrm(ind)\n```\n\n# Analyze gene data\n\n## Normal vs. Crohn-T1\n```{r gene_normal_vs_crohn_t1,cache=TRUE}\n### I don't use dplyr filter \n### because it will remove the row names\ngene.cp1 <- subset_data_by_sample_info(gene.data,sample.info,\n                                       Type=='COMBO' | Type=='PLEASE-T1')\n\n### remove empty rows, \"6007-01\"\nrownames(gene.cp1)[rowSums(gene.cp1) == 0]\n# gene.cp1 <- gene.cp1[rowSums(gene.cp1) > 0,]\n### there are other samples with empty rows\n### remember to remove them in the latter analysis\n\ndim(gene.cp1)\n```\n\n### Calculate distance\n```{r gene_calculate_distance,cache=TRUE}\ngene.distance.method <- \"Bray\"\ngene.dist.cp1 <- calculate_distance(X = gene.cp1, method = gene.distance.method, tree = NA)\n\n### distribution\nhist(gene.dist.cp1,xlab='Distance',main='Gene (COMBO and PLEASE-T1)')\n\n```\n\n### Find the best clustering\n```{r gene_find_the_best_clustering,cache=TRUE}\ngene.pamk.best <- find_best_clustering(gene.dist.cp1,plot.results=TRUE)\n```\n\n### MDS analysis\n```{r gene_MDS,cache=TRUE,results='hide'}\n### MDS\ngene.meta.MDS <- metaMDS(gene.dist.cp1)\n\n### Normal/Disease\np <- add_rownames(as.data.frame(gene.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ geom_point(aes(colour = Disease)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  labs(title = 'metaMDS') \nprint(p)\n\n### Normal/Disease, cluster\n### These are bacterial clusters !!\np <- add_rownames(as.data.frame(gene.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ geom_point(aes(colour = Disease,shape=Cluster)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,4),name=\"\") +\n  labs(title = 'metaMDS') \nprint(p)\n\n\n#### Fugal percentage \np <- add_rownames(as.data.frame(gene.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster,Fungi.Per),\n            by='Sample') %>% \n  mutate(Fungi.Per.sqrt=sqrt(Fungi.Per)) %>%\n  ggplot(aes(x=MDS1,y=MDS2))+ \n  geom_point(aes(colour = Disease,shape=Cluster,size = Fungi.Per.sqrt)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  scale_size_area()+\n  labs(title = 'metaMDS') \nprint(p)\n\n#### Human DNA percentage\np <- add_rownames(as.data.frame(gene.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster,Human.Per),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ \n  geom_point(aes(colour = Disease,shape=Cluster,size = Human.Per)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  scale_size_area()+\n  labs(title = 'metaMDS') \nprint(p)\n```\n\n\n### Random Forest \n```{r gene_random_forest_of_normal_vs_crohn,cache=TRUE}\nrandom_forest(gene.cp1,sample.info[,'Disease',drop=FALSE],\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Normal vs. Crohn\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n```\n\n\n### Wilcoxon rank test of normal vs. Crohn\n```{r gene_rank_test_of_normal_vs_crohn,cache=TRUE}\n### only plot the top 5 significant ones\ngene.cp1.wil <- wilcox_test(gene.cp1,sample.info[,'Disease',drop=FALSE],\n                            plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance(%)')\n\n#### \nwrite.csv(gene.cp1.wil,file=paste('../3_Result/2015_03_05_Gene_COMBO_PLEASET1_Wilcox.csv',sep=''),row.names=TRUE)\n```\n\n\n\n## Antibiotics use\n\n### Wilcoxon rank test \n```{r gene_rank_test_of_antibiotics_use,cache=TRUE}\n### plot top ones\ngene.antibio.wil <- wilcox_test(gene.cp1,\n                    subset(sample.info,Group=='PLEASE',select=Antibiotics.visit),\n                             plot.heatmap=FALSE,boxplot.top=10,boxplot.y='Abundance(%)')      \n###\nwrite.csv(gene.antibio.wil,file=paste('../3_Result/2015_03_05_Gene_PLEASE_Antibiotics_Use_Wilcox.csv',sep=''),row.names=TRUE)\n\n```\n\n### Random Forest \n```{r gene_random_forest_of_antibiotics_use,cache=TRUE}\nrandom_forest(gene.cp1,\n              subset(sample.info,Group=='PLEASE',select=Antibiotics.visit),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=6,\n              title=\"Antibiotics use\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n```\n\n## Cluster 1 vs. cluster 2\n\n### Wilcoxon rank test \n```{r gene_rank_test_of_cluster_1_vs_2,cache=TRUE}\n### plot top 5\ngene.c1c2.wil <- wilcox_test(gene.cp1,\n                             subset(sample.info,Group=='PLEASE',select=Cluster),\n                             plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance(%)')\n\n#### \nwrite.csv(gene.c1c2.wil,file=paste('../3_Result/2015_03_05_Gene_PLEASE_Cluster_1_2_Wilcox.csv',sep=''),row.names=TRUE)\n```\n\n### Random Forest \n```{r gene_random_forest_of_cluster_1_vs_2,cache=TRUE}\nrandom_forest(gene.cp1,subset(sample.info,Group=='PLEASE',select=Cluster),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Normal vs. Crohn\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n```\n\n\n# Analyze pathway data\n\n## Normal vs. Crohn-T1\n```{r pathway_normal_vs_crohn_t1,cache=TRUE}\n### I don't use dplyr filter \n### because it will remove the row names\npathway.cp1 <- subset_data_by_sample_info(pathway.data,sample.info,\n                                          Type=='COMBO' | Type=='PLEASE-T1')\n\n### remove empty rows, \"6007-01\"\nrownames(pathway.cp1)[rowSums(pathway.cp1) == 0]\n# pathway.cp1 <- pathway.cp1[rowSums(pathway.cp1) > 0,]\n### there are other samples with empty rows\n### remember to remove them in the latter analysis\n\ndim(pathway.cp1)\n```\n\n### Calculate distance\n```{r pathway_calculate_distance,cache=TRUE}\npathway.distance.method <- \"Bray\"\npathway.dist.cp1 <- calculate_distance(X = pathway.cp1, method = pathway.distance.method, tree = NA)\n\n### distribution\nhist(pathway.dist.cp1,xlab='Distance',main='Pathway (COMBO and PLEASE-T1)')\n\n```\n\n### Find the best clustering\n```{r pathway_find_the_best_clustering,cache=TRUE}\npathway.pamk.best <- find_best_clustering(pathway.dist.cp1,plot.results=TRUE)\n```\n\n### MDS analysis\n```{r pathway_MDS,cache=TRUE,results='hide'}\n### MDS\nset.seed(10)\npathway.meta.MDS <- metaMDS(pathway.dist.cp1)\n\n### Normal/Disease\np <- add_rownames(as.data.frame(pathway.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ geom_point(aes(colour = Disease)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  labs(title = 'metaMDS') \nprint(p)\n\n### Normal/Disease, cluster\n### These are bacterial clusters !!\np <- add_rownames(as.data.frame(pathway.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ geom_point(aes(colour = Disease,shape=Cluster)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,4),name=\"\") +\n  labs(title = 'metaMDS') \nprint(p)\n\n### Normal/Disease, cluster (for publication)\n### These are bacterial clusters !!\np <- add_rownames(as.data.frame(pathway.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ geom_point(aes(colour = Cluster,shape=Disease)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  labs(title = 'Ordination pathways') +\n  theme_classic()\nprint(p)\n\n\n#### Fugal percentage \np <- add_rownames(as.data.frame(pathway.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster,Fungi.Per),\n            by='Sample') %>% \n  mutate(Fungi.Per.sqrt=sqrt(Fungi.Per)) %>%\n  ggplot(aes(x=MDS1,y=MDS2))+ \n  geom_point(aes(colour = Disease,shape=Cluster,size = Fungi.Per.sqrt)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  scale_size_area()+\n  labs(title = 'metaMDS') \nprint(p)\n\n#### Human DNA percentage\np <- add_rownames(as.data.frame(pathway.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster,Human.Per),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ \n  geom_point(aes(colour = Disease,shape=Cluster,size = Human.Per)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  scale_size_area()+\n  labs(title = 'metaMDS') \nprint(p)\n```\n\n\n### Random Forest \n```{r pathway_random_forest_of_normal_vs_crohn,cache=TRUE}\n### (3) for the random forest Importance score plots in Figure 2C, we have a list of pathways. For this list, can you get results on which pathways have high abundances in Crohn's disease individual based on medians in normal and Crohn's children?\n\n#pdf('pathway_random_forest_of_normal_vs_crohn.pdf',width=10)\nrandom_forest(pathway.cp1,sample.info[,'Disease',drop=FALSE],\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=30,\n              title=\"Normal vs. Crohn\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n#dev.off()\n```\n\n\n### Wilcoxon rank test of normal vs. Crohn\n```{r pathway_rank_test_of_normal_vs_crohn,cache=TRUE}\n### only plot the top 5 significant ones\npathway.cp1.wil <- wilcox_test(pathway.cp1,sample.info[,'Disease',drop=FALSE],\n                               plot.heatmap=FALSE,boxplot.top=0.05,boxplot.y='Abundance(%)')\n\n###\nwrite.csv(pathway.cp1.wil,file=paste('../3_Result/2015_03_05_Pathway_COMBO_PLEASET1_Wilcox.csv',sep=''),row.names=TRUE)\n\n```\n\n### Heatmap of normal vs Crohn-T1 (significant pathways)\n```{r pathway_heatmap_of_normal_vs_crohn_t1_significant,cache=TRUE,fig.width=15,fig.height=10}\npathway.cp1.sig <- t(subset_data_by_sample_info(t(pathway.cp1), as.data.frame(pathway.cp1.wil),Disease.qvalue<0.05))\npathway.dist.cp1.sig <- calculate_distance(X = pathway.cp1.sig, method = pathway.distance.method, tree = NA)\n\nbk <- unique(c(\n        seq(-3,-2,length=100),\n        seq(-2,-1.5,length=100),\n        seq(-1.5,0,length=100),\n        seq(0,1.5,length=100),\n        seq(1.5,2,length=100),\n        seq(2,3,length=100)\n        ))\nhmcols<- colorRampPalette(c('#d73027','#fc8d59','#fee090',\n                            '#ffffbf','#e0f3f8','#91bfdb','#4575b4'\n                            ))(length(bk)-1)\n\ndat.tmp <- log(pathway.cp1.sig+min(pathway.cp1.sig[pathway.cp1.sig>0]))\ndat.nor <- dat.tmp\nfor (pw in colnames(dat.tmp)){\n  pw.dat <- dat.tmp[,pw,drop=TRUE]\n  #hist(pw.dat,breaks=100)\n  Me <- median(pw.dat)\n  Ma <- mad(pw.dat)\n  if (Ma==0){Me <- mean(pw.dat);Ma <- sd(pw.dat)}\n  pw.dat <- (pw.dat-Me)/Ma\n  pw.dat[pw.dat < -3] <- -3\n  pw.dat[pw.dat > 3] <- 3\n  dat.nor[,pw] <- pw.dat\n}\n\n### the color lables must be columns,so I have to transform the data\npheatmap(t(dat.nor),border_color=\"grey60\",\n         clustering_distance_rows = 'euclidean',\n         clustering_distance_cols = pathway.dist.cp1.sig,\n         clustering_method = \"average\",\n         annotation=sample.info[,c(\"Type\",\"FCP\",\"Treatment.Specific\",\"Cluster\",\"Response\",\"Antibiotics.visit\",\"Steroids\")],\n         #color =hmcols, breaks=bk,\n         show_rownames = TRUE,\n         scale=\"none\")\n```\n\n\n```{r pathway_heatmap_manually_order_samples,cache=TRUE,fig.width=15,fig.height=10}\n#### manually re-order the samples\ndata.heat <- \n  add_rownames(as.data.frame(pathway.cp1.sig),var='Sample') %>%\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \n  arrange(Disease,Cluster,Response,Treatment.Specific,Antibiotics.visit,FCP) %>%\n  dplyr::select(1:(ncol(pathway.cp1.sig)+1)) %>% ##first column: sample\n  add_back_rownames(row.var='Sample')\n\ndat.tmp <- log(data.heat+min(data.heat[data.heat>0]))\ndat.nor <- dat.tmp\nfor (pw in colnames(dat.tmp)){\n  pw.dat <- dat.tmp[,pw,drop=TRUE]\n  #hist(pw.dat,breaks=100)\n  Me <- median(pw.dat)\n  Ma <- mad(pw.dat)\n  if (Ma==0){Me <- mean(pw.dat);Ma <- sd(pw.dat)}\n  pw.dat <- (pw.dat-Me)/Ma\n  pw.dat[pw.dat < -3] <- -3\n  pw.dat[pw.dat > 3] <- 3\n  dat.nor[,pw] <- pw.dat\n}\n\nbk <- unique(c(\n        seq(-3.5,-2,length=100),\n        seq(-2,-1.5,length=100),\n        seq(-1.5,0,length=100),\n        seq(0,1.5,length=100),\n        seq(1.5,2,length=100),\n        seq(2,3.5,length=100)\n        ))\nhmcols<- colorRampPalette(c('#d73027','#fc8d59','#fee090',\n                            '#ffffbf','#e0f3f8','#91bfdb','#4575b4'\n                            ))(length(bk)-1)\n\npheatmap(t(dat.nor),border_color=\"grey60\",\n         cluster_cols = FALSE,\n         ##### the pathway abundances are very small\n         ##### very difficult to visualize the difference without scaling\n         scale = \"none\",\n         #####\n         clustering_distance_rows = 'euclidean',\n         #clustering_distance_cols = pathway.dist.cp1.sig,\n         clustering_method = \"average\",\n         annotation=sample.info[,c(\"Disease\",\"Cluster\",\"Response\",\"Treatment.Specific\",\"FCP\",\"Antibiotics.visit\",\"Steroids\")],\n         #color =hmcols, breaks=bk,\n         show_rownames = TRUE\n         )\n\n\nrm(data.heat)\n```\n\n## Antibiotics use\n\n### Wilcoxon rank test \n```{r pathway_rank_test_of_antibiotics_use,cache=TRUE}\n### plot top ones\npathway.antibio.wil <- wilcox_test(pathway.cp1,\n                    subset(sample.info,Group=='PLEASE',select=Antibiotics.visit),\n                             plot.heatmap=FALSE,boxplot.top=10,boxplot.y='Abundance(%)')      \n###\nwrite.csv(pathway.antibio.wil,file=paste('../3_Result/2015_03_05_Pathway_PLEASE_Antibiotics_Use_Wilcox.csv',sep=''),row.names=TRUE)\n\n```\n\n### Random Forest \n```{r pathway_random_forest_of_antibiotics_use,cache=TRUE}\nrandom_forest(pathway.cp1,\n              subset(sample.info,Group=='PLEASE',select=Antibiotics.visit),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=6,\n              title=\"Antibiotics use\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n```\n\n## Cluster 1 vs. cluster 2\n\n### Wilcoxon rank test \n```{r pathway_rank_test_of_cluster_1_vs_2,cache=TRUE}\n### plot all the significant ones\npathway.c1c2.wil <- wilcox_test(pathway.cp1,\n                                subset(sample.info,Group=='PLEASE',select=Cluster),\n                                plot.heatmap=FALSE,boxplot.top=0.05,boxplot.y='Abundance(%)')       \n###\nwrite.csv(pathway.c1c2.wil,file=paste('../3_Result/2015_03_05_Pathway_PLEASE_Cluster_1_vs_2_Wilcox.csv',sep=''),row.names=TRUE)\n```\n\n### Random Forest \n```{r pathway_random_forest_of_cluster_1_vs_2,cache=TRUE}\nrandom_forest(pathway.cp1,subset(sample.info,Group=='PLEASE',select=Cluster),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Normal vs. Crohn\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n```\n\n\n## Responders vs. non-responders\n\n### Random Forest \n```{r pathway_random_forest_of_r_vs_nr,cache=TRUE,fig.width=10}\n### EEN T1\nrandom_forest(pathway.data,\n              subset(sample.info,Time==1 & Treatment.Specific=='EEN' & !is.na(Response),\n                     select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Response vs. non-response\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n### EEN T4\nrandom_forest(pathway.data,\n              subset(sample.info,Time==4 & Treatment.Specific=='EEN' & !is.na(Response),\n                     select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Response vs. non-response\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n\n\n### antiTNF T1\nrandom_forest(pathway.data,\n              subset(sample.info,Time==1 & Treatment.Specific=='antiTNF' & !is.na(Response),\n                     select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Response vs. non-response\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n\n### antiTNF T4\nrandom_forest(pathway.data,\n              subset(sample.info,Time==4 & Treatment.Specific=='antiTNF' & !is.na(Response),\n                     select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Response vs. non-response\",boxplot.y=\"Abundance(%)\",\n              seed=100)\n```\n\n### Wilcoxon rank test\n```{r pathway_rank_test_of_r_vs_nr,cache=TRUE,fig.width=10}\n### EEN T1\nbact.EEN.T1 <- wilcox_test(pathway.data,\n                           subset(sample.info,Time==1 & Treatment.Specific=='EEN' & !is.na(Response),\n                                  select=Response),\n                           plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance(%)')\n\n### EEN T4\nbact.EEN.T4 <- wilcox_test(pathway.data,\n                           subset(sample.info,Time==4 & Treatment.Specific=='EEN' & !is.na(Response),\n                                  select=Response),\n                           plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance(%)')\n\n```\n\n\n## T1 vs. T2 in EEN\n```{r pathway_T1_vs_T2_in_EEN,cache=TRUE,fig.width=10}\nadd_rownames(as.data.frame(pathway.data),var='Sample') %>%\n  gather(Pathway,Abu,-Sample) %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),Subject,Sample,Time,Treatment.Specific,Response), by='Sample') %>%  \n  filter(!is.na(Time)) %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  dplyr::select(-Sample) %>% \n  spread(Time,Abu) %>%\n  group_by(Treatment.Specific,Pathway) %>%\n  summarise_each(funs(wilcox.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  #mutate_each(funs(p.adjust(.,method='fdr')),vars1:vars3) %>%\n  ## raw pvalues\n  mutate_each(funs(signif(.,digits=2)),vars1:vars3) %>%\n  rename(T1.vs.T2=vars1,T1.vs.T3=vars2,T1.vs.T4=vars3) %>%\n  arrange(Treatment.Specific,T1.vs.T2)\n\n\n```\n\n\n## Treatment, antibiotics use, FCP on pathway abundance\n### linear regression\n```{r pathway_linear_regression_treatment_antibiotics_fcp,cache=TRUE}\n## T4\nlinear.res <- list()\nfor (pw in colnames(pathway.data)){\n  pathway.tem <- pathway.data[,pw,drop=FALSE]\n  colnames(pathway.tem) <- 'Pathway'\n  linear.res[[pw]] <- add_rownames(as.data.frame(pathway.tem),var='Sample') %>%\n    left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>%\n    dplyr::filter(Type=='PLEASE-T4') %>%\n    dplyr::select(Pathway,Treatment.Specific,Antibiotics.visit,log.FCP) %>%\n    mutate(Pathway.log = log(Pathway+min(Pathway[Pathway>0])/2)) %>%\n    lm( Pathway.log ~ Treatment.Specific + Antibiotics.visit + log.FCP,\n        data=.) %>%\n    summary %>% coef  %>%  \n    as.data.frame %>% add_rownames(var='Var') %>%\n    dplyr::select(1,2,5) %>% dplyr::select(Var,Est=Estimate,Pval=starts_with(\"Pr\"))%>%\n    gather(value,var,Est,Pval) %>% \n    unite(Variables,Var,value, sep = \".\", remove = TRUE) %>%\n    add_back_rownames(row.var='Variables') %>% as.matrix\n  ####\n  colnames(linear.res[[pw]]) <- pw\n  ###  \n  rm(pathway.tem)\n}\n\nlinear.res <- signif(t(as.data.frame(linear.res)),2)\n\n#print(linear.res)\n######\nwrite.csv(linear.res,file=paste('../3_Result/2015_03_05_Pathway_Linear_Regression_Treatment_Antibiotics_FCP.csv',sep=''),row.names=TRUE)\n```\n\n\n### quantile regression\n```{r pathway_quantile_regression_treatment_antibiotics_fcp,cache=TRUE}\n## T4\nrq.res <- list()\nfor (pw in colnames(pathway.data)){\n  #print(pw)\n  ### it seems rq used some random numbers\n  set.seed(1)\n  pathway.tem <- pathway.data[,pw,drop=FALSE]\n  colnames(pathway.tem) <- 'Pathway'\n  rq.res[[pw]] <- add_rownames(as.data.frame(pathway.tem),var='Sample') %>%\n    left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>%\n    dplyr::filter(Type=='PLEASE-T4') %>%\n    dplyr::select(Pathway,Treatment.Specific,Antibiotics.visit,log.FCP) %>%\n    ### log transform the data\n    mutate(Pathway.log = log(Pathway+min(Pathway[Pathway>0])/2)) %>%\n    ### !!!!!!!!!! ########\n    ### After updating RStudio and some R packages,\n    ### a problem has occured: the reference level in the linear model\n    ### has changed for no reason\n    ### Change the reference level back to EEN for consistency with\n    ### previous analysis\n    ###\n    mutate( Treatment.Specific = relevel(as.factor(Treatment.Specific), ref = 'EEN')) %>%\n    ######################\n    rq( Pathway.log ~ Treatment.Specific + Antibiotics.visit + log.FCP,\n        tau=0.5,data=.,na.action=na.omit) %>%\n    ### since using quantile regression here\n    ### no need to log transform the data\n    ### freeze at some pathway\n    #rq( Pathway ~ Treatment.Specific + Antibiotics.visit + log.FCP,\n    #    tau=0.5,data=.) %>%\n    summary.rq(.,se=\"boot\") %>% coef %>%\n    as.data.frame %>% add_rownames(var='Var') %>%\n    dplyr::select(1,2,5) %>% dplyr::select(Var,Est=Value,Pval=starts_with(\"Pr\"))%>%\n    gather(value,var,Est,Pval) %>% \n    unite(Variables,Var,value, sep = \".\", remove = TRUE) %>%\n    add_back_rownames(row.var='Variables') %>% as.matrix\n  #### add pathway name\n  colnames(rq.res[[pw]]) <- pw\n  ###  \n  rm(pathway.tem)\n  #break\n}\n\nrq.res.table <- \n  as.data.frame(t(as.data.frame(rq.res))) %>% ## must use as.data.frame again \n  add_rownames(var='pathway') %>%\n  mutate(\n    Treatment.SpecificPEN.Qval = p.adjust(Treatment.SpecificPEN.Pval,method='fdr'),\n    Treatment.SpecificantiTNF.Qval = p.adjust(Treatment.SpecificantiTNF.Pval,method='fdr'),\n    Antibiotics.visitUse.Qval = p.adjust(Antibiotics.visitUse.Pval,method='fdr'),\n    log.FCP.Qval = p.adjust(log.FCP.Pval,method='fdr')\n  ) \n\nrm(rq.res)\n######\n#### row name is a column\nwrite.csv(rq.res.table,file=paste('../3_Result/2015_03_05_Pathway_Quantile_Median_Regression_Treatment_Antibiotics_FCP.csv',sep=''),row.names=FALSE)\n\n```\n\n### quantile regression on fold change\n```{r pathway_fc_quantile_regression_treatment_antibiotics_fcp,cache=TRUE}\n## fold change T4/T1\nrq.fc.res <- list()\nfor (pw in colnames(pathway.data)){\n  #print(pw)\n  ### it seems rq used some random numbers\n  set.seed(1)\n  pathway.tem <- pathway.data[,pw,drop=FALSE]\n  colnames(pathway.tem) <- 'Pathway'\n    ####\n    master.table <- add_rownames(as.data.frame(pathway.tem),var='Sample') %>%\n    left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>%\n    dplyr::filter(Time==1 | Time==4) %>%\n    dplyr::select(Pathway,Subject,Time,Treatment.Specific,Antibiotics.visit,log.FCP,Response) %>%\n    mutate(Time=ifelse(Time==1,'T1','T4'))\n    ### pathway\n    path.temp <- master.table %>%\n    mutate(Pathway = Pathway+min(Pathway[Pathway>0]))  %>% \n    dplyr::select(Subject,Pathway,Time,Treatment.Specific) %>%\n    spread(Time,Pathway) %>%\n    mutate(Path.log.fc = log(T4/T1)) %>%\n    dplyr::select(Subject,Treatment.Specific,Path.log.fc)\n    ### response\n    response.temp <- master.table %>%\n    dplyr::select(Subject,Response) \n    ### log FCP\n    log.fcp.temp <- master.table %>%\n    dplyr::select(Subject,Time,log.FCP) %>%\n    spread(Time,log.FCP) %>%\n    mutate(log.FCP.T4 = T4) %>%\n    dplyr::select(Subject,log.FCP.T4)\n    ### antibiotics\n    antibiotics.temp <- master.table %>%\n    dplyr::select(Subject,Time,Antibiotics.visit) %>%\n    spread(Time,Antibiotics.visit) %>%\n    mutate(antibiotics = ifelse(is.na(T4),T1,T4)) %>%\n    dplyr::select(Subject,antibiotics)\n    ### merge together \n    rq.fc.res[[pw]] <- path.temp %>% full_join(antibiotics.temp,by='Subject') %>%\n    full_join(response.temp,by='Subject') %>%\n    ### !!!!!!!!!! ########\n    ### After updating RStudio and some R packages,\n    ### a problem has occured: the reference level in the linear model\n    ### has changed for no reason\n    ### Change the reference level back to EEN for consistency with\n    ### previous analysis\n    ###\n    mutate( Treatment.Specific = relevel(as.factor(Treatment.Specific), ref = 'EEN')) %>%\n    ######################\n    ### quantile regression\n    rq( Path.log.fc ~ Treatment.Specific + antibiotics + Response,\n        tau=0.75,data=.,na.action=na.omit) %>%\n    summary.rq(.,se=\"boot\") %>% coef %>%\n    as.data.frame %>% add_rownames(var='Var') %>%\n    dplyr::select(1,2,5) %>% dplyr::select(Var,Est=Value,Pval=starts_with(\"Pr\"))%>%\n    gather(value,var,Est,Pval) %>% \n    unite(Variables,Var,value, sep = \".\", remove = TRUE) %>%\n    add_back_rownames(row.var='Variables') %>% as.matrix\n  #### add pathway name\n  colnames(rq.fc.res[[pw]]) <- pw\n  ###  \n  rm(pathway.tem)\n  rm(master.table)\n  rm(path.temp)\n  rm(antibiotics.temp)\n  rm(log.fcp.temp)\n  rm(response.temp)\n  #break\n}\n\nrq.res.table <- \n  as.data.frame(t(as.data.frame(rq.fc.res))) %>% ## must use as.data.frame again \n  add_rownames(var='pathway') %>%\n  mutate(\n    Treatment.SpecificPEN.Qval = p.adjust(Treatment.SpecificPEN.Pval,method='fdr'),\n    Treatment.SpecificantiTNF.Qval = p.adjust(Treatment.SpecificantiTNF.Pval,method='fdr'),\n    Antibiotics.visitUse.Qval = p.adjust(antibioticsUse.Pval,method='fdr'),\n    ResponseResponse.Qval = p.adjust(ResponseResponse.Pval ,method='fdr')\n  ) \n\nrm(rq.fc.res)\n######\n#### row name is a column\nwrite.csv(rq.res.table,file=paste('../3_Result/2015_03_05_Pathway_Fold_Change_Quantile_Q75_Regression_Treatment_Antibiotics_Response.csv',sep=''),row.names=FALSE)\n\n```\n\n## Correlation of pathways and bacteria\n```{r pathway_correlation_with_bacteria,cache=TRUE,fig.height=18,fig.width=15}\n\nplot.correlation.heatmap = function(cor.matrix,\n                                    row.filter=0.5,\n                                    col.filter=0.1\n                                    ){\n  cor.matrix <- cor.matrix[\n  apply(cor.matrix,1,function(X){max(abs(X),na.rm=TRUE)>row.filter}),\n  apply(cor.matrix,2,function(X){max(abs(X),na.rm=TRUE)>col.filter})\n  ]\n  pheatmap(cor.matrix, \n           scale='none',fontsize_row = 10, \n           clustering_distance_cols = \"manhattan\",\n           clustering_distance_rows = \"manhattan\",\n           cluster_cols = TRUE,\n           cellwidth = 10, cellheight = 10\n  )                              \n}\n\n\n### all\nind <- intersect(rownames(pathway.data),rownames(taxa.data))\npathway.bact.cor <- cor(pathway.data[ind,],taxa.data[ind,],method='spearman')\nplot.correlation.heatmap(pathway.bact.cor)\nrm(ind)\n\n### control\nind <- intersect(intersect(rownames(pathway.data),rownames(taxa.data)),rownames(subset(sample.info,Type=='COMBO')))\npathway.bact.cor <- cor(pathway.data[ind,colSums(pathway.data[ind,])>0],\n                        taxa.data[ind,colSums(taxa.data[ind,])>0],\n                        method='spearman')\nplot.correlation.heatmap(pathway.bact.cor)\nrm(ind)\n\n### PLEASE-T1\nind <- intersect(intersect(rownames(pathway.data),rownames(taxa.data)),rownames(subset(sample.info,Type=='PLEASE-T1')))\npathway.bact.cor <- cor(pathway.data[ind,colSums(pathway.data[ind,])>0],\n                        taxa.data[ind,colSums(taxa.data[ind,])>0],\n                        method='spearman')\nplot.correlation.heatmap(pathway.bact.cor)\nrm(ind)\n\n### PLEASE-T4\nind <- intersect(intersect(rownames(pathway.data),rownames(taxa.data)),rownames(subset(sample.info,Type=='PLEASE-T4')))\npathway.bact.cor <- cor(pathway.data[ind,colSums(pathway.data[ind,])>0],\n                        taxa.data[ind,colSums(taxa.data[ind,])>0],\n                        method='spearman')\nplot.correlation.heatmap(pathway.bact.cor)\nrm(ind)\n\n### antiTNF\nind <- intersect(intersect(rownames(pathway.data),rownames(taxa.data)),rownames(subset(sample.info,Treatment=='antiTNF')))\npathway.bact.cor <- cor(pathway.data[ind,],taxa.data[ind,],method='spearman')\nplot.correlation.heatmap(pathway.bact.cor)\nrm(ind)\n\n### EEN\nind <- intersect(intersect(rownames(pathway.data),rownames(taxa.data)),rownames(subset(sample.info,Treatment.Specific=='EEN')))\npathway.bact.cor <- cor(pathway.data[ind,colSums(pathway.data[ind,])>0],\n                        taxa.data[ind,colSums(taxa.data[ind,])>0],\n                        method='spearman')\nplot.correlation.heatmap(pathway.bact.cor)\nrm(ind)\n\n### response\nind <- intersect(intersect(rownames(pathway.data),rownames(taxa.data)),rownames(subset(sample.info,Response=='Response')))\npathway.bact.cor <- cor(pathway.data[ind,],taxa.data[ind,],method='spearman')\nplot.correlation.heatmap(pathway.bact.cor)\nrm(ind)\n\n### non-response\nind <- intersect(intersect(rownames(pathway.data),rownames(taxa.data)),rownames(subset(sample.info,Response=='Non.Response')))\npathway.bact.cor <- cor(pathway.data[ind,],taxa.data[ind,],method='spearman')\nplot.correlation.heatmap(pathway.bact.cor)\nrm(ind)\n\n\n### PLEASE-T4 Response\nind <- intersect(intersect(rownames(pathway.data),rownames(taxa.data)),rownames(subset(sample.info,Type=='PLEASE-T4' & Response =='Response')))\npathway.bact.cor <- cor(pathway.data[ind,colSums(pathway.data[ind,])>0],\n                        taxa.data[ind,colSums(taxa.data[ind,])>0],\n                        method='spearman')\nplot.correlation.heatmap(pathway.bact.cor)\nrm(ind)\n```\n\n## Network\n```{r network_merge_all_data,cache=TRUE,eval=FALSE}\nnetwork.data <- add_rownames(sample.info,var='Sample') %>%\ndplyr::select(Sample,Type,Antibiotics.visit) %>%\nleft_join(add_rownames(taxa.data,var='Sample'),by='Sample') %>%\nleft_join(add_rownames(fungi.RPKM,var='Sample'),by='Sample') %>%\nleft_join(add_rownames(as.data.frame(pathway.data),var='Sample'),by='Sample') %>% \nleft_join(add_rownames(as.data.frame(t(mdata.nor)),var='Sample'),by='Sample') \n\n### Control samples\ncontrol.cor <- network.data %>% dplyr::filter(Type=='COMBO') %>%\ndplyr::select(-Sample,-Type,-Antibiotics.visit) %>%\n#dplyr::select(1:3) %>%\ncor(,method='spearman',use='pairwise.complete.obs') %>%\n(function(tdata){\ntdata[lower.tri(tdata,diag=TRUE)] <- NA\nreturn(tdata)\n}) %>%\nas.data.frame %>%\nadd_rownames(var='var1') %>%\ngather(var2,correlation,-1)\n\n## please-T1 no antibiotics use\npleaset1.no.anti.cor <- network.data %>% dplyr::filter(Type=='PLEASE-T1' & Antibiotics.visit=='Not.Use') %>%\ndplyr::select(-Sample,-Type,-Antibiotics.visit) %>%\n#dplyr::select(1:3) %>%\ncor(,method='spearman',use='pairwise.complete.obs') %>%\n(function(tdata){\ntdata[lower.tri(tdata,diag=TRUE)] <- NA\nreturn(tdata)\n}) %>%\nas.data.frame %>%\nadd_rownames(var='var1') %>%\ngather(var2,correlation,-1)\n\nbk <- unique(c(seq(-1,-0.4,length=10),seq(-0.4,0.4,length=50),seq(0.4,1,length=10)))\nhmcols<- colorRampPalette(c('#4575b4','#91bfdb','#e0f3f8',\n                            '#ffffbf','#fee090','#fc8d59','#d73027'\n                            ))(length(bk)-1)\ndata.frame(ctrl=control.cor,please=pleaset1.no.anti.cor) %>%\nmutate(cor.diff=abs(ctrl.correlation-please.correlation)) %>%\ndplyr::filter(cor.diff>1) %>%\nmutate(name=paste(ctrl.var1,ctrl.var2,sep='--')) %>%\ndplyr::select(name,ctrl.correlation,please.correlation) %>%\nna.omit %>%\nadd_back_rownames(row.var='name') %>%\npheatmap(., \n           scale='none',fontsize_row = 10, \n           clustering_distance_cols = \"manhattan\",\n           clustering_distance_rows = \"manhattan\",\n           cluster_cols = TRUE,\n           color =hmcols, breaks=bk,\n           cellwidth = 12, cellheight = 8\n           )\n\n\n######\nwrite.csv(control.cor.sig,file=paste('../3_Result/2015_03_05_Network_Correlation_Sig_COMBO.csv',sep=''),row.names=TRUE)\n```\n\n# Analyze UCLA 84 metabolite data\n\n\n```{r m84metabolite_check_the_data,cache=TRUE}\n##############\n# From Gary:\n# I just got off the phone with Jon Braun at UCLA.  Jon directs the CCFA Microbiome Initiative and is very involved with both our PLEASE metabolomic study and FARMM.  His group has identified 26 small molecules, imputed from microbiome sequencing data, that influence immune function in vitro.  He would like to know if any of these small molecules might have interesting associations in our PLEASE metabolomic dataset.  He would like to send us the name of these molecules and their KEGG annotations.  I was thinking that we could do a quick analysis to see if these metabolites are differentially expressed in the following fashion:\n# \n# 1) T1 vs. T4\n# 2) EEN vs. anti-TNF\n# 3) Response vs. Nonresponse\n#############################\n\n### How many metabolites in total\nprint(colnames(m84data.nor))\n```\n\n\n## Normal vs. Crohn-T1\n```{r m84metabolites_normal_vs_crohn_t1,cache=TRUE}\n###################### Normal and disease T1 #####################\nm84data.cp1 <- subset_data_by_sample_info(m84data.nor,sample.info,\n                                       Type=='COMBO' | Type=='PLEASE-T1')\ndim(m84data.cp1)\n```\n\n### Calculate distance\n```{r m84metabolites_calculate_distance,cache=TRUE}\nm84.distance.method <- \"Bray\"\n#### distance for taxa\ndist.m84.cp1 <- calculate_distance(X = m84data.cp1, method = m84.distance.method)\n\n### distribution\nhist(dist.m84.cp1,xlab='Distance',main='Metabolites (COMBO and PLEASE-T1)',breaks=20)\n\n```\n\n### Find the best clustering\n```{r m84metabolites_find_the_best_clustering,cache=TRUE}\nm84.pamk.best <- find_best_clustering(dist.m84.cp1,plot.results=TRUE)\n```\n\n### MDS analysis\n```{r m84metabolites__MDS,cache=TRUE,results='hide'}\n### MDS\nset.seed(10)\nm84.meta.MDS <- metaMDS(dist.m84.cp1)\n\n### Normal/Disease\np <- add_rownames(as.data.frame(m84.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ geom_point(aes(colour = Disease)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  labs(title = 'metaMDS') \nprint(p)\n\n### Normal/Disease, cluster\n### These are bacterial clusters !!\np <- add_rownames(as.data.frame(m84.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ geom_point(aes(colour = Disease,shape=Cluster)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,4),name=\"\") +\n  labs(title = 'metaMDS') \nprint(p)\n\n\n\n#### Fugal percentage \np <- add_rownames(as.data.frame(m84.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster,Fungi.Per),\n            by='Sample') %>% \n  mutate(Fungi.Per.sqrt=sqrt(Fungi.Per)) %>%\n  ggplot(aes(x=MDS1,y=MDS2))+ \n  geom_point(aes(colour = Disease,shape=Cluster,size = Fungi.Per.sqrt)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  scale_size_area()+\n  labs(title = 'metaMDS') \nprint(p)\n\n#### Human DNA percentage\np <- add_rownames(as.data.frame(m84.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster,Human.Per),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ \n  geom_point(aes(colour = Disease,shape=Cluster,size = Human.Per)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  scale_size_area()+\n  labs(title = 'metaMDS') \nprint(p)\n```\n\n\n### Random Forest \n```{r m84metabolites_random_forest_of_normal_vs_crohn,cache=FALSE}\n### (3) for the random forest Importance score plots in Figure 2C, we have a list of pathways. For this list, can you get results on which pathways have high abundances in Crohn's disease individual based on medians in normal and Crohn's children?\n\nrandom_forest(m84data.cp1,sample.info[,'Disease',drop=FALSE],\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=10,\n              title=\"Normal vs. Crohn\",boxplot.y=\"Abundance\",\n              seed=100)\n\n```\n\n\n### Wilcoxon rank test of normal vs. Crohn\n```{r m84metabolites_rank_test_of_normal_vs_crohn,cache=FALSE}\n### only plot the top 5 significant ones\nm84.cp1.wil <- wilcox_test(m84data.cp1,sample.info[,'Disease',drop=FALSE],\n                               plot.heatmap=FALSE,boxplot.top=0.05,boxplot.y='Abundance')\n\n###\n#write.csv(pathway.cp1.wil,file=paste('../3_Result/2015_03_05_Pathway_COMBO_PLEASET1_Wilcox.csv',sep=''),row.names=TRUE)\n\n```\n\n\n\n### Heatmap of normal vs. Crohn's disease (T1)\n```{r m84metabolites_heatmap_cp1,cache=TRUE,fig.width=15,fig.height=10}\n\n#####\ndat.nor <- m84data.cp1\nfor (pw in colnames(m84data.cp1)){\n  pw.dat <- m84data.cp1[,pw,drop=TRUE]\n  Me <- median(pw.dat)\n  Ma <- mad(pw.dat)\n  if (Ma==0){Me <- mean(pw.dat);Ma <- sd(pw.dat)}\n  pw.dat <- (pw.dat-Me)/Ma\n  pw.dat[pw.dat < -3] <- -3\n  pw.dat[pw.dat > 3] <- 3\n  dat.nor[,pw] <- pw.dat\n}\n\npheatmap(t(dat.nor),\n         border_color=\"grey60\",\n         cluster_cols = calculate_distance(X = m84data.cp1, method = \"Bray\"),\n         clustering_distance_rows = 'euclidean',#\n\n         #clustering_method = \"complete\",\n         annotation=sample.info[,c(\"Disease\",\"Time\",\"Response\",\"Treatment.Specific\",\"Cluster\",\"FCP\",\"Antibiotics.visit\",\"Steroids\")],\n         #color =hmcols, breaks=bk,\n         show_rownames = TRUE\n         #scale=\"row\",\n         #gaps_col = c(26, 111,191,273)\n         )\n\n#rm(data.heat)\nrm(pw)\nrm(dat.nor)\nrm(pw.dat)\nrm(Me)\nrm(Ma)\n```\n\n\n\n```{r m84metabolites_heatmap_all_time,cache=TRUE,eval=FALSE,fig.width=15,fig.height=10}\n## Heatmap of normal vs. Crohn's disease (all time points)\n##### hard to see something\n##### NOT RUN\n#####\ndat.nor <- m84data.nor\nfor (pw in colnames(m84data.nor)){\n  pw.dat <- m84data.nor[,pw,drop=TRUE]\n  Me <- median(pw.dat)\n  Ma <- mad(pw.dat)\n  if (Ma==0){Me <- mean(pw.dat);Ma <- sd(pw.dat)}\n  pw.dat <- (pw.dat-Me)/Ma\n  pw.dat[pw.dat < -3] <- -3\n  pw.dat[pw.dat > 3] <- 3\n  dat.nor[,pw] <- pw.dat\n}\n\npheatmap(t(dat.nor),\n         border_color=\"grey60\",\n         cluster_cols = calculate_distance(X = m84data.nor, method = \"Bray\") ,\n         clustering_distance_rows = 'euclidean', #c\n         #clustering_method = \"complete\",\n         annotation=sample.info[,c(\"Disease\",\"Time\",\"Response\",\"Treatment.Specific\",\"Cluster\",\"FCP\",\"Antibiotics.visit\",\"Steroids\")],\n         #color =hmcols, breaks=bk,\n         show_rownames = TRUE\n         #scale=\"row\",\n         #gaps_col = c(26, 111,191,273)\n         )\n\n#rm(data.heat)\nrm(pw)\nrm(dat.nor)\nrm(pw.dat)\nrm(Me)\nrm(Ma)\n```\n\n## Correlation between metabolites and FCP\n```{r m84metabolites_correlation_with_fcp,cache=TRUE,fig.height=10,fig.width=12}\n\n### FCP\nfor (meta in colnames(m84data.nor)){\n  meta.dat <- m84data.nor[,meta,drop=FALSE]\n  colnames(meta.dat) <- 'Meta'\n  ####\n  p <- add_rownames(as.data.frame(meta.dat),var='Sample') %>%\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \n  dplyr::filter(Time!='3') %>%\n  # dplyr::select(Meta,FCP,Time) %>%\n  ggplot(aes(x=Meta,y=FCP,colour = Cluster,shape=Cluster))+ stat_smooth(method = \"rlm\",se=FALSE,fullrange=FALSE, alpha = 0.1) + geom_point() + \n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\")) +\n  scale_shape_manual(values=c(20,1)) +\n  labs(title = meta) +\n  facet_grid(Treatment.Specific ~ Time, margins=TRUE) +\n  ylab('FCP')+xlab('Metabolites')+ #ylim(c(0,2500))+\n  theme_classic()\n  plot(p)\n}\n\n\n### By antibiotics\nfor (meta in colnames(m84data.nor)){\n  meta.dat <- m84data.nor[,meta,drop=FALSE]\n  colnames(meta.dat) <- 'Meta'\n  ####\n  p <- add_rownames(as.data.frame(meta.dat),var='Sample') %>%\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \n  dplyr::filter(Time!='3') %>%\n  # dplyr::select(Meta,FCP,Time) %>%\n  ggplot(aes(x=Meta,y=FCP,colour = Antibiotics.visit,shape=Antibiotics.visit))+ stat_smooth(method = \"rlm\",se=FALSE,fullrange=FALSE, alpha = 0.1) + geom_point() + \n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\")) +\n  scale_shape_manual(values=c(20,1)) +\n  labs(title = meta) +\n  facet_grid(Treatment.Specific ~ Time, margins=TRUE) +\n  ylab('FCP')+xlab('Metabolites')+ #ylim(c(0,2500))+\n  theme_classic()\n  plot(p)\n}\n\n### antibiotics only\nfor (meta in colnames(m84data.nor)){\n  meta.dat <- m84data.nor[,meta,drop=FALSE]\n  colnames(meta.dat) <- 'Meta'\n  ####\n  p <- add_rownames(as.data.frame(meta.dat),var='Sample') %>%\n  left_join(add_rownames(sample.info,var='Sample'),by='Sample') %>% \n  dplyr::filter(Time!='3' & Antibiotics.visit=='Not.Use') %>%\n  # dplyr::select(Meta,FCP,Time) %>%\n  ggplot(aes(x=Meta,y=FCP,colour = Antibiotics.visit))+ stat_smooth(method = \"rlm\",se=FALSE,fullrange=FALSE, alpha = 0.1) + geom_point() + \n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\")) +\n  scale_shape_manual(values=c(20,1)) +\n  labs(title = meta) +\n  facet_grid(Treatment.Specific ~ Time, margins=TRUE) +\n  ylab('FCP')+xlab('Metabolites')+ #ylim(c(0,2500))+\n  theme_classic()\n  plot(p)\n}\n```\n\n\n## Antibiotics use (T1)\n\n### Wilcoxon rank test \n```{r m84metabolites_rank_test_of_antibiotics_use,cache=TRUE}\n### plot top ones\nm84.antibio.wil <- wilcox_test(m84data.cp1,\n                    subset(sample.info,Group=='PLEASE',select=Antibiotics.visit),\n                             plot.heatmap=FALSE,boxplot.top=10,boxplot.y='Abundance')      \n###\n## write.csv(m84.antibio.wil,file=paste('../3_Result/2015_03_05_UCLA84Metabolites_PLEASE_Antibiotics_Use_Wilcox.csv',sep=''),row.names=TRUE)\n\n```\n\n### Random Forest \n```{r m84metabolites_random_forest_of_antibiotics_use,cache=TRUE}\nrandom_forest(m84data.cp1,\n              subset(sample.info,Group=='PLEASE',select=Antibiotics.visit),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=6,\n              title=\"Antibiotics use\",boxplot.y=\"Abundance\",\n              seed=100)\n```\n\n## Cluster 1 vs. cluster 2 (Bacterial clusters)\n\n### Wilcoxon rank test \n```{r m84metabolites_rank_test_of_cluster_1_vs_2,cache=TRUE}\n### plot all the significant ones\nm84.c1c2.wil <- wilcox_test(m84data.cp1,\n                                subset(sample.info,Group=='PLEASE',select=Cluster),\n                                plot.heatmap=FALSE,boxplot.top=0.05,boxplot.y='Abundance')       \n###\n##write.csv(m84.c1c2.wil,file=paste('../3_Result/2015_03_05_UCLA84Metabolites_PLEASE_Cluster_1_vs_2_Wilcox.csv',sep=''),row.names=TRUE)\n```\n\n### Random Forest \n```{r m84metabolites_random_forest_of_cluster_1_vs_2,cache=TRUE}\nrandom_forest(m84data.cp1,subset(sample.info,Group=='PLEASE' & !is.na(Cluster),select=Cluster),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Normal vs. Crohn\",boxplot.y=\"Abundance\",\n              seed=100)\n```\n\n\n## Responders vs. non-responders\n\n### Random Forest \n```{r m84metabolites_random_forest_of_r_vs_nr,cache=TRUE,fig.width=10}\n### EEN T1\nrandom_forest(m84data.nor,\n              subset(sample.info,Time==1 & Treatment.Specific=='EEN' & !is.na(Response),\n                     select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Response vs. non-response\",boxplot.y=\"Abundance\",\n              seed=100)\n### EEN T4\nrandom_forest(m84data.nor,\n              subset(sample.info,Time==4 & Treatment.Specific=='EEN' & !is.na(Response),\n                     select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Response vs. non-response\",boxplot.y=\"Abundance\",\n              seed=100)\n\n\n### antiTNF T1\nrandom_forest(m84data.nor,\n              subset(sample.info,Time==1 & Treatment.Specific=='antiTNF' & !is.na(Response),\n                     select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Response vs. non-response\",boxplot.y=\"Abundance\",\n              seed=100)\n\n### antiTNF T4\nrandom_forest(m84data.nor,\n              subset(sample.info,Time==4 & Treatment.Specific=='antiTNF' & !is.na(Response),\n                     select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Response vs. non-response\",boxplot.y=\"Abundance\",\n              seed=100)\n```\n\n### Wilcoxon rank test\n```{r m84metabolites_compare_response_vs_nonresponse,cache=TRUE}\n### compare response vs. non-response\n\n### T1: R vs. NR\nm84.t1.RvsNR <- wilcox_test(m84data.nor,subset(sample.info,Time==1 &  !is.na(Response),\n                                  select=Response),plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance')\n### T4: R vs. NR\nm84.t4.RvsNR <- wilcox_test(m84data.nor,subset(sample.info,Time==4 & !is.na(Response),\n                                  select=Response),plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance')\n\n\n### EEN T1: R vs. NR\nm84.een.t1.RvsNR <- wilcox_test(m84data.nor,subset(sample.info,Time==1 & Treatment.Specific=='EEN' & !is.na(Response),\n                                  select=Response),plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance')\n### EEN T4: R vs. NR\nm84.een.t4.RvsNR <- wilcox_test(m84data.nor,subset(sample.info,Time==4 & Treatment.Specific=='EEN' & !is.na(Response),\n                                  select=Response),plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance')\n### aniTNF T1: R vs. NR\nm84.antiTNF.t1.RvsNR <- wilcox_test(m84data.nor,subset(sample.info,Time==1 & Treatment.Specific=='antiTNF' & !is.na(Response),\n                                  select=Response),plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance')\n### antiTNF T4: R vs. NR\nm84.antiTNF.t4.RvsNR <- wilcox_test(m84data.nor,subset(sample.info,Time==4 & Treatment.Specific=='antiTNF' & !is.na(Response),\n                                  select=Response),plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance')\n\n```\n\n\n## T1 vs. T2/T4\n```{r m84metabolites_compare_time_points,cache=TRUE}\noptions(width=200)\n### compare time points\n### !!!!! No T3 data !!!!!!!\n\n#### by treatment only\nadd_rownames(as.data.frame(m84data.nor),var='Sample') %>%\n  gather(Meta,Abu,-Sample) %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),Subject,Sample,Time,Treatment.Specific,Response), by='Sample') %>%  \n  filter(!is.na(Time) & Time!='3') %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  dplyr::select(-Sample) %>% \n  spread(Time,Abu) %>%\n  group_by(Treatment.Specific,Meta) %>%\n  summarise_each(funs(wilcox.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  ## raw pvalues\n  rename(T1.vs.T2.p=vars1,T1.vs.T4.p=vars2) %>%\n  mutate(T1.vs.T2.q = p.adjust(T1.vs.T2.p,method='fdr'),\n         T1.vs.T4.q = p.adjust(T1.vs.T4.p,method='fdr')\n         ) %>%\n  mutate_each(funs(signif(.,digits=2)),T1.vs.T2.p:T1.vs.T4.q) %>%\n  arrange(Treatment.Specific,T1.vs.T4.p) %>%\n  dplyr::filter(T1.vs.T2.p<0.05 | T1.vs.T4.p<0.05) %>%\n  as.data.frame\n\n\n#### by treatment and response\nadd_rownames(as.data.frame(m84data.nor),var='Sample') %>%\n  gather(Meta,Abu,-Sample) %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),Subject,Sample,Time,Treatment.Specific,Response), by='Sample') %>%  \n  filter(!is.na(Time) & Time!='3') %>% \n  mutate(Time=paste('T',Time,sep='')) %>%\n  dplyr::select(-Sample) %>% \n  spread(Time,Abu) %>%\n  group_by(Treatment.Specific,Response,Meta) %>%\n  summarise_each(funs(wilcox.test(., T1, pair = TRUE)$p.value), vars = T2:T4) %>%\n  na.omit() %>%\n  ## raw pvalues\n  rename(T1.vs.T2.p=vars1,T1.vs.T4.p=vars2) %>%\n  mutate(T1.vs.T2.q = p.adjust(T1.vs.T2.p,method='fdr'),\n         T1.vs.T4.q = p.adjust(T1.vs.T4.p,method='fdr')\n         ) %>%\n  mutate_each(funs(signif(.,digits=2)),T1.vs.T2.p:T1.vs.T4.q) %>%\n  arrange(Treatment.Specific,Response,T1.vs.T4.p) %>%\n  dplyr::filter(T1.vs.T2.p<0.05 | T1.vs.T4.p<0.05) %>%\n  as.data.frame\noptions(width=90)\n```\n\n\n\n## EEN vs. antiTNF\n```{r m84metabolites_compare_treatments,cache=TRUE}\n### compare treatments\n\n### T4: EEN vs. antiTNF\nm84.t4.EENvsAntiTNF <- wilcox_test(m84data.nor,subset(sample.info,Time==4 & Treatment.Specific!='PEN',\n                                  select=Treatment.Specific),plot.heatmap=FALSE,boxplot.top=0.05,boxplot.y='Abundance')\n### T1: EEN vs. antiTNF as a control test \n### Check the baseline, since no treatment yet, they should not be different\nm84.t4.EENvsAntiTNF <- wilcox_test(m84data.nor,subset(sample.info,Time==1 & Treatment.Specific!='PEN',\n                                  select=Treatment.Specific),plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance')\n\n\n### T4 NR: EEN vs. antiTNF\nm84.t4.nr.EENvsAntiTNF <- wilcox_test(m84data.nor,\n                       subset(sample.info,Time==4 & Treatment.Specific!='PEN' & Response=='Non.Response',\n                         select=Treatment.Specific),plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance')\n### T1 NR: EEN vs. antiTNF as a control test \n### Check the baseline, since no treatment yet, they should not be different\nm84.t1.nr.EENvsAntiTNF <- wilcox_test(m84data.nor,\n                       subset(sample.info,Time==1 & Treatment.Specific!='PEN' & Response=='Non.Response',\n                         select=Treatment.Specific),plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance')\n\n### T4 R: EEN vs. antiTNF\nm84.t4.r.EENvsAntiTNF <- wilcox_test(m84data.nor,\n                       subset(sample.info,Time==4 & Treatment.Specific!='PEN' & Response=='Response',\n                         select=Treatment.Specific),plot.heatmap=FALSE,boxplot.top=0.05,boxplot.y='Abundance')\n### T1 R: EEN vs. antiTNF as a control test \n### Check the baseline, since no treatment yet, they should not be different\nm84.t1.r.EENvsAntiTNF <- wilcox_test(m84data.nor,\n                       subset(sample.info,Time==1 & Treatment.Specific!='PEN' & Response=='Response',\n                         select=Treatment.Specific),plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance')\n\n\n### T4: EEN vs. PEN\nm84.t4.EENvsPEN <- wilcox_test(m84data.nor,subset(sample.info,Time==4 & Treatment.Specific!='antiTNF',\n                                  select=Treatment.Specific),plot.heatmap=FALSE,boxplot.top=0.05,boxplot.y='Abundance')\n### T1: EEN vs. antiTNF as a control test \n### Check the baseline, since no treatment yet, they should not be different\nm84.t4.EENvsPEN <- wilcox_test(m84data.nor,subset(sample.info,Time==1 & Treatment.Specific!='antiTNF',\n                                  select=Treatment.Specific),plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance')\n\n\n### T4: PEN vs. antiTNF\nm84.t4.PENvsAntiTNF <- wilcox_test(m84data.nor,subset(sample.info,Time==4 & Treatment.Specific!='EEN',\n                                  select=Treatment.Specific),plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance')\n### T1: PEN vs. antiTNF as a control test \n### Check the baseline, since no treatment yet, they should not be different\nm84.t4.PENvsAntiTNF <- wilcox_test(m84data.nor,subset(sample.info,Time==1 & Treatment.Specific!='EEN',\n                                  select=Treatment.Specific),plot.heatmap=FALSE,boxplot.top=5,boxplot.y='Abundance')\n\n\n```\n\n\n\n\n\n\n\n# Analyze known metabolite data\n\n## Normal vs. Crohn-T1\n```{r known_metabolite_normal_vs_crohn_t1,cache=TRUE}\n### I don't use dplyr filter \n### because it will remove the row names\nkmetabolite.cp1 <- subset_data_by_sample_info(kmdata.nor,sample.info,\n                                          Type=='COMBO' | Type=='PLEASE-T1')\n\n### remove empty rows, \"6007-01\"\n# rownames(pathway.cp1)[rowSums(pathway.cp1) == 0]\n### there are other samples with empty rows\n### remember to remove them in the latter analysis\n\ndim(kmetabolite.cp1)\n```\n\n\n### Calculate distance\n```{r known_metabolite_calculate_distance,cache=TRUE,eval=FALSE}\nkmetabolite.distance.method <- \"Bray\"\nkmetabolite.dist.cp1 <- calculate_distance(X = kmdata.cp1, method = kmetabolite.distance.method, tree = NA)\n\n### distribution\nhist(kmetabolite.dist.cp1,xlab='Distance',main='Known metabolites (COMBO and PLEASE-T1)')\n\n```\n\n### Find the best clustering\n```{r known_metabolite_find_the_best_clustering,cache=TRUE,eval=FALSE}\nkmetabolite.pamk.best <- find_best_clustering(kmetabolite.dist.cp1,plot.results=TRUE)\n```\n\n### MDS analysis\n```{r known_metabolite_MDS,cache=TRUE,results='hide',eval=FALSE}\n### MDS\nset.seed(10)\npathway.meta.MDS <- metaMDS(pathway.dist.cp1)\n\n### Normal/Disease\np <- add_rownames(as.data.frame(pathway.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ geom_point(aes(colour = Disease)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  labs(title = 'metaMDS') \nprint(p)\n\n### Normal/Disease, cluster\n### These are bacterial clusters !!\np <- add_rownames(as.data.frame(pathway.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ geom_point(aes(colour = Disease,shape=Cluster)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,4),name=\"\") +\n  labs(title = 'metaMDS') \nprint(p)\n\n### Normal/Disease, cluster (for publication)\n### These are bacterial clusters !!\np <- add_rownames(as.data.frame(pathway.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ geom_point(aes(colour = Cluster,shape=Disease)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  labs(title = 'Ordination pathways') +\n  theme_classic()\nprint(p)\n\n\n#### Fugal percentage \np <- add_rownames(as.data.frame(pathway.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster,Fungi.Per),\n            by='Sample') %>% \n  mutate(Fungi.Per.sqrt=sqrt(Fungi.Per)) %>%\n  ggplot(aes(x=MDS1,y=MDS2))+ \n  geom_point(aes(colour = Disease,shape=Cluster,size = Fungi.Per.sqrt)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  scale_size_area()+\n  labs(title = 'metaMDS') \nprint(p)\n\n#### Human DNA percentage\np <- add_rownames(as.data.frame(pathway.meta.MDS$points),var='Sample') %>%\n  left_join(dplyr::select(add_rownames(sample.info,var='Sample'),\n                          Sample,Disease,Cluster,Human.Per),\n            by='Sample') %>% \n  ggplot(aes(x=MDS1,y=MDS2))+ \n  geom_point(aes(colour = Disease,shape=Cluster,size = Human.Per)) +\n  scale_color_manual(values=c(\"#0066CC\", \"#FF3333\"),name=\"\") +\n  scale_shape_manual(values=c(20,1),name=\"\") +\n  scale_size_area()+\n  labs(title = 'metaMDS') \nprint(p)\n```\n\n\n\n### Random Forest \n```{r known_metabolite_random_forest_of_normal_vs_crohn,cache=TRUE}\nrandom_forest(kmetabolite.cp1,sample.info[,'Disease',drop=FALSE],\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Normal vs. Crohn\",boxplot.y=\"Abundance\",\n              seed=100)\n```\n\n\n### Wilcoxon rank test of normal vs. Crohn\n```{r known_metabolite_rank_test_of_normal_vs_crohn,cache=TRUE}\n### only plot the top 5 significant ones\nkmetabolite.cp1.wil <- wilcox_test(kmetabolite.cp1,sample.info[,'Disease',drop=FALSE],\n                            plot.heatmap=FALSE,boxplot.top=10,boxplot.y='Abundance')\n\n###\nwrite.csv(kmetabolite.cp1.wil,file=paste('../3_Result/2015_03_05_Known_Metabolite_COMBO_PLEASET1_Wilcox.csv',sep=''),row.names=TRUE)\n```\n\n\n\n## Normal vs. Crohn-T1 without antibiotic use\n```{r known_metabolite_normal_vs_crohn_t1_no_antibiotics,cache=TRUE}\n### I don't use dplyr filter \n### because it will remove the row names\nkmetabolite.cp1.no.anti <- subset_data_by_sample_info(kmetabolite.cp1,sample.info,\n           Type=='COMBO' | (Type=='PLEASE-T1' & Antibiotics.visit=='Not.Use'))\n\ndim(kmetabolite.cp1.no.anti)\n```\n\n### Random Forest \n```{r known_metabolite_random_forest_of_normal_vs_crohn_no_antibiotics,cache=TRUE}\nrandom_forest(kmetabolite.cp1.no.anti,sample.info[,'Disease',drop=FALSE],\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Normal vs. Crohn (no antibiotics)\",boxplot.y=\"Abundance\",\n              seed=100)\n```\n\n\n### Wilcoxon rank test of normal vs. Crohn\n```{r known_metabolite_rank_test_of_normal_vs_crohn_no_antibiotics,cache=TRUE}\n### only plot the top 5 significant ones\nkmetabolite.cp1.no.anti.wil <- wilcox_test(kmetabolite.cp1.no.anti,sample.info[,'Disease',drop=FALSE],\n                            plot.heatmap=FALSE,boxplot.top=10,boxplot.y='Abundance')\n\n###\nwrite.csv(kmetabolite.cp1.no.anti.wil,file=paste('../3_Result/2015_03_05_Known_Metabolite_COMBO_PLEASET1_Without_Antibiotics_Wilcox.csv',sep=''),row.names=TRUE)\n```\n\n\n\n## Cluster 1 vs. cluster 2\n\n### Wilcoxon rank test \n```{r known_metabolite_rank_test_of_cluster_1_vs_2,cache=TRUE}\n### plot all the significant ones\nkmetabolite.c1c2.wil <- wilcox_test(kmetabolite.cp1,\n                             subset(sample.info,Group=='PLEASE',select=Cluster),\n                             plot.heatmap=FALSE,boxplot.top=10,boxplot.y='Abundance')      \n###\nwrite.csv(kmetabolite.c1c2.wil,file=paste('../3_Result/2015_03_05_Known_Metabolite_PLEASE_Cluster_1_2_Wilcox.csv',sep=''),row.names=TRUE)\n```\n\n### Random Forest \n```{r known_metabolite_random_forest_of_cluster_1_vs_2,cache=TRUE,eval=FALSE}\nrandom_forest(kmetabolite.cp1,\n              na.omit(subset(sample.info,Group=='PLEASE',select=Cluster)),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=5,\n              title=\"Cluster 1 vs. Cluster 2\",boxplot.y=\"Abundance\",\n              seed=100)\n```\n\n\n\n## Correlation of pathways and metabolites\n```{r known_metabolite_correlation_with_pathways,cache=TRUE,fig.height=18,fig.width=20}\n\nplot.correlation.heatmap = function(cor.matrix,\n                                    row.filter=0.5,\n                                    col.filter=0.5\n                                    ){\n  cor.matrix <- cor.matrix[\n  apply(cor.matrix,1,function(X){max(abs(X),na.rm=TRUE)>row.filter}),\n  apply(cor.matrix,2,function(X){max(abs(X),na.rm=TRUE)>col.filter})\n  ]\n  \n  bk <- unique(c(seq(-1,-0.4,length=10),\n                 seq(-0.4,0.4,length=50),\n                 seq(0.4,1,length=10)))\n  hmcols<- colorRampPalette(c('#4575b4','#91bfdb','#e0f3f8',\n                            '#ffffbf','#fee090','#fc8d59','#d73027'\n                            ))(length(bk)-1)\n\n  pheatmap(cor.matrix, \n           scale='none',fontsize_row = 10, \n           clustering_distance_cols = \"manhattan\",\n           clustering_distance_rows = \"manhattan\",\n           cluster_cols = TRUE,\n           color =hmcols, breaks=bk,\n           cellwidth = 10, cellheight = 10\n  )                              \n}\n\n\n### all\nind <- intersect(rownames(pathway.data),rownames(kmdata.nor))\npathway.metabolite.cor <- cor(pathway.data[ind,],\n                              kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                              method='spearman')\nplot.correlation.heatmap(pathway.metabolite.cor,row.filter=0.4,col.filter=0.4)\nrm(ind)\nrm(pathway.metabolite.cor)\n\n### control\nind <- intersect(intersect(rownames(pathway.data),rownames(kmdata.nor)),rownames(subset(sample.info,Type=='COMBO')))\npathway.metabolite.cor <- cor(pathway.data[ind,colSums(pathway.data[ind,])>0],\n                        kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                        method='spearman')\nplot.correlation.heatmap(pathway.metabolite.cor,row.filter=0.6,col.filter=0.6)\nrm(ind)\nrm(pathway.metabolite.cor)\n\n\n### PLEASE-T1\nind <- intersect(intersect(rownames(pathway.data),rownames(kmdata.nor)),rownames(subset(sample.info,Type=='PLEASE-T1')))\npathway.metabolite.cor <- cor(pathway.data[ind,colSums(pathway.data[ind,])>0],\n                        kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                        method='spearman')\nplot.correlation.heatmap(pathway.metabolite.cor,row.filter=0.5,col.filter=0.5)\nrm(ind)\nrm(pathway.metabolite.cor)\n\n\n### PLEASE-T4\nind <- intersect(intersect(rownames(pathway.data),rownames(kmdata.nor)),rownames(subset(sample.info,Type=='PLEASE-T4')))\npathway.metabolite.cor <- cor(pathway.data[ind,colSums(pathway.data[ind,])>0],\n                        kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                        method='spearman')\nplot.correlation.heatmap(pathway.metabolite.cor,row.filter=0.5,col.filter=0.5)\nrm(ind)\nrm(pathway.metabolite.cor)\n\n\n### antiTNF\nind <- intersect(intersect(rownames(pathway.data),rownames(kmdata.nor)),rownames(subset(sample.info,Treatment=='antiTNF')))\npathway.metabolite.cor <- cor(pathway.data[ind,colSums(pathway.data[ind,])>0],\n                        kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                        method='spearman')\nplot.correlation.heatmap(pathway.metabolite.cor,row.filter=0.5,col.filter=0.5)\nrm(ind)\nrm(pathway.metabolite.cor)\n\n\n### EEN\nind <- intersect(intersect(rownames(pathway.data),rownames(kmdata.nor)),rownames(subset(sample.info,Treatment.Specific=='EEN')))\npathway.metabolite.cor <- cor(pathway.data[ind,colSums(pathway.data[ind,])>0],\n                        kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                        method='spearman')\nplot.correlation.heatmap(pathway.metabolite.cor,row.filter=0.5,col.filter=0.5)\nrm(ind)\nrm(pathway.metabolite.cor)\n\n### response\nind <- intersect(intersect(rownames(pathway.data),rownames(kmdata.nor)),rownames(subset(sample.info,Response=='Response')))\npathway.metabolite.cor <- cor(pathway.data[ind,colSums(pathway.data[ind,])>0],\n                        kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                        method='spearman')\nplot.correlation.heatmap(pathway.metabolite.cor,row.filter=0.5,col.filter=0.5)\nrm(ind)\nrm(pathway.metabolite.cor)\n\n\n### non-response\nind <- intersect(intersect(rownames(pathway.data),rownames(kmdata.nor)),rownames(subset(sample.info,Response=='Non.Response')))\npathway.metabolite.cor <- cor(pathway.data[ind,colSums(pathway.data[ind,])>0],\n                        kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                        method='spearman')\nplot.correlation.heatmap(pathway.metabolite.cor,row.filter=0.5,col.filter=0.5)\nrm(ind)\nrm(pathway.metabolite.cor)\n\n\n### PLEASE-T4 Response\nind <- intersect(intersect(rownames(pathway.data),rownames(kmdata.nor)),rownames(subset(sample.info,Type=='PLEASE-T4' & Response =='Response')))\npathway.metabolite.cor <- cor(pathway.data[ind,colSums(pathway.data[ind,])>0],\n                        kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                        method='spearman')\nplot.correlation.heatmap(pathway.metabolite.cor,row.filter=0.6,col.filter=0.6)\nrm(ind)\nrm(pathway.metabolite.cor)\n\n### PLEASE-T4 Non-Response\nind <- intersect(intersect(rownames(pathway.data),rownames(kmdata.nor)),rownames(subset(sample.info,Type=='PLEASE-T4' & Response =='Non.Response')))\npathway.metabolite.cor <- cor(pathway.data[ind,colSums(pathway.data[ind,])>0],\n                        kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                        method='spearman')\nplot.correlation.heatmap(pathway.metabolite.cor,row.filter=0.6,col.filter=0.6)\nrm(ind)\nrm(pathway.metabolite.cor)\n```\n\n\n## Correlation of fungi and metabolites\n```{r known_metabolite_correlation_with_fungi,cache=TRUE,fig.height=18,fig.width=20}\n\nplot.correlation.heatmap = function(cor.matrix,\n                                    row.filter=0.5,\n                                    col.filter=0.5\n                                    ){\n  cor.matrix <- cor.matrix[\n  apply(cor.matrix,1,function(X){max(abs(X),na.rm=TRUE)>row.filter}),\n  apply(cor.matrix,2,function(X){max(abs(X),na.rm=TRUE)>col.filter})\n  ]\n  \n  bk <- unique(c(seq(-1,-0.4,length=10),\n                 seq(-0.4,0.4,length=50),\n                 seq(0.4,1,length=10)))\n  hmcols<- colorRampPalette(c('#4575b4','#91bfdb','#e0f3f8',\n                            '#ffffbf','#fee090','#fc8d59','#d73027'\n                            ))(length(bk)-1)\n\n  pheatmap(cor.matrix, \n           scale='none',fontsize_row = 10, \n           clustering_distance_cols = \"manhattan\",\n           clustering_distance_rows = \"manhattan\",\n           cluster_cols = TRUE,\n           color =hmcols, breaks=bk,\n           cellwidth = 10, cellheight = 10\n  )                              \n}\n\n\n### all\nind <- intersect(rownames(fungi.RPKM),rownames(kmdata.nor))\nfungi.metabolite.cor <- cor(fungi.RPKM[ind,],\n                              kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                              method='spearman')\nplot.correlation.heatmap(fungi.metabolite.cor,row.filter=0,col.filter=0.4)\nrm(ind)\nrm(fungi.metabolite.cor)\n\n### control\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(kmdata.nor)),rownames(subset(sample.info,Type=='COMBO')))\nfungi.metabolite.cor <- cor(fungi.RPKM[ind,],\n                              kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                              method='spearman')\nplot.correlation.heatmap(fungi.metabolite.cor,row.filter=0,col.filter=0.4)\nrm(ind)\nrm(fungi.metabolite.cor)\n\n\n### PLEASE-T1\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(kmdata.nor)),rownames(subset(sample.info,Type=='PLEASE-T1')))\nfungi.metabolite.cor <- cor(fungi.RPKM[ind,],\n                              kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                              method='spearman')\nplot.correlation.heatmap(fungi.metabolite.cor,row.filter=0,col.filter=0.4)\nrm(ind)\nrm(fungi.metabolite.cor)\n\n\n### PLEASE-T4\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(kmdata.nor)),rownames(subset(sample.info,Type=='PLEASE-T4')))\nfungi.metabolite.cor <- cor(fungi.RPKM[ind,],\n                              kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                              method='spearman')\nplot.correlation.heatmap(fungi.metabolite.cor,row.filter=0,col.filter=0.4)\nrm(ind)\nrm(fungi.metabolite.cor)\n\n### antiTNF\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(kmdata.nor)),rownames(subset(sample.info,Treatment=='antiTNF')))\nfungi.metabolite.cor <- cor(fungi.RPKM[ind,],\n                              kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                              method='spearman')\nplot.correlation.heatmap(fungi.metabolite.cor,row.filter=0,col.filter=0.4)\nrm(ind)\nrm(fungi.metabolite.cor)\n\n\n### EEN\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(kmdata.nor)),rownames(subset(sample.info,Treatment.Specific=='EEN')))\nfungi.metabolite.cor <- cor(fungi.RPKM[ind,],\n                              kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                              method='spearman')\nplot.correlation.heatmap(fungi.metabolite.cor,row.filter=0,col.filter=0.4)\nrm(ind)\nrm(fungi.metabolite.cor)\n\n### response\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(kmdata.nor)),rownames(subset(sample.info,Response=='Response')))\nfungi.metabolite.cor <- cor(fungi.RPKM[ind,],\n                              kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                              method='spearman')\nplot.correlation.heatmap(fungi.metabolite.cor,row.filter=0,col.filter=0.4)\nrm(ind)\nrm(fungi.metabolite.cor)\n\n\n### non-response\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(kmdata.nor)),rownames(subset(sample.info,Response=='Non.Response')))\nfungi.metabolite.cor <- cor(fungi.RPKM[ind,],\n                              kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                              method='spearman')\nplot.correlation.heatmap(fungi.metabolite.cor,row.filter=0,col.filter=0.4)\nrm(ind)\nrm(fungi.metabolite.cor)\n\n\n### PLEASE-T4 Response\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(kmdata.nor)),rownames(subset(sample.info,Type=='PLEASE-T4' & Response =='Response')))\nfungi.metabolite.cor <- cor(fungi.RPKM[ind,],\n                              kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                              method='spearman')\nplot.correlation.heatmap(fungi.metabolite.cor,row.filter=0,col.filter=0.4)\nrm(ind)\nrm(fungi.metabolite.cor)\n\n\n### PLEASE-T4 Non-Response\nind <- intersect(intersect(rownames(fungi.RPKM),rownames(kmdata.nor)),rownames(subset(sample.info,Type=='PLEASE-T4' & Response =='Non.Response')))\nfungi.metabolite.cor <- cor(fungi.RPKM[ind,],\n                              kmdata.nor[ind,apply(kmdata.nor[ind,],2,sd)>0],\n                              method='spearman')\nplot.correlation.heatmap(fungi.metabolite.cor,row.filter=0,col.filter=0.4)\nrm(ind)\nrm(fungi.metabolite.cor)\n\n```\n\n\n## Human DNA, bile acids and acyl-Carnitines\n\n### Merge data\nMerge the following data: human DNA, primary bile acids, secondary bile acids, and acyl-carnitines. Also calculate the ratio of primary / secondary bile acids.\n```{r known_metabolite_human_dna_bile_acid_acyl_carnitine,cache=TRUE}\nba.carnitine <- \n## Human DNA\nadd_rownames(sample.info,var='Sample') %>%\ndplyr::select(Sample,Human.Per) %>%\n## Secondary bile acids\nleft_join(dplyr::select(add_rownames(as.data.frame(kmdata.nor),var='Sample'),\n              Sample,`Deoxycholic acid`,`lithocholate`,\n              `Glycolithocholic acid`,`Lithocholic acid`),\n          by='Sample') %>%\n## Primary bile acids\nleft_join(dplyr::select(add_rownames(as.data.frame(kmdata.nor),var='Sample'),\n              Sample,`Glycochenodeoxycholic acid`,\n              `Glycocholic acid`,`Taurochenodesoxycholic acid`,\n              `Taurocholic acid`),\n          by='Sample') %>%\n## acyl-Carnitines\nleft_join(dplyr::select(add_rownames(as.data.frame(kmdata.nor),var='Sample'),\n              Sample,contains('carnitine')),\n          by='Sample') %>%\n## primary/secondary ratio\nrowwise() %>%\n#mutate(pri.sec.ratio=`Glycochenodeoxycholic acid`)\nmutate(pri.sec.ratio=\n              median(c(`Glycochenodeoxycholic acid`,\n              `Glycocholic acid`,`Taurochenodesoxycholic acid`,\n              `Taurocholic acid`),na.rm=TRUE) /\n               median(c(`Deoxycholic acid`,`lithocholate`,\n              `Glycolithocholic acid`,`Lithocholic acid`),na.rm=TRUE)\n       ) %>%\n## remove NAs\nna.omit %>%\n## \nadd_back_rownames(row.var='Sample')\n```\n\n\n####  Random Forest: Normal vs. IBD\n```{r known_metabolite_ba_carnitine_random_forest_of_normal_vs_crohn,cache=TRUE}\nrandom_forest(ba.carnitine,\n              subset(sample.info,Type=='COMBO' | Type=='PLEASE-T1',select=Disease),\n              #sample.info[,'Disease',drop=FALSE],\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=10,\n              title=\"Normal vs. Crohn\",boxplot.y=\"Abundance\",\n              seed=100)\n```\n\n#### Random Forest: Normal vs. IBD (no antibiotics)\n```{r known_metabolite_ba_carnitine_random_forest_of_normal_vs_crohn_no_antibiotics,cache=TRUE}\nrandom_forest(ba.carnitine,\n              subset(sample.info,Antibiotics.visit=='Not.Use' & (Type=='COMBO' | Type=='PLEASE-T1'),select=Disease),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=10,\n              title=\"Normal vs. Crohn (no antibiotics)\",boxplot.y=\"Abundance\",\n              seed=100)\n```\n\n#### Random Forest: Cluster1 vs. Cluster2 (baseline)\n```{r known_metabolite_ba_carnitine_random_forest_of_clusters_baseline,cache=TRUE}\nrandom_forest(ba.carnitine,\n              subset(sample.info,(Type=='COMBO' | Type=='PLEASE-T1') & !is.na(Cluster),select=Cluster),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=10,\n              title=\"Clusters\",boxplot.y=\"Abundance\",\n              seed=100)\n```\n\n#### Random Forest: EEN vs. antiTNF (T4)\n```{r known_metabolite_ba_carnitine_random_forest_of_een_antitnf_t4,cache=TRUE}\nrandom_forest(ba.carnitine,\n              subset(sample.info,Type=='PLEASE-T4' & (Treatment.Specific=='EEN' | Treatment.Specific=='antiTNF'),select=Treatment.Specific),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=10,\n              title=\"Treatment\",boxplot.y=\"Abundance\",\n              seed=100)\n```\n\n#### Random Forest: Response vs. Non-Response (T1) (exclude PEN subjects)\n```{r known_metabolite_ba_carnitine_random_forest_of_response_t1,cache=TRUE}\nrandom_forest(ba.carnitine,\n              subset(sample.info,Type=='PLEASE-T1' & !is.na(Response) & (Treatment.Specific=='EEN' | Treatment.Specific=='antiTNF'),select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=10,\n              title=\"Response\",boxplot.y=\"Abundance\",\n              seed=100)\n```\n\n\n#### Random Forest: Response vs. Non-Response (T4) (exclude PEN subjects)\n```{r known_metabolite_ba_carnitine_random_forest_of_response_t4,cache=TRUE}\nrandom_forest(ba.carnitine,\n              subset(sample.info,Type=='PLEASE-T4' & !is.na(Response) & (Treatment.Specific=='EEN' | Treatment.Specific=='antiTNF'),select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=10,\n              title=\"Response\",boxplot.y=\"Abundance\",\n              seed=100)\n```\n\n#### Random Forest: Response vs. Non-Response (T1) (EEN only)\n```{r known_metabolite_ba_carnitine_random_forest_of_een_response_t1,cache=TRUE}\nrandom_forest(ba.carnitine,\n              subset(sample.info,Type=='PLEASE-T1' & !is.na(Response) & (Treatment.Specific=='EEN' | Treatment.Specific=='antiTNF'),select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=10,\n              title=\"Response\",boxplot.y=\"Abundance\",\n              seed=100)\n```\n\n\n#### Random Forest: Response vs. Non-Response (T4) (EEN only)\n```{r known_metabolite_ba_carnitine_random_forest_of_een_response_t4,cache=TRUE}\nrandom_forest(ba.carnitine,\n              subset(sample.info,Type=='PLEASE-T4' & !is.na(Response) & (Treatment.Specific=='EEN' | Treatment.Specific=='antiTNF'),select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=10,\n              title=\"Response\",boxplot.y=\"Abundance\",\n              seed=100)\n```\n\n#### Random Forest: Response vs. Non-Response (T1) (antiTNF only)\n```{r known_metabolite_ba_carnitine_random_forest_of_antitnf_response_t1,cache=TRUE}\nrandom_forest(ba.carnitine,\n              subset(sample.info,Type=='PLEASE-T1' & !is.na(Response) & (Treatment.Specific=='EEN' | Treatment.Specific=='antiTNF'),select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=10,\n              title=\"Response\",boxplot.y=\"Abundance\",\n              seed=100)\n```\n\n\n#### Random Forest: Response vs. Non-Response (T4) (antiTNF only)\n```{r known_metabolite_ba_carnitine_random_forest_of_antitnf_response_t4,cache=TRUE}\nrandom_forest(ba.carnitine,\n              subset(sample.info,Type=='PLEASE-T4' & !is.na(Response) & (Treatment.Specific=='EEN' | Treatment.Specific=='antiTNF'),select=Response),\n              plot.MDS=TRUE,plot.importance=TRUE,print.result=FALSE,\n              guess.num=50,boxplot.top=10,\n              title=\"Response\",boxplot.y=\"Abundance\",\n              seed=100)\n```\n\n",
    "created" : 1440708917372.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2516939288",
    "id" : "600E799",
    "lastKnownWriteTime" : 1440615470,
    "path" : "~/Dropbox/HMP-Eric/3_1_PLEASE_Analysis_Organized/5_Analysis/2015_02_26_Combined_PLEASE_Analysis.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_markdown"
}